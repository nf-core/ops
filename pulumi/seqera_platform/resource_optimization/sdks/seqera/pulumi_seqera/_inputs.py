# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ActionConfigArgs',
    'ActionConfigArgsDict',
    'ActionConfigGithubArgs',
    'ActionConfigGithubArgsDict',
    'ActionConfigTowerArgs',
    'ActionConfigTowerArgsDict',
    'ActionEventArgs',
    'ActionEventArgsDict',
    'ActionEventGithubArgs',
    'ActionEventGithubArgsDict',
    'ActionEventTowerArgs',
    'ActionEventTowerArgsDict',
    'ActionLabelArgs',
    'ActionLabelArgsDict',
    'ActionLaunchArgs',
    'ActionLaunchArgsDict',
    'ActionLaunchComputeEnvArgs',
    'ActionLaunchComputeEnvArgsDict',
    'ActionLaunchComputeEnvConfigArgs',
    'ActionLaunchComputeEnvConfigArgsDict',
    'ActionLaunchComputeEnvConfigAltairPlatformArgs',
    'ActionLaunchComputeEnvConfigAltairPlatformArgsDict',
    'ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigAwsBatchArgs',
    'ActionLaunchComputeEnvConfigAwsBatchArgsDict',
    'ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs',
    'ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigAwsBatchForgeArgs',
    'ActionLaunchComputeEnvConfigAwsBatchForgeArgsDict',
    'ActionLaunchComputeEnvConfigAwsCloudArgs',
    'ActionLaunchComputeEnvConfigAwsCloudArgsDict',
    'ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs',
    'ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigAzureBatchArgs',
    'ActionLaunchComputeEnvConfigAzureBatchArgsDict',
    'ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs',
    'ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigAzureBatchForgeArgs',
    'ActionLaunchComputeEnvConfigAzureBatchForgeArgsDict',
    'ActionLaunchComputeEnvConfigEksPlatformArgs',
    'ActionLaunchComputeEnvConfigEksPlatformArgsDict',
    'ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigGkePlatformArgs',
    'ActionLaunchComputeEnvConfigGkePlatformArgsDict',
    'ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigGoogleBatchArgs',
    'ActionLaunchComputeEnvConfigGoogleBatchArgsDict',
    'ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs',
    'ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigGoogleLifesciencesArgs',
    'ActionLaunchComputeEnvConfigGoogleLifesciencesArgsDict',
    'ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs',
    'ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigK8sPlatformArgs',
    'ActionLaunchComputeEnvConfigK8sPlatformArgsDict',
    'ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigLsfPlatformArgs',
    'ActionLaunchComputeEnvConfigLsfPlatformArgsDict',
    'ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigMoabPlatformArgs',
    'ActionLaunchComputeEnvConfigMoabPlatformArgsDict',
    'ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformArgs',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformArgsDict',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgs',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgsDict',
    'ActionLaunchComputeEnvConfigSlurmPlatformArgs',
    'ActionLaunchComputeEnvConfigSlurmPlatformArgsDict',
    'ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgsDict',
    'ActionLaunchComputeEnvConfigUgePlatformArgs',
    'ActionLaunchComputeEnvConfigUgePlatformArgsDict',
    'ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs',
    'ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvArgs',
    'ComputeEnvComputeEnvArgsDict',
    'ComputeEnvComputeEnvConfigArgs',
    'ComputeEnvComputeEnvConfigArgsDict',
    'ComputeEnvComputeEnvConfigAltairPlatformArgs',
    'ComputeEnvComputeEnvConfigAltairPlatformArgsDict',
    'ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigAwsBatchArgs',
    'ComputeEnvComputeEnvConfigAwsBatchArgsDict',
    'ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs',
    'ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigAwsBatchForgeArgs',
    'ComputeEnvComputeEnvConfigAwsBatchForgeArgsDict',
    'ComputeEnvComputeEnvConfigAwsCloudArgs',
    'ComputeEnvComputeEnvConfigAwsCloudArgsDict',
    'ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs',
    'ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigAzureBatchArgs',
    'ComputeEnvComputeEnvConfigAzureBatchArgsDict',
    'ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs',
    'ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigAzureBatchForgeArgs',
    'ComputeEnvComputeEnvConfigAzureBatchForgeArgsDict',
    'ComputeEnvComputeEnvConfigEksPlatformArgs',
    'ComputeEnvComputeEnvConfigEksPlatformArgsDict',
    'ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigGkePlatformArgs',
    'ComputeEnvComputeEnvConfigGkePlatformArgsDict',
    'ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigGoogleBatchArgs',
    'ComputeEnvComputeEnvConfigGoogleBatchArgsDict',
    'ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs',
    'ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigGoogleLifesciencesArgs',
    'ComputeEnvComputeEnvConfigGoogleLifesciencesArgsDict',
    'ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs',
    'ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigK8sPlatformArgs',
    'ComputeEnvComputeEnvConfigK8sPlatformArgsDict',
    'ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigLsfPlatformArgs',
    'ComputeEnvComputeEnvConfigLsfPlatformArgsDict',
    'ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigMoabPlatformArgs',
    'ComputeEnvComputeEnvConfigMoabPlatformArgsDict',
    'ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformArgs',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformArgsDict',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgs',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgsDict',
    'ComputeEnvComputeEnvConfigSlurmPlatformArgs',
    'ComputeEnvComputeEnvConfigSlurmPlatformArgsDict',
    'ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvConfigUgePlatformArgs',
    'ComputeEnvComputeEnvConfigUgePlatformArgsDict',
    'ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs',
    'ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgsDict',
    'ComputeEnvComputeEnvLabelArgs',
    'ComputeEnvComputeEnvLabelArgsDict',
    'CredentialKeysArgs',
    'CredentialKeysArgsDict',
    'CredentialKeysAwsArgs',
    'CredentialKeysAwsArgsDict',
    'CredentialKeysAzureArgs',
    'CredentialKeysAzureArgsDict',
    'CredentialKeysAzureEntraArgs',
    'CredentialKeysAzureEntraArgsDict',
    'CredentialKeysAzurereposArgs',
    'CredentialKeysAzurereposArgsDict',
    'CredentialKeysBitbucketArgs',
    'CredentialKeysBitbucketArgsDict',
    'CredentialKeysCodecommitArgs',
    'CredentialKeysCodecommitArgsDict',
    'CredentialKeysContainerRegArgs',
    'CredentialKeysContainerRegArgsDict',
    'CredentialKeysGiteaArgs',
    'CredentialKeysGiteaArgsDict',
    'CredentialKeysGithubArgs',
    'CredentialKeysGithubArgsDict',
    'CredentialKeysGitlabArgs',
    'CredentialKeysGitlabArgsDict',
    'CredentialKeysGoogleArgs',
    'CredentialKeysGoogleArgsDict',
    'CredentialKeysK8sArgs',
    'CredentialKeysK8sArgsDict',
    'CredentialKeysSeqeracomputeArgs',
    'CredentialKeysSeqeracomputeArgsDict',
    'CredentialKeysSshArgs',
    'CredentialKeysSshArgsDict',
    'CredentialKeysTwAgentArgs',
    'CredentialKeysTwAgentArgsDict',
    'DataLinkCredentialArgs',
    'DataLinkCredentialArgsDict',
    'LabelsLabelArgs',
    'LabelsLabelArgsDict',
    'PipelineComputeEnvArgs',
    'PipelineComputeEnvArgsDict',
    'PipelineLabelArgs',
    'PipelineLabelArgsDict',
    'PipelineLaunchArgs',
    'PipelineLaunchArgsDict',
    'StudiosActiveConnectionArgs',
    'StudiosActiveConnectionArgsDict',
    'StudiosComputeEnvArgs',
    'StudiosComputeEnvArgsDict',
    'StudiosConfigurationArgs',
    'StudiosConfigurationArgsDict',
    'StudiosLabelArgs',
    'StudiosLabelArgsDict',
    'StudiosMountedDataLinkArgs',
    'StudiosMountedDataLinkArgsDict',
    'StudiosMountedDataLinkCredentialArgs',
    'StudiosMountedDataLinkCredentialArgsDict',
    'StudiosParentCheckpointArgs',
    'StudiosParentCheckpointArgsDict',
    'StudiosProgressArgs',
    'StudiosProgressArgsDict',
    'StudiosStatusInfoArgs',
    'StudiosStatusInfoArgsDict',
    'StudiosTemplateArgs',
    'StudiosTemplateArgsDict',
    'StudiosUserArgs',
    'StudiosUserArgsDict',
    'TokensTokenArgs',
    'TokensTokenArgsDict',
    'WorkflowsJobInfoArgs',
    'WorkflowsJobInfoArgsDict',
    'WorkflowsLabelArgs',
    'WorkflowsLabelArgsDict',
    'WorkflowsPlatformArgs',
    'WorkflowsPlatformArgsDict',
    'WorkflowsProgressArgs',
    'WorkflowsProgressArgsDict',
    'WorkflowsProgressProcessesProgressArgs',
    'WorkflowsProgressProcessesProgressArgsDict',
    'WorkflowsProgressWorkflowProgressArgs',
    'WorkflowsProgressWorkflowProgressArgsDict',
    'WorkflowsWorkflowArgs',
    'WorkflowsWorkflowArgsDict',
    'WorkflowsWorkflowManifestArgs',
    'WorkflowsWorkflowManifestArgsDict',
    'WorkflowsWorkflowNextflowArgs',
    'WorkflowsWorkflowNextflowArgsDict',
    'WorkflowsWorkflowStatsArgs',
    'WorkflowsWorkflowStatsArgsDict',
]

MYPY = False

if not MYPY:
    class ActionConfigArgsDict(TypedDict):
        github: NotRequired[pulumi.Input['ActionConfigGithubArgsDict']]
        tower: NotRequired[pulumi.Input['ActionConfigTowerArgsDict']]
elif False:
    ActionConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionConfigArgs:
    def __init__(__self__, *,
                 github: Optional[pulumi.Input['ActionConfigGithubArgs']] = None,
                 tower: Optional[pulumi.Input['ActionConfigTowerArgs']] = None):
        if github is not None:
            pulumi.set(__self__, "github", github)
        if tower is not None:
            pulumi.set(__self__, "tower", tower)

    @_builtins.property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['ActionConfigGithubArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['ActionConfigGithubArgs']]):
        pulumi.set(self, "github", value)

    @_builtins.property
    @pulumi.getter
    def tower(self) -> Optional[pulumi.Input['ActionConfigTowerArgs']]:
        return pulumi.get(self, "tower")

    @tower.setter
    def tower(self, value: Optional[pulumi.Input['ActionConfigTowerArgs']]):
        pulumi.set(self, "tower", value)


if not MYPY:
    class ActionConfigGithubArgsDict(TypedDict):
        discriminator: NotRequired[pulumi.Input[_builtins.str]]
        events: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    ActionConfigGithubArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionConfigGithubArgs:
    def __init__(__self__, *,
                 discriminator: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "discriminator")

    @discriminator.setter
    def discriminator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "discriminator", value)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "events", value)


if not MYPY:
    class ActionConfigTowerArgsDict(TypedDict):
        discriminator: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionConfigTowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionConfigTowerArgs:
    def __init__(__self__, *,
                 discriminator: Optional[pulumi.Input[_builtins.str]] = None):
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "discriminator")

    @discriminator.setter
    def discriminator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "discriminator", value)


if not MYPY:
    class ActionEventArgsDict(TypedDict):
        github: NotRequired[pulumi.Input['ActionEventGithubArgsDict']]
        tower: NotRequired[pulumi.Input['ActionEventTowerArgsDict']]
elif False:
    ActionEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionEventArgs:
    def __init__(__self__, *,
                 github: Optional[pulumi.Input['ActionEventGithubArgs']] = None,
                 tower: Optional[pulumi.Input['ActionEventTowerArgs']] = None):
        if github is not None:
            pulumi.set(__self__, "github", github)
        if tower is not None:
            pulumi.set(__self__, "tower", tower)

    @_builtins.property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['ActionEventGithubArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['ActionEventGithubArgs']]):
        pulumi.set(self, "github", value)

    @_builtins.property
    @pulumi.getter
    def tower(self) -> Optional[pulumi.Input['ActionEventTowerArgs']]:
        return pulumi.get(self, "tower")

    @tower.setter
    def tower(self, value: Optional[pulumi.Input['ActionEventTowerArgs']]):
        pulumi.set(self, "tower", value)


if not MYPY:
    class ActionEventGithubArgsDict(TypedDict):
        commit_id: NotRequired[pulumi.Input[_builtins.str]]
        commit_message: NotRequired[pulumi.Input[_builtins.str]]
        discriminator: NotRequired[pulumi.Input[_builtins.str]]
        pusher_email: NotRequired[pulumi.Input[_builtins.str]]
        pusher_name: NotRequired[pulumi.Input[_builtins.str]]
        ref: NotRequired[pulumi.Input[_builtins.str]]
        timestamp: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionEventGithubArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionEventGithubArgs:
    def __init__(__self__, *,
                 commit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 commit_message: Optional[pulumi.Input[_builtins.str]] = None,
                 discriminator: Optional[pulumi.Input[_builtins.str]] = None,
                 pusher_email: Optional[pulumi.Input[_builtins.str]] = None,
                 pusher_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ref: Optional[pulumi.Input[_builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[_builtins.str]] = None):
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if commit_message is not None:
            pulumi.set(__self__, "commit_message", commit_message)
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)
        if pusher_email is not None:
            pulumi.set(__self__, "pusher_email", pusher_email)
        if pusher_name is not None:
            pulumi.set(__self__, "pusher_name", pusher_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "commit_id")

    @commit_id.setter
    def commit_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "commit_id", value)

    @_builtins.property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "commit_message")

    @commit_message.setter
    def commit_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "commit_message", value)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "discriminator")

    @discriminator.setter
    def discriminator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "discriminator", value)

    @_builtins.property
    @pulumi.getter(name="pusherEmail")
    def pusher_email(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pusher_email")

    @pusher_email.setter
    def pusher_email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pusher_email", value)

    @_builtins.property
    @pulumi.getter(name="pusherName")
    def pusher_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pusher_name")

    @pusher_name.setter
    def pusher_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pusher_name", value)

    @_builtins.property
    @pulumi.getter
    def ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ref")

    @ref.setter
    def ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ref", value)

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class ActionEventTowerArgsDict(TypedDict):
        discriminator: NotRequired[pulumi.Input[_builtins.str]]
        timestamp: NotRequired[pulumi.Input[_builtins.str]]
        workflow_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionEventTowerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionEventTowerArgs:
    def __init__(__self__, *,
                 discriminator: Optional[pulumi.Input[_builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_id: Optional[pulumi.Input[_builtins.str]] = None):
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "discriminator")

    @discriminator.setter
    def discriminator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "discriminator", value)

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timestamp", value)

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workflow_id", value)


if not MYPY:
    class ActionLabelArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the label was created
        """
        id: NotRequired[pulumi.Input[_builtins.float]]
        """
        Unique numeric identifier for the label
        """
        is_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a default system label
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name or key of the label
        """
        resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a resource-level label
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value associated with the label
        """
elif False:
    ActionLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLabelArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the label was created
        :param pulumi.Input[_builtins.float] id: Unique numeric identifier for the label
        :param pulumi.Input[_builtins.bool] is_default: Flag indicating if this is a default system label
        :param pulumi.Input[_builtins.str] name: Name or key of the label
        :param pulumi.Input[_builtins.bool] resource: Flag indicating if this is a resource-level label
        :param pulumi.Input[_builtins.str] value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchArgsDict(TypedDict):
        compute_env_id: pulumi.Input[_builtins.str]
        """
        Requires replacement if changed.
        """
        pipeline: pulumi.Input[_builtins.str]
        """
        Requires replacement if changed.
        """
        work_dir: pulumi.Input[_builtins.str]
        """
        Requires replacement if changed.
        """
        compute_env: NotRequired[pulumi.Input['ActionLaunchComputeEnvArgsDict']]
        config_profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        config_text: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        entry_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        label_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]
        """
        Requires replacement if changed.
        """
        last_updated: NotRequired[pulumi.Input[_builtins.str]]
        launch_container: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        main_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        optimization_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        optimization_targets: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        params_text: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        """
        pull_latest: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        resume: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        resume_launch_id: NotRequired[pulumi.Input[_builtins.str]]
        revision: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        run_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        schema_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        session_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        stub_run: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        tower_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        user_secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        workspace_secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
elif False:
    ActionLaunchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchArgs:
    def __init__(__self__, *,
                 compute_env_id: pulumi.Input[_builtins.str],
                 pipeline: pulumi.Input[_builtins.str],
                 work_dir: pulumi.Input[_builtins.str],
                 compute_env: Optional[pulumi.Input['ActionLaunchComputeEnvArgs']] = None,
                 config_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 config_text: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 entry_name: Optional[pulumi.Input[_builtins.str]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_container: Optional[pulumi.Input[_builtins.str]] = None,
                 main_script: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
                 params_text: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume_launch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 revision: Optional[pulumi.Input[_builtins.str]] = None,
                 run_name: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stub_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 tower_config: Optional[pulumi.Input[_builtins.str]] = None,
                 user_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 workspace_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pipeline: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] config_profiles: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] config_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] date_created: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] entry_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_container: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] main_script: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_targets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] params_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] pull_latest: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] resume: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] revision: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] run_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] schema_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] session_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] stub_run: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] tower_config: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_secrets: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workspace_secrets: Requires replacement if changed.
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "pipeline", pipeline)
        pulumi.set(__self__, "work_dir", work_dir)
        if compute_env is not None:
            pulumi.set(__self__, "compute_env", compute_env)
        if config_profiles is not None:
            pulumi.set(__self__, "config_profiles", config_profiles)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if launch_container is not None:
            pulumi.set(__self__, "launch_container", launch_container)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if optimization_id is not None:
            pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_targets is not None:
            pulumi.set(__self__, "optimization_targets", optimization_targets)
        if params_text is not None:
            pulumi.set(__self__, "params_text", params_text)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if pull_latest is not None:
            pulumi.set(__self__, "pull_latest", pull_latest)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if resume_launch_id is not None:
            pulumi.set(__self__, "resume_launch_id", resume_launch_id)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if stub_run is not None:
            pulumi.set(__self__, "stub_run", stub_run)
        if tower_config is not None:
            pulumi.set(__self__, "tower_config", tower_config)
        if user_secrets is not None:
            pulumi.set(__self__, "user_secrets", user_secrets)
        if workspace_secrets is not None:
            pulumi.set(__self__, "workspace_secrets", workspace_secrets)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "work_dir", value)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvArgs']]:
        return pulumi.get(self, "compute_env")

    @compute_env.setter
    def compute_env(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvArgs']]):
        pulumi.set(self, "compute_env", value)

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_profiles")

    @config_profiles.setter
    def config_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "config_profiles", value)

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_text")

    @config_text.setter
    def config_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_text", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "entry_name")

    @entry_name.setter
    def entry_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entry_name", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_container")

    @launch_container.setter
    def launch_container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_container", value)

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "main_script")

    @main_script.setter
    def main_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "main_script", value)

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_id")

    @optimization_id.setter
    def optimization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_id", value)

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_targets")

    @optimization_targets.setter
    def optimization_targets(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_targets", value)

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "params_text")

    @params_text.setter
    def params_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params_text", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pull_latest")

    @pull_latest.setter
    def pull_latest(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pull_latest", value)

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resume")

    @resume.setter
    def resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resume", value)

    @_builtins.property
    @pulumi.getter(name="resumeLaunchId")
    def resume_launch_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resume_launch_id")

    @resume_launch_id.setter
    def resume_launch_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resume_launch_id", value)

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "revision", value)

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "run_name")

    @run_name.setter
    def run_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_name", value)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_id", value)

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "stub_run")

    @stub_run.setter
    def stub_run(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub_run", value)

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "tower_config")

    @tower_config.setter
    def tower_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tower_config", value)

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_secrets")

    @user_secrets.setter
    def user_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_secrets", value)

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_secrets")

    @workspace_secrets.setter
    def workspace_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "workspace_secrets", value)


if not MYPY:
    class ActionLaunchComputeEnvArgsDict(TypedDict):
        compute_env_id: NotRequired[pulumi.Input[_builtins.str]]
        config: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigArgsDict']]
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        """
        credentials_id: NotRequired[pulumi.Input[_builtins.str]]
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        deleted: NotRequired[pulumi.Input[_builtins.bool]]
        description: NotRequired[pulumi.Input[_builtins.str]]
        last_updated: NotRequired[pulumi.Input[_builtins.str]]
        last_used: NotRequired[pulumi.Input[_builtins.str]]
        message: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        org_id: NotRequired[pulumi.Input[_builtins.float]]
        platform: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]
        """
        primary: NotRequired[pulumi.Input[_builtins.bool]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        workspace_id: NotRequired[pulumi.Input[_builtins.float]]
elif False:
    ActionLaunchComputeEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvArgs:
    def __init__(__self__, *,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input['ActionLaunchComputeEnvConfigArgs']] = None,
                 credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 last_used: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 platform: Optional[pulumi.Input[_builtins.str]] = None,
                 primary: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        :param pulumi.Input['ActionLaunchComputeEnvConfigArgs'] config: Configuration settings for compute environments including work directories,
               pre/post run scripts, and environment-specific parameters.
        :param pulumi.Input[_builtins.str] platform: must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]
        :param pulumi.Input[_builtins.str] status: must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        if compute_env_id is not None:
            pulumi.set(__self__, "compute_env_id", compute_env_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigArgs']]:
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigArgs']]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credentials_id", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "deleted")

    @deleted.setter
    def deleted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deleted", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_used")

    @last_used.setter
    def last_used(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_used", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "platform", value)

    @_builtins.property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "primary", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigArgsDict(TypedDict):
        altair_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformArgsDict']]
        aws_batch: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchArgsDict']]
        aws_cloud: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudArgsDict']]
        azure_batch: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchArgsDict']]
        eks_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformArgsDict']]
        gke_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformArgsDict']]
        google_batch: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchArgsDict']]
        google_lifesciences: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesArgsDict']]
        k8s_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformArgsDict']]
        lsf_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformArgsDict']]
        moab_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformArgsDict']]
        seqeracompute_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformArgsDict']]
        slurm_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformArgsDict']]
        uge_platform: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformArgsDict']]
elif False:
    ActionLaunchComputeEnvConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigArgs:
    def __init__(__self__, *,
                 altair_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformArgs']] = None,
                 aws_batch: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchArgs']] = None,
                 aws_cloud: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudArgs']] = None,
                 azure_batch: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchArgs']] = None,
                 eks_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformArgs']] = None,
                 gke_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformArgs']] = None,
                 google_batch: Optional[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchArgs']] = None,
                 google_lifesciences: Optional[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesArgs']] = None,
                 k8s_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformArgs']] = None,
                 lsf_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformArgs']] = None,
                 moab_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformArgs']] = None,
                 seqeracompute_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformArgs']] = None,
                 slurm_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformArgs']] = None,
                 uge_platform: Optional[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformArgs']] = None):
        if altair_platform is not None:
            pulumi.set(__self__, "altair_platform", altair_platform)
        if aws_batch is not None:
            pulumi.set(__self__, "aws_batch", aws_batch)
        if aws_cloud is not None:
            pulumi.set(__self__, "aws_cloud", aws_cloud)
        if azure_batch is not None:
            pulumi.set(__self__, "azure_batch", azure_batch)
        if eks_platform is not None:
            pulumi.set(__self__, "eks_platform", eks_platform)
        if gke_platform is not None:
            pulumi.set(__self__, "gke_platform", gke_platform)
        if google_batch is not None:
            pulumi.set(__self__, "google_batch", google_batch)
        if google_lifesciences is not None:
            pulumi.set(__self__, "google_lifesciences", google_lifesciences)
        if k8s_platform is not None:
            pulumi.set(__self__, "k8s_platform", k8s_platform)
        if lsf_platform is not None:
            pulumi.set(__self__, "lsf_platform", lsf_platform)
        if moab_platform is not None:
            pulumi.set(__self__, "moab_platform", moab_platform)
        if seqeracompute_platform is not None:
            pulumi.set(__self__, "seqeracompute_platform", seqeracompute_platform)
        if slurm_platform is not None:
            pulumi.set(__self__, "slurm_platform", slurm_platform)
        if uge_platform is not None:
            pulumi.set(__self__, "uge_platform", uge_platform)

    @_builtins.property
    @pulumi.getter(name="altairPlatform")
    def altair_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformArgs']]:
        return pulumi.get(self, "altair_platform")

    @altair_platform.setter
    def altair_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformArgs']]):
        pulumi.set(self, "altair_platform", value)

    @_builtins.property
    @pulumi.getter(name="awsBatch")
    def aws_batch(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchArgs']]:
        return pulumi.get(self, "aws_batch")

    @aws_batch.setter
    def aws_batch(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchArgs']]):
        pulumi.set(self, "aws_batch", value)

    @_builtins.property
    @pulumi.getter(name="awsCloud")
    def aws_cloud(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudArgs']]:
        return pulumi.get(self, "aws_cloud")

    @aws_cloud.setter
    def aws_cloud(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudArgs']]):
        pulumi.set(self, "aws_cloud", value)

    @_builtins.property
    @pulumi.getter(name="azureBatch")
    def azure_batch(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchArgs']]:
        return pulumi.get(self, "azure_batch")

    @azure_batch.setter
    def azure_batch(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchArgs']]):
        pulumi.set(self, "azure_batch", value)

    @_builtins.property
    @pulumi.getter(name="eksPlatform")
    def eks_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformArgs']]:
        return pulumi.get(self, "eks_platform")

    @eks_platform.setter
    def eks_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformArgs']]):
        pulumi.set(self, "eks_platform", value)

    @_builtins.property
    @pulumi.getter(name="gkePlatform")
    def gke_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformArgs']]:
        return pulumi.get(self, "gke_platform")

    @gke_platform.setter
    def gke_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformArgs']]):
        pulumi.set(self, "gke_platform", value)

    @_builtins.property
    @pulumi.getter(name="googleBatch")
    def google_batch(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchArgs']]:
        return pulumi.get(self, "google_batch")

    @google_batch.setter
    def google_batch(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchArgs']]):
        pulumi.set(self, "google_batch", value)

    @_builtins.property
    @pulumi.getter(name="googleLifesciences")
    def google_lifesciences(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesArgs']]:
        return pulumi.get(self, "google_lifesciences")

    @google_lifesciences.setter
    def google_lifesciences(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesArgs']]):
        pulumi.set(self, "google_lifesciences", value)

    @_builtins.property
    @pulumi.getter(name="k8sPlatform")
    def k8s_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformArgs']]:
        return pulumi.get(self, "k8s_platform")

    @k8s_platform.setter
    def k8s_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformArgs']]):
        pulumi.set(self, "k8s_platform", value)

    @_builtins.property
    @pulumi.getter(name="lsfPlatform")
    def lsf_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformArgs']]:
        return pulumi.get(self, "lsf_platform")

    @lsf_platform.setter
    def lsf_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformArgs']]):
        pulumi.set(self, "lsf_platform", value)

    @_builtins.property
    @pulumi.getter(name="moabPlatform")
    def moab_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformArgs']]:
        return pulumi.get(self, "moab_platform")

    @moab_platform.setter
    def moab_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformArgs']]):
        pulumi.set(self, "moab_platform", value)

    @_builtins.property
    @pulumi.getter(name="seqeracomputePlatform")
    def seqeracompute_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformArgs']]:
        return pulumi.get(self, "seqeracompute_platform")

    @seqeracompute_platform.setter
    def seqeracompute_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformArgs']]):
        pulumi.set(self, "seqeracompute_platform", value)

    @_builtins.property
    @pulumi.getter(name="slurmPlatform")
    def slurm_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformArgs']]:
        return pulumi.get(self, "slurm_platform")

    @slurm_platform.setter
    def slurm_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformArgs']]):
        pulumi.set(self, "slurm_platform", value)

    @_builtins.property
    @pulumi.getter(name="ugePlatform")
    def uge_platform(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformArgs']]:
        return pulumi.get(self, "uge_platform")

    @uge_platform.setter
    def uge_platform(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformArgs']]):
        pulumi.set(self, "uge_platform", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAltairPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigAltairPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAltairPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAwsBatchArgsDict(TypedDict):
        cli_path: NotRequired[pulumi.Input[_builtins.str]]
        compute_job_role: NotRequired[pulumi.Input[_builtins.str]]
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        dragen_queue: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        execution_role: NotRequired[pulumi.Input[_builtins.str]]
        forge: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchForgeArgsDict']]
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        fusion_snapshots: NotRequired[pulumi.Input[_builtins.bool]]
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        head_job_role: NotRequired[pulumi.Input[_builtins.str]]
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        log_group: NotRequired[pulumi.Input[_builtins.str]]
        lustre_id: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        nvnme_storage_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        storage_type: NotRequired[pulumi.Input[_builtins.str]]
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigAwsBatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAwsBatchArgs:
    def __init__(__self__, *,
                 cli_path: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs']]]] = None,
                 execution_role: Optional[pulumi.Input[_builtins.str]] = None,
                 forge: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchForgeArgs']] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fusion_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group: Optional[pulumi.Input[_builtins.str]] = None,
                 lustre_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nvnme_storage_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""lustre_id is deprecated: Deprecated""")
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""storage_type is deprecated: Deprecated""")
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cli_path")

    @cli_path.setter
    def cli_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cli_path", value)

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_job_role")

    @compute_job_role.setter
    def compute_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_job_role", value)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_queue")

    @dragen_queue.setter
    def dragen_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execution_role", value)

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchForgeArgs']]:
        return pulumi.get(self, "forge")

    @forge.setter
    def forge(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAwsBatchForgeArgs']]):
        pulumi.set(self, "forge", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion_snapshots")

    @fusion_snapshots.setter
    def fusion_snapshots(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_snapshots", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_role")

    @head_job_role.setter
    def head_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_role", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group", value)

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lustre_id")

    @lustre_id.setter
    def lustre_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lustre_id", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "nvnme_storage_enabled")

    @nvnme_storage_enabled.setter
    def nvnme_storage_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nvnme_storage_enabled", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volumes", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAwsBatchForgeArgsDict(TypedDict):
        alloc_strategy: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        """
        allow_buckets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        arm64_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        bid_percentage: NotRequired[pulumi.Input[_builtins.float]]
        dispose_on_deletion: NotRequired[pulumi.Input[_builtins.bool]]
        dragen_ami_id: NotRequired[pulumi.Input[_builtins.str]]
        dragen_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        ebs_auto_scale: NotRequired[pulumi.Input[_builtins.bool]]
        ebs_block_size: NotRequired[pulumi.Input[_builtins.float]]
        ebs_boot_size: NotRequired[pulumi.Input[_builtins.float]]
        ec2_key_pair: NotRequired[pulumi.Input[_builtins.str]]
        ecs_config: NotRequired[pulumi.Input[_builtins.str]]
        efs_create: NotRequired[pulumi.Input[_builtins.bool]]
        efs_id: NotRequired[pulumi.Input[_builtins.str]]
        efs_mount: NotRequired[pulumi.Input[_builtins.str]]
        fargate_head_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        fsx_mount: NotRequired[pulumi.Input[_builtins.str]]
        fsx_name: NotRequired[pulumi.Input[_builtins.str]]
        fsx_size: NotRequired[pulumi.Input[_builtins.float]]
        fusion_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        gpu_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        image_id: NotRequired[pulumi.Input[_builtins.str]]
        instance_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        max_cpus: NotRequired[pulumi.Input[_builtins.float]]
        min_cpus: NotRequired[pulumi.Input[_builtins.float]]
        security_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["SPOT", "EC2"]
        """
        vpc_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigAwsBatchForgeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAwsBatchForgeArgs:
    def __init__(__self__, *,
                 alloc_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 arm64_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 bid_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 dispose_on_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_ami_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ebs_auto_scale: Optional[pulumi.Input[_builtins.bool]] = None,
                 ebs_block_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ebs_boot_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ec2_key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 ecs_config: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 efs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fargate_head_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fsx_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_name: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_size: Optional[pulumi.Input[_builtins.float]] = None,
                 fusion_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 gpu_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 min_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        :param pulumi.Input[_builtins.str] type: must be one of ["SPOT", "EC2"]
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        """
        return pulumi.get(self, "alloc_strategy")

    @alloc_strategy.setter
    def alloc_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alloc_strategy", value)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "allow_buckets")

    @allow_buckets.setter
    def allow_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_buckets", value)

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "arm64_enabled")

    @arm64_enabled.setter
    def arm64_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "arm64_enabled", value)

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "bid_percentage")

    @bid_percentage.setter
    def bid_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bid_percentage", value)

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "dispose_on_deletion")

    @dispose_on_deletion.setter
    def dispose_on_deletion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dispose_on_deletion", value)

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_ami_id")

    @dragen_ami_id.setter
    def dragen_ami_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_ami_id", value)

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "dragen_enabled")

    @dragen_enabled.setter
    def dragen_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dragen_enabled", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ebs_auto_scale")

    @ebs_auto_scale.setter
    def ebs_auto_scale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ebs_auto_scale", value)

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ebs_block_size")

    @ebs_block_size.setter
    def ebs_block_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_block_size", value)

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ebs_boot_size")

    @ebs_boot_size.setter
    def ebs_boot_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_boot_size", value)

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ec2_key_pair")

    @ec2_key_pair.setter
    def ec2_key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ec2_key_pair", value)

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ecs_config")

    @ecs_config.setter
    def ecs_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ecs_config", value)

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "efs_create")

    @efs_create.setter
    def efs_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "efs_create", value)

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "efs_id")

    @efs_id.setter
    def efs_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_id", value)

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "efs_mount")

    @efs_mount.setter
    def efs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_mount", value)

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fargate_head_enabled")

    @fargate_head_enabled.setter
    def fargate_head_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fargate_head_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "fsx_mount")

    @fsx_mount.setter
    def fsx_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_mount", value)

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "fsx_name")

    @fsx_name.setter
    def fsx_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_name", value)

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "fsx_size")

    @fsx_size.setter
    def fsx_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "fsx_size", value)

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion_enabled")

    @fusion_enabled.setter
    def fusion_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_enabled", value)

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "gpu_enabled")

    @gpu_enabled.setter
    def gpu_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gpu_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_types", value)

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "max_cpus")

    @max_cpus.setter
    def max_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_cpus", value)

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "min_cpus")

    @min_cpus.setter
    def min_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_cpus", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["SPOT", "EC2"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAwsCloudArgsDict(TypedDict):
        allow_buckets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        arm64_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        ebs_boot_size: NotRequired[pulumi.Input[_builtins.float]]
        ec2_key_pair: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        gpu_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        image_id: NotRequired[pulumi.Input[_builtins.str]]
        instance_profile_arn: NotRequired[pulumi.Input[_builtins.str]]
        instance_type: NotRequired[pulumi.Input[_builtins.str]]
        log_group: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        security_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        subnet_id: NotRequired[pulumi.Input[_builtins.str]]
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigAwsCloudArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAwsCloudArgs:
    def __init__(__self__, *,
                 allow_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 arm64_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ebs_boot_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ec2_key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 gpu_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_profile_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_profile_arn is not None:
            pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "allow_buckets")

    @allow_buckets.setter
    def allow_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_buckets", value)

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "arm64_enabled")

    @arm64_enabled.setter
    def arm64_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "arm64_enabled", value)

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ebs_boot_size")

    @ebs_boot_size.setter
    def ebs_boot_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_boot_size", value)

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ec2_key_pair")

    @ec2_key_pair.setter
    def ec2_key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ec2_key_pair", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "gpu_enabled")

    @gpu_enabled.setter
    def gpu_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gpu_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "instance_profile_arn")

    @instance_profile_arn.setter
    def instance_profile_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_profile_arn", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAzureBatchArgsDict(TypedDict):
        auto_pool_mode: NotRequired[pulumi.Input[_builtins.bool]]
        delete_jobs_on_completion: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]
        """
        delete_pools_on_completion: NotRequired[pulumi.Input[_builtins.bool]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        forge: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchForgeArgsDict']]
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        head_pool: NotRequired[pulumi.Input[_builtins.str]]
        managed_identity_client_id: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        token_duration: NotRequired[pulumi.Input[_builtins.str]]
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigAzureBatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAzureBatchArgs:
    def __init__(__self__, *,
                 auto_pool_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_jobs_on_completion: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_pools_on_completion: Optional[pulumi.Input[_builtins.bool]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs']]]] = None,
                 forge: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchForgeArgs']] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_identity_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 token_duration: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] delete_jobs_on_completion: must be one of ["on_success", "always", "never"]
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if auto_pool_mode is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""auto_pool_mode is deprecated: Deprecated""")
        if auto_pool_mode is not None:
            pulumi.set(__self__, "auto_pool_mode", auto_pool_mode)
        if delete_jobs_on_completion is not None:
            pulumi.set(__self__, "delete_jobs_on_completion", delete_jobs_on_completion)
        if delete_pools_on_completion is not None:
            pulumi.set(__self__, "delete_pools_on_completion", delete_pools_on_completion)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_pool is not None:
            pulumi.set(__self__, "head_pool", head_pool)
        if managed_identity_client_id is not None:
            pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if token_duration is not None:
            pulumi.set(__self__, "token_duration", token_duration)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="autoPoolMode")
    @_utilities.deprecated("""Deprecated""")
    def auto_pool_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "auto_pool_mode")

    @auto_pool_mode.setter
    def auto_pool_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_pool_mode", value)

    @_builtins.property
    @pulumi.getter(name="deleteJobsOnCompletion")
    def delete_jobs_on_completion(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "delete_jobs_on_completion")

    @delete_jobs_on_completion.setter
    def delete_jobs_on_completion(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_jobs_on_completion", value)

    @_builtins.property
    @pulumi.getter(name="deletePoolsOnCompletion")
    def delete_pools_on_completion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "delete_pools_on_completion")

    @delete_pools_on_completion.setter
    def delete_pools_on_completion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_pools_on_completion", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchForgeArgs']]:
        return pulumi.get(self, "forge")

    @forge.setter
    def forge(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigAzureBatchForgeArgs']]):
        pulumi.set(self, "forge", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headPool")
    def head_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_pool")

    @head_pool.setter
    def head_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pool", value)

    @_builtins.property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "managed_identity_client_id")

    @managed_identity_client_id.setter
    def managed_identity_client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_identity_client_id", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tokenDuration")
    def token_duration(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "token_duration")

    @token_duration.setter
    def token_duration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token_duration", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigAzureBatchForgeArgsDict(TypedDict):
        auto_scale: NotRequired[pulumi.Input[_builtins.bool]]
        container_reg_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        dispose_on_deletion: NotRequired[pulumi.Input[_builtins.bool]]
        vm_count: NotRequired[pulumi.Input[_builtins.float]]
        vm_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigAzureBatchForgeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigAzureBatchForgeArgs:
    def __init__(__self__, *,
                 auto_scale: Optional[pulumi.Input[_builtins.bool]] = None,
                 container_reg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dispose_on_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
                 vm_count: Optional[pulumi.Input[_builtins.float]] = None,
                 vm_type: Optional[pulumi.Input[_builtins.str]] = None):
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if container_reg_ids is not None:
            pulumi.set(__self__, "container_reg_ids", container_reg_ids)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "auto_scale")

    @auto_scale.setter
    def auto_scale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_scale", value)

    @_builtins.property
    @pulumi.getter(name="containerRegIds")
    def container_reg_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "container_reg_ids")

    @container_reg_ids.setter
    def container_reg_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "container_reg_ids", value)

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "dispose_on_deletion")

    @dispose_on_deletion.setter
    def dispose_on_deletion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dispose_on_deletion", value)

    @_builtins.property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "vm_count")

    @vm_count.setter
    def vm_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vm_count", value)

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_type", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigEksPlatformArgsDict(TypedDict):
        cluster_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The AWS EKS cluster name
        """
        compute_service_account: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        head_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        head_service_account: NotRequired[pulumi.Input[_builtins.str]]
        namespace: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        pod_cleanup: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        AWS region
        """
        server: NotRequired[pulumi.Input[_builtins.str]]
        service_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        ssl_cert: NotRequired[pulumi.Input[_builtins.str]]
        storage_claim_name: NotRequired[pulumi.Input[_builtins.str]]
        storage_mount_path: NotRequired[pulumi.Input[_builtins.str]]
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigEksPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigEksPlatformArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 head_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_cleanup: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[_builtins.str]] = None,
                 service_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_claim_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mount_path: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_name: The AWS EKS cluster name
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] pod_cleanup: must be one of ["on_success", "always", "never"]
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] region: AWS region
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AWS EKS cluster name
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_service_account")

    @compute_service_account.setter
    def compute_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_service_account", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_pod_spec")

    @head_pod_spec.setter
    def head_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_service_account")

    @head_service_account.setter
    def head_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_service_account", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "pod_cleanup")

    @pod_cleanup.setter
    def pod_cleanup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_cleanup", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_pod_spec")

    @service_pod_spec.setter
    def service_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_cert", value)

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_claim_name")

    @storage_claim_name.setter
    def storage_claim_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_claim_name", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_mount_path")

    @storage_mount_path.setter
    def storage_mount_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_path", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigGkePlatformArgsDict(TypedDict):
        cluster_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The GKE cluster name
        """
        compute_service_account: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        head_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        head_service_account: NotRequired[pulumi.Input[_builtins.str]]
        namespace: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        pod_cleanup: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        The GKE cluster region - or - zone
        """
        server: NotRequired[pulumi.Input[_builtins.str]]
        service_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        ssl_cert: NotRequired[pulumi.Input[_builtins.str]]
        storage_claim_name: NotRequired[pulumi.Input[_builtins.str]]
        storage_mount_path: NotRequired[pulumi.Input[_builtins.str]]
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigGkePlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigGkePlatformArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 head_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_cleanup: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[_builtins.str]] = None,
                 service_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_claim_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mount_path: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_name: The GKE cluster name
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] pod_cleanup: must be one of ["on_success", "always", "never"]
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] region: The GKE cluster region - or - zone
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GKE cluster name
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_service_account")

    @compute_service_account.setter
    def compute_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_service_account", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_pod_spec")

    @head_pod_spec.setter
    def head_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_service_account")

    @head_service_account.setter
    def head_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_service_account", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "pod_cleanup")

    @pod_cleanup.setter
    def pod_cleanup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_cleanup", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GKE cluster region - or - zone
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_pod_spec")

    @service_pod_spec.setter
    def service_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_cert", value)

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_claim_name")

    @storage_claim_name.setter
    def storage_claim_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_claim_name", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_mount_path")

    @storage_mount_path.setter
    def storage_mount_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_path", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigGoogleBatchArgsDict(TypedDict):
        boot_disk_size_gb: NotRequired[pulumi.Input[_builtins.float]]
        compute_jobs_instance_template: NotRequired[pulumi.Input[_builtins.str]]
        copy_image: NotRequired[pulumi.Input[_builtins.str]]
        cpu_platform: NotRequired[pulumi.Input[_builtins.str]]
        debug_mode: NotRequired[pulumi.Input[_builtins.float]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_instance_template: NotRequired[pulumi.Input[_builtins.str]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        location: NotRequired[pulumi.Input[_builtins.str]]
        machine_type: NotRequired[pulumi.Input[_builtins.str]]
        network: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        nfs_mount: NotRequired[pulumi.Input[_builtins.str]]
        nfs_target: NotRequired[pulumi.Input[_builtins.str]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        service_account: NotRequired[pulumi.Input[_builtins.str]]
        spot: NotRequired[pulumi.Input[_builtins.bool]]
        ssh_daemon: NotRequired[pulumi.Input[_builtins.bool]]
        ssh_image: NotRequired[pulumi.Input[_builtins.str]]
        subnetwork: NotRequired[pulumi.Input[_builtins.str]]
        use_private_address: NotRequired[pulumi.Input[_builtins.bool]]
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigGoogleBatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigGoogleBatchArgs:
    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[pulumi.Input[_builtins.float]] = None,
                 compute_jobs_instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 copy_image: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_platform: Optional[pulumi.Input[_builtins.str]] = None,
                 debug_mode: Optional[pulumi.Input[_builtins.float]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_target: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 spot: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_daemon: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_image: Optional[pulumi.Input[_builtins.str]] = None,
                 subnetwork: Optional[pulumi.Input[_builtins.str]] = None,
                 use_private_address: Optional[pulumi.Input[_builtins.bool]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if compute_jobs_instance_template is not None:
            pulumi.set(__self__, "compute_jobs_instance_template", compute_jobs_instance_template)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if cpu_platform is not None:
            pulumi.set(__self__, "cpu_platform", cpu_platform)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_instance_template is not None:
            pulumi.set(__self__, "head_job_instance_template", head_job_instance_template)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if spot is not None:
            pulumi.set(__self__, "spot", spot)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "boot_disk_size_gb")

    @boot_disk_size_gb.setter
    def boot_disk_size_gb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "boot_disk_size_gb", value)

    @_builtins.property
    @pulumi.getter(name="computeJobsInstanceTemplate")
    def compute_jobs_instance_template(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_jobs_instance_template")

    @compute_jobs_instance_template.setter
    def compute_jobs_instance_template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_jobs_instance_template", value)

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "copy_image")

    @copy_image.setter
    def copy_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "copy_image", value)

    @_builtins.property
    @pulumi.getter(name="cpuPlatform")
    def cpu_platform(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cpu_platform")

    @cpu_platform.setter
    def cpu_platform(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpu_platform", value)

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "debug_mode")

    @debug_mode.setter
    def debug_mode(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "debug_mode", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobInstanceTemplate")
    def head_job_instance_template(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_instance_template")

    @head_job_instance_template.setter
    def head_job_instance_template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_instance_template", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nfs_mount")

    @nfs_mount.setter
    def nfs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_mount", value)

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nfs_target")

    @nfs_target.setter
    def nfs_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_target", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account", value)

    @_builtins.property
    @pulumi.getter
    def spot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "spot")

    @spot.setter
    def spot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "spot", value)

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ssh_daemon")

    @ssh_daemon.setter
    def ssh_daemon(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssh_daemon", value)

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssh_image")

    @ssh_image.setter
    def ssh_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_image", value)

    @_builtins.property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnetwork", value)

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "use_private_address")

    @use_private_address.setter
    def use_private_address(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_private_address", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigGoogleLifesciencesArgsDict(TypedDict):
        boot_disk_size_gb: NotRequired[pulumi.Input[_builtins.float]]
        copy_image: NotRequired[pulumi.Input[_builtins.str]]
        debug_mode: NotRequired[pulumi.Input[_builtins.float]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        location: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        nfs_mount: NotRequired[pulumi.Input[_builtins.str]]
        nfs_target: NotRequired[pulumi.Input[_builtins.str]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        preemptible: NotRequired[pulumi.Input[_builtins.bool]]
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        region: NotRequired[pulumi.Input[_builtins.str]]
        ssh_daemon: NotRequired[pulumi.Input[_builtins.bool]]
        ssh_image: NotRequired[pulumi.Input[_builtins.str]]
        use_private_address: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
        zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    ActionLaunchComputeEnvConfigGoogleLifesciencesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigGoogleLifesciencesArgs:
    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[pulumi.Input[_builtins.float]] = None,
                 copy_image: Optional[pulumi.Input[_builtins.str]] = None,
                 debug_mode: Optional[pulumi.Input[_builtins.float]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_target: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 preemptible: Optional[pulumi.Input[_builtins.bool]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_daemon: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_image: Optional[pulumi.Input[_builtins.str]] = None,
                 use_private_address: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "boot_disk_size_gb")

    @boot_disk_size_gb.setter
    def boot_disk_size_gb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "boot_disk_size_gb", value)

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "copy_image")

    @copy_image.setter
    def copy_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "copy_image", value)

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "debug_mode")

    @debug_mode.setter
    def debug_mode(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "debug_mode", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nfs_mount")

    @nfs_mount.setter
    def nfs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_mount", value)

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nfs_target")

    @nfs_target.setter
    def nfs_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_target", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "preemptible")

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "preemptible", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ssh_daemon")

    @ssh_daemon.setter
    def ssh_daemon(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssh_daemon", value)

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssh_image")

    @ssh_image.setter
    def ssh_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_image", value)

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "use_private_address")

    @use_private_address.setter
    def use_private_address(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_private_address", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "zones", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigK8sPlatformArgsDict(TypedDict):
        compute_service_account: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        head_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        head_service_account: NotRequired[pulumi.Input[_builtins.str]]
        namespace: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        pod_cleanup: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        server: NotRequired[pulumi.Input[_builtins.str]]
        service_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        ssl_cert: NotRequired[pulumi.Input[_builtins.str]]
        storage_claim_name: NotRequired[pulumi.Input[_builtins.str]]
        storage_mount_path: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigK8sPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigK8sPlatformArgs:
    def __init__(__self__, *,
                 compute_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs']]]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 head_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_cleanup: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[_builtins.str]] = None,
                 service_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_claim_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mount_path: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] pod_cleanup: must be one of ["on_success", "always", "never"]
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_service_account")

    @compute_service_account.setter
    def compute_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_service_account", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_pod_spec")

    @head_pod_spec.setter
    def head_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_service_account")

    @head_service_account.setter
    def head_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_service_account", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "pod_cleanup")

    @pod_cleanup.setter
    def pod_cleanup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_cleanup", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_pod_spec")

    @service_pod_spec.setter
    def service_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_cert", value)

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_claim_name")

    @storage_claim_name.setter
    def storage_claim_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_claim_name", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_mount_path")

    @storage_mount_path.setter
    def storage_mount_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_path", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigLsfPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        per_job_mem_limit: NotRequired[pulumi.Input[_builtins.bool]]
        per_task_reserve: NotRequired[pulumi.Input[_builtins.bool]]
        port: NotRequired[pulumi.Input[_builtins.float]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        unit_for_limits: NotRequired[pulumi.Input[_builtins.str]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigLsfPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigLsfPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 per_job_mem_limit: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_task_reserve: Optional[pulumi.Input[_builtins.bool]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 unit_for_limits: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if per_job_mem_limit is not None:
            pulumi.set(__self__, "per_job_mem_limit", per_job_mem_limit)
        if per_task_reserve is not None:
            pulumi.set(__self__, "per_task_reserve", per_task_reserve)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if unit_for_limits is not None:
            pulumi.set(__self__, "unit_for_limits", unit_for_limits)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="perJobMemLimit")
    def per_job_mem_limit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "per_job_mem_limit")

    @per_job_mem_limit.setter
    def per_job_mem_limit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_job_mem_limit", value)

    @_builtins.property
    @pulumi.getter(name="perTaskReserve")
    def per_task_reserve(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "per_task_reserve")

    @per_task_reserve.setter
    def per_task_reserve(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_task_reserve", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="unitForLimits")
    def unit_for_limits(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "unit_for_limits")

    @unit_for_limits.setter
    def unit_for_limits(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit_for_limits", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigMoabPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigMoabPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigMoabPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigSeqeracomputePlatformArgsDict(TypedDict):
        cli_path: NotRequired[pulumi.Input[_builtins.str]]
        compute_job_role: NotRequired[pulumi.Input[_builtins.str]]
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        dragen_queue: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        execution_role: NotRequired[pulumi.Input[_builtins.str]]
        forge: NotRequired[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgsDict']]
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        fusion_snapshots: NotRequired[pulumi.Input[_builtins.bool]]
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        head_job_role: NotRequired[pulumi.Input[_builtins.str]]
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        log_group: NotRequired[pulumi.Input[_builtins.str]]
        lustre_id: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        nvnme_storage_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        storage_type: NotRequired[pulumi.Input[_builtins.str]]
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigSeqeracomputePlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigSeqeracomputePlatformArgs:
    def __init__(__self__, *,
                 cli_path: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]]] = None,
                 execution_role: Optional[pulumi.Input[_builtins.str]] = None,
                 forge: Optional[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgs']] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fusion_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group: Optional[pulumi.Input[_builtins.str]] = None,
                 lustre_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nvnme_storage_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""lustre_id is deprecated: Deprecated""")
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""storage_type is deprecated: Deprecated""")
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cli_path")

    @cli_path.setter
    def cli_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cli_path", value)

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_job_role")

    @compute_job_role.setter
    def compute_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_job_role", value)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_queue")

    @dragen_queue.setter
    def dragen_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execution_role", value)

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgs']]:
        return pulumi.get(self, "forge")

    @forge.setter
    def forge(self, value: Optional[pulumi.Input['ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgs']]):
        pulumi.set(self, "forge", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion_snapshots")

    @fusion_snapshots.setter
    def fusion_snapshots(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_snapshots", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_role")

    @head_job_role.setter
    def head_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_role", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group", value)

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lustre_id")

    @lustre_id.setter
    def lustre_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lustre_id", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "nvnme_storage_enabled")

    @nvnme_storage_enabled.setter
    def nvnme_storage_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nvnme_storage_enabled", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volumes", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgsDict(TypedDict):
        alloc_strategy: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        """
        allow_buckets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        arm64_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        bid_percentage: NotRequired[pulumi.Input[_builtins.float]]
        dispose_on_deletion: NotRequired[pulumi.Input[_builtins.bool]]
        dragen_ami_id: NotRequired[pulumi.Input[_builtins.str]]
        dragen_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        ebs_auto_scale: NotRequired[pulumi.Input[_builtins.bool]]
        ebs_block_size: NotRequired[pulumi.Input[_builtins.float]]
        ebs_boot_size: NotRequired[pulumi.Input[_builtins.float]]
        ec2_key_pair: NotRequired[pulumi.Input[_builtins.str]]
        ecs_config: NotRequired[pulumi.Input[_builtins.str]]
        efs_create: NotRequired[pulumi.Input[_builtins.bool]]
        efs_id: NotRequired[pulumi.Input[_builtins.str]]
        efs_mount: NotRequired[pulumi.Input[_builtins.str]]
        fargate_head_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        fsx_mount: NotRequired[pulumi.Input[_builtins.str]]
        fsx_name: NotRequired[pulumi.Input[_builtins.str]]
        fsx_size: NotRequired[pulumi.Input[_builtins.float]]
        fusion_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        gpu_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        image_id: NotRequired[pulumi.Input[_builtins.str]]
        instance_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        max_cpus: NotRequired[pulumi.Input[_builtins.float]]
        min_cpus: NotRequired[pulumi.Input[_builtins.float]]
        security_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["SPOT", "EC2"]
        """
        vpc_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigSeqeracomputePlatformForgeArgs:
    def __init__(__self__, *,
                 alloc_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 arm64_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 bid_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 dispose_on_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_ami_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ebs_auto_scale: Optional[pulumi.Input[_builtins.bool]] = None,
                 ebs_block_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ebs_boot_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ec2_key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 ecs_config: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 efs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fargate_head_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fsx_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_name: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_size: Optional[pulumi.Input[_builtins.float]] = None,
                 fusion_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 gpu_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 min_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        :param pulumi.Input[_builtins.str] type: must be one of ["SPOT", "EC2"]
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        """
        return pulumi.get(self, "alloc_strategy")

    @alloc_strategy.setter
    def alloc_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alloc_strategy", value)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "allow_buckets")

    @allow_buckets.setter
    def allow_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_buckets", value)

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "arm64_enabled")

    @arm64_enabled.setter
    def arm64_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "arm64_enabled", value)

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "bid_percentage")

    @bid_percentage.setter
    def bid_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bid_percentage", value)

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "dispose_on_deletion")

    @dispose_on_deletion.setter
    def dispose_on_deletion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dispose_on_deletion", value)

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_ami_id")

    @dragen_ami_id.setter
    def dragen_ami_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_ami_id", value)

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "dragen_enabled")

    @dragen_enabled.setter
    def dragen_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dragen_enabled", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ebs_auto_scale")

    @ebs_auto_scale.setter
    def ebs_auto_scale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ebs_auto_scale", value)

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ebs_block_size")

    @ebs_block_size.setter
    def ebs_block_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_block_size", value)

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ebs_boot_size")

    @ebs_boot_size.setter
    def ebs_boot_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_boot_size", value)

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ec2_key_pair")

    @ec2_key_pair.setter
    def ec2_key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ec2_key_pair", value)

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ecs_config")

    @ecs_config.setter
    def ecs_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ecs_config", value)

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "efs_create")

    @efs_create.setter
    def efs_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "efs_create", value)

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "efs_id")

    @efs_id.setter
    def efs_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_id", value)

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "efs_mount")

    @efs_mount.setter
    def efs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_mount", value)

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fargate_head_enabled")

    @fargate_head_enabled.setter
    def fargate_head_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fargate_head_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "fsx_mount")

    @fsx_mount.setter
    def fsx_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_mount", value)

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "fsx_name")

    @fsx_name.setter
    def fsx_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_name", value)

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "fsx_size")

    @fsx_size.setter
    def fsx_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "fsx_size", value)

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fusion_enabled")

    @fusion_enabled.setter
    def fusion_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_enabled", value)

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "gpu_enabled")

    @gpu_enabled.setter
    def gpu_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gpu_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_types", value)

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "max_cpus")

    @max_cpus.setter
    def max_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_cpus", value)

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "min_cpus")

    @min_cpus.setter
    def min_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_cpus", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["SPOT", "EC2"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigSlurmPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigSlurmPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigSlurmPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigUgePlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution
        """
elif False:
    ActionLaunchComputeEnvConfigUgePlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigUgePlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        head: NotRequired[pulumi.Input[_builtins.bool]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvArgsDict(TypedDict):
        config: pulumi.Input['ComputeEnvComputeEnvConfigArgsDict']
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        Requires replacement if changed.
        """
        credentials_id: pulumi.Input[_builtins.str]
        """
        Requires replacement if changed.
        """
        name: pulumi.Input[_builtins.str]
        """
        Requires replacement if changed.
        """
        platform: pulumi.Input[_builtins.str]
        """
        must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]; Requires replacement if changed.
        """
        compute_env_id: NotRequired[pulumi.Input[_builtins.str]]
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        deleted: NotRequired[pulumi.Input[_builtins.bool]]
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvLabelArgsDict']]]]
        last_updated: NotRequired[pulumi.Input[_builtins.str]]
        last_used: NotRequired[pulumi.Input[_builtins.str]]
        managed_identity_id: NotRequired[pulumi.Input[_builtins.str]]
        message: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        org_id: NotRequired[pulumi.Input[_builtins.float]]
        primary: NotRequired[pulumi.Input[_builtins.bool]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        workspace_id: NotRequired[pulumi.Input[_builtins.float]]
elif False:
    ComputeEnvComputeEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvArgs:
    def __init__(__self__, *,
                 config: pulumi.Input['ComputeEnvComputeEnvConfigArgs'],
                 credentials_id: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 platform: pulumi.Input[_builtins.str],
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvLabelArgs']]]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 last_used: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 primary: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        :param pulumi.Input['ComputeEnvComputeEnvConfigArgs'] config: Configuration settings for compute environments including work directories,
               pre/post run scripts, and environment-specific parameters.
               Requires replacement if changed.
        :param pulumi.Input[_builtins.str] credentials_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] platform: must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] description: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] message: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] status: must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        if compute_env_id is not None:
            pulumi.set(__self__, "compute_env_id", compute_env_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if managed_identity_id is not None:
            pulumi.set(__self__, "managed_identity_id", managed_identity_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Input['ComputeEnvComputeEnvConfigArgs']:
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        Requires replacement if changed.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input['ComputeEnvComputeEnvConfigArgs']):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "credentials_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def platform(self) -> pulumi.Input[_builtins.str]:
        """
        must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]; Requires replacement if changed.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "platform", value)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "deleted")

    @deleted.setter
    def deleted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deleted", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_used")

    @last_used.setter
    def last_used(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_used", value)

    @_builtins.property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "managed_identity_id")

    @managed_identity_id.setter
    def managed_identity_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_identity_id", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "primary", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigArgsDict(TypedDict):
        altair_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        aws_batch: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchArgsDict']]
        """
        Requires replacement if changed.
        """
        aws_cloud: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudArgsDict']]
        """
        Requires replacement if changed.
        """
        azure_batch: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchArgsDict']]
        """
        Requires replacement if changed.
        """
        eks_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        gke_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        google_batch: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchArgsDict']]
        """
        Requires replacement if changed.
        """
        google_lifesciences: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesArgsDict']]
        """
        Requires replacement if changed.
        """
        k8s_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        lsf_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        moab_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        seqeracompute_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        slurm_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformArgsDict']]
        """
        Requires replacement if changed.
        """
        uge_platform: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformArgsDict']]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigArgs:
    def __init__(__self__, *,
                 altair_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformArgs']] = None,
                 aws_batch: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchArgs']] = None,
                 aws_cloud: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudArgs']] = None,
                 azure_batch: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchArgs']] = None,
                 eks_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformArgs']] = None,
                 gke_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformArgs']] = None,
                 google_batch: Optional[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchArgs']] = None,
                 google_lifesciences: Optional[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesArgs']] = None,
                 k8s_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformArgs']] = None,
                 lsf_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformArgs']] = None,
                 moab_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformArgs']] = None,
                 seqeracompute_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformArgs']] = None,
                 slurm_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformArgs']] = None,
                 uge_platform: Optional[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformArgs']] = None):
        """
        :param pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformArgs'] altair_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchArgs'] aws_batch: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudArgs'] aws_cloud: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchArgs'] azure_batch: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformArgs'] eks_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformArgs'] gke_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchArgs'] google_batch: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesArgs'] google_lifesciences: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformArgs'] k8s_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformArgs'] lsf_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformArgs'] moab_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformArgs'] seqeracompute_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformArgs'] slurm_platform: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformArgs'] uge_platform: Requires replacement if changed.
        """
        if altair_platform is not None:
            pulumi.set(__self__, "altair_platform", altair_platform)
        if aws_batch is not None:
            pulumi.set(__self__, "aws_batch", aws_batch)
        if aws_cloud is not None:
            pulumi.set(__self__, "aws_cloud", aws_cloud)
        if azure_batch is not None:
            pulumi.set(__self__, "azure_batch", azure_batch)
        if eks_platform is not None:
            pulumi.set(__self__, "eks_platform", eks_platform)
        if gke_platform is not None:
            pulumi.set(__self__, "gke_platform", gke_platform)
        if google_batch is not None:
            pulumi.set(__self__, "google_batch", google_batch)
        if google_lifesciences is not None:
            pulumi.set(__self__, "google_lifesciences", google_lifesciences)
        if k8s_platform is not None:
            pulumi.set(__self__, "k8s_platform", k8s_platform)
        if lsf_platform is not None:
            pulumi.set(__self__, "lsf_platform", lsf_platform)
        if moab_platform is not None:
            pulumi.set(__self__, "moab_platform", moab_platform)
        if seqeracompute_platform is not None:
            pulumi.set(__self__, "seqeracompute_platform", seqeracompute_platform)
        if slurm_platform is not None:
            pulumi.set(__self__, "slurm_platform", slurm_platform)
        if uge_platform is not None:
            pulumi.set(__self__, "uge_platform", uge_platform)

    @_builtins.property
    @pulumi.getter(name="altairPlatform")
    def altair_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "altair_platform")

    @altair_platform.setter
    def altair_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformArgs']]):
        pulumi.set(self, "altair_platform", value)

    @_builtins.property
    @pulumi.getter(name="awsBatch")
    def aws_batch(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "aws_batch")

    @aws_batch.setter
    def aws_batch(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchArgs']]):
        pulumi.set(self, "aws_batch", value)

    @_builtins.property
    @pulumi.getter(name="awsCloud")
    def aws_cloud(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "aws_cloud")

    @aws_cloud.setter
    def aws_cloud(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudArgs']]):
        pulumi.set(self, "aws_cloud", value)

    @_builtins.property
    @pulumi.getter(name="azureBatch")
    def azure_batch(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "azure_batch")

    @azure_batch.setter
    def azure_batch(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchArgs']]):
        pulumi.set(self, "azure_batch", value)

    @_builtins.property
    @pulumi.getter(name="eksPlatform")
    def eks_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "eks_platform")

    @eks_platform.setter
    def eks_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformArgs']]):
        pulumi.set(self, "eks_platform", value)

    @_builtins.property
    @pulumi.getter(name="gkePlatform")
    def gke_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gke_platform")

    @gke_platform.setter
    def gke_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformArgs']]):
        pulumi.set(self, "gke_platform", value)

    @_builtins.property
    @pulumi.getter(name="googleBatch")
    def google_batch(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "google_batch")

    @google_batch.setter
    def google_batch(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchArgs']]):
        pulumi.set(self, "google_batch", value)

    @_builtins.property
    @pulumi.getter(name="googleLifesciences")
    def google_lifesciences(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "google_lifesciences")

    @google_lifesciences.setter
    def google_lifesciences(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesArgs']]):
        pulumi.set(self, "google_lifesciences", value)

    @_builtins.property
    @pulumi.getter(name="k8sPlatform")
    def k8s_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "k8s_platform")

    @k8s_platform.setter
    def k8s_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformArgs']]):
        pulumi.set(self, "k8s_platform", value)

    @_builtins.property
    @pulumi.getter(name="lsfPlatform")
    def lsf_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lsf_platform")

    @lsf_platform.setter
    def lsf_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformArgs']]):
        pulumi.set(self, "lsf_platform", value)

    @_builtins.property
    @pulumi.getter(name="moabPlatform")
    def moab_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "moab_platform")

    @moab_platform.setter
    def moab_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformArgs']]):
        pulumi.set(self, "moab_platform", value)

    @_builtins.property
    @pulumi.getter(name="seqeracomputePlatform")
    def seqeracompute_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "seqeracompute_platform")

    @seqeracompute_platform.setter
    def seqeracompute_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformArgs']]):
        pulumi.set(self, "seqeracompute_platform", value)

    @_builtins.property
    @pulumi.getter(name="slurmPlatform")
    def slurm_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "slurm_platform")

    @slurm_platform.setter
    def slurm_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformArgs']]):
        pulumi.set(self, "slurm_platform", value)

    @_builtins.property
    @pulumi.getter(name="ugePlatform")
    def uge_platform(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "uge_platform")

    @uge_platform.setter
    def uge_platform(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformArgs']]):
        pulumi.set(self, "uge_platform", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAltairPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAltairPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAltairPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] compute_queue: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] host_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] max_queue_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.float] port: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] propagate_head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] user_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAwsBatchArgsDict(TypedDict):
        cli_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        compute_job_role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        dragen_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        execution_role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        forge: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchForgeArgsDict']]
        """
        Not Null; Requires replacement if changed.
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        fusion_snapshots: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        log_group: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        lustre_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        nvnme_storage_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAwsBatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAwsBatchArgs:
    def __init__(__self__, *,
                 cli_path: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs']]]] = None,
                 execution_role: Optional[pulumi.Input[_builtins.str]] = None,
                 forge: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchForgeArgs']] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fusion_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group: Optional[pulumi.Input[_builtins.str]] = None,
                 lustre_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nvnme_storage_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cli_path: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_job_role: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_instance_type: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_queue: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] execution_role: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchForgeArgs'] forge: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion2_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion_snapshots: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_role: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] log_group: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] lustre_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] nvnme_storage_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_type: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] volumes: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] wave_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""lustre_id is deprecated: Deprecated""")
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""storage_type is deprecated: Deprecated""")
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cli_path")

    @cli_path.setter
    def cli_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cli_path", value)

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_job_role")

    @compute_job_role.setter
    def compute_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_job_role", value)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_queue")

    @dragen_queue.setter
    def dragen_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execution_role", value)

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchForgeArgs']]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "forge")

    @forge.setter
    def forge(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAwsBatchForgeArgs']]):
        pulumi.set(self, "forge", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_snapshots")

    @fusion_snapshots.setter
    def fusion_snapshots(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_snapshots", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_role")

    @head_job_role.setter
    def head_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_role", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group", value)

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lustre_id")

    @lustre_id.setter
    def lustre_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lustre_id", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nvnme_storage_enabled")

    @nvnme_storage_enabled.setter
    def nvnme_storage_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nvnme_storage_enabled", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volumes", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAwsBatchForgeArgsDict(TypedDict):
        alloc_strategy: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        """
        allow_buckets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        arm64_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        bid_percentage: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        dispose_on_deletion: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        dragen_ami_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        dragen_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ebs_auto_scale: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        ebs_block_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        ebs_boot_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        ec2_key_pair: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ecs_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        efs_create: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        efs_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        efs_mount: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        fargate_head_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        fsx_mount: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        fsx_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        fsx_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        fusion_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        gpu_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        image_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        instance_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        max_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Not Null; Requires replacement if changed.
        """
        min_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Not Null; Requires replacement if changed.
        """
        security_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        """
        vpc_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAwsBatchForgeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAwsBatchForgeArgs:
    def __init__(__self__, *,
                 alloc_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 arm64_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 bid_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 dispose_on_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_ami_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ebs_auto_scale: Optional[pulumi.Input[_builtins.bool]] = None,
                 ebs_block_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ebs_boot_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ec2_key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 ecs_config: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 efs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fargate_head_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fsx_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_name: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_size: Optional[pulumi.Input[_builtins.float]] = None,
                 fusion_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 gpu_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 min_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allow_buckets: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] arm64_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] bid_percentage: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] dispose_on_deletion: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_ami_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] dragen_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_instance_type: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] ebs_auto_scale: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] ebs_block_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] ebs_boot_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ec2_key_pair: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ecs_config: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] efs_create: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] efs_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] efs_mount: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fargate_head_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] fsx_mount: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] fsx_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] fsx_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] gpu_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] image_id: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_types: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] max_cpus: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] min_cpus: Not Null; Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] type: Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] vpc_id: Requires replacement if changed.
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        """
        return pulumi.get(self, "alloc_strategy")

    @alloc_strategy.setter
    def alloc_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alloc_strategy", value)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "allow_buckets")

    @allow_buckets.setter
    def allow_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_buckets", value)

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "arm64_enabled")

    @arm64_enabled.setter
    def arm64_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "arm64_enabled", value)

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "bid_percentage")

    @bid_percentage.setter
    def bid_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bid_percentage", value)

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dispose_on_deletion")

    @dispose_on_deletion.setter
    def dispose_on_deletion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dispose_on_deletion", value)

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_ami_id")

    @dragen_ami_id.setter
    def dragen_ami_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_ami_id", value)

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_enabled")

    @dragen_enabled.setter
    def dragen_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dragen_enabled", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_auto_scale")

    @ebs_auto_scale.setter
    def ebs_auto_scale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ebs_auto_scale", value)

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_block_size")

    @ebs_block_size.setter
    def ebs_block_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_block_size", value)

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_boot_size")

    @ebs_boot_size.setter
    def ebs_boot_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_boot_size", value)

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ec2_key_pair")

    @ec2_key_pair.setter
    def ec2_key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ec2_key_pair", value)

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ecs_config")

    @ecs_config.setter
    def ecs_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ecs_config", value)

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_create")

    @efs_create.setter
    def efs_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "efs_create", value)

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_id")

    @efs_id.setter
    def efs_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_id", value)

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_mount")

    @efs_mount.setter
    def efs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_mount", value)

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fargate_head_enabled")

    @fargate_head_enabled.setter
    def fargate_head_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fargate_head_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_mount")

    @fsx_mount.setter
    def fsx_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_mount", value)

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_name")

    @fsx_name.setter
    def fsx_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_name", value)

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_size")

    @fsx_size.setter
    def fsx_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "fsx_size", value)

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_enabled")

    @fusion_enabled.setter
    def fusion_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_enabled", value)

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu_enabled")

    @gpu_enabled.setter
    def gpu_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gpu_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_types", value)

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "max_cpus")

    @max_cpus.setter
    def max_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_cpus", value)

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "min_cpus")

    @min_cpus.setter
    def min_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_cpus", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAwsCloudArgsDict(TypedDict):
        allow_buckets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        arm64_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        ebs_boot_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        ec2_key_pair: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        gpu_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        image_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        instance_profile_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        instance_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        log_group: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        security_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        subnet_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAwsCloudArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAwsCloudArgs:
    def __init__(__self__, *,
                 allow_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 arm64_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ebs_boot_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ec2_key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 gpu_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_profile_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allow_buckets: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] arm64_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] ebs_boot_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ec2_key_pair: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion2_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] gpu_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] image_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] instance_profile_arn: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] instance_type: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] log_group: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: Not Null; Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] subnet_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] wave_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_profile_arn is not None:
            pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "allow_buckets")

    @allow_buckets.setter
    def allow_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_buckets", value)

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "arm64_enabled")

    @arm64_enabled.setter
    def arm64_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "arm64_enabled", value)

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_boot_size")

    @ebs_boot_size.setter
    def ebs_boot_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_boot_size", value)

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ec2_key_pair")

    @ec2_key_pair.setter
    def ec2_key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ec2_key_pair", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu_enabled")

    @gpu_enabled.setter
    def gpu_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gpu_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_profile_arn")

    @instance_profile_arn.setter
    def instance_profile_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_profile_arn", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAzureBatchArgsDict(TypedDict):
        auto_pool_mode: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        delete_jobs_on_completion: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        delete_pools_on_completion: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        forge: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchForgeArgsDict']]
        """
        Not Null; Requires replacement if changed.
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head_pool: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        managed_identity_client_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        token_duration: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAzureBatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAzureBatchArgs:
    def __init__(__self__, *,
                 auto_pool_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_jobs_on_completion: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_pools_on_completion: Optional[pulumi.Input[_builtins.bool]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs']]]] = None,
                 forge: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchForgeArgs']] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_identity_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 token_duration: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] auto_pool_mode: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] delete_jobs_on_completion: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] delete_pools_on_completion: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchForgeArgs'] forge: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion2_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_pool: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] managed_identity_client_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] token_duration: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] wave_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if auto_pool_mode is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""auto_pool_mode is deprecated: Deprecated""")
        if auto_pool_mode is not None:
            pulumi.set(__self__, "auto_pool_mode", auto_pool_mode)
        if delete_jobs_on_completion is not None:
            pulumi.set(__self__, "delete_jobs_on_completion", delete_jobs_on_completion)
        if delete_pools_on_completion is not None:
            pulumi.set(__self__, "delete_pools_on_completion", delete_pools_on_completion)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_pool is not None:
            pulumi.set(__self__, "head_pool", head_pool)
        if managed_identity_client_id is not None:
            pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if token_duration is not None:
            pulumi.set(__self__, "token_duration", token_duration)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="autoPoolMode")
    @_utilities.deprecated("""Deprecated""")
    def auto_pool_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "auto_pool_mode")

    @auto_pool_mode.setter
    def auto_pool_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_pool_mode", value)

    @_builtins.property
    @pulumi.getter(name="deleteJobsOnCompletion")
    def delete_jobs_on_completion(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "delete_jobs_on_completion")

    @delete_jobs_on_completion.setter
    def delete_jobs_on_completion(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_jobs_on_completion", value)

    @_builtins.property
    @pulumi.getter(name="deletePoolsOnCompletion")
    def delete_pools_on_completion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "delete_pools_on_completion")

    @delete_pools_on_completion.setter
    def delete_pools_on_completion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_pools_on_completion", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchForgeArgs']]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "forge")

    @forge.setter
    def forge(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigAzureBatchForgeArgs']]):
        pulumi.set(self, "forge", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headPool")
    def head_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pool")

    @head_pool.setter
    def head_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pool", value)

    @_builtins.property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "managed_identity_client_id")

    @managed_identity_client_id.setter
    def managed_identity_client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_identity_client_id", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="tokenDuration")
    def token_duration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "token_duration")

    @token_duration.setter
    def token_duration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token_duration", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigAzureBatchForgeArgsDict(TypedDict):
        auto_scale: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        container_reg_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        dispose_on_deletion: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        vm_count: NotRequired[pulumi.Input[_builtins.float]]
        """
        Not Null; Requires replacement if changed.
        """
        vm_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigAzureBatchForgeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigAzureBatchForgeArgs:
    def __init__(__self__, *,
                 auto_scale: Optional[pulumi.Input[_builtins.bool]] = None,
                 container_reg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dispose_on_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
                 vm_count: Optional[pulumi.Input[_builtins.float]] = None,
                 vm_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] auto_scale: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] container_reg_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] dispose_on_deletion: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] vm_count: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] vm_type: Requires replacement if changed.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if container_reg_ids is not None:
            pulumi.set(__self__, "container_reg_ids", container_reg_ids)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "auto_scale")

    @auto_scale.setter
    def auto_scale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_scale", value)

    @_builtins.property
    @pulumi.getter(name="containerRegIds")
    def container_reg_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "container_reg_ids")

    @container_reg_ids.setter
    def container_reg_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "container_reg_ids", value)

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dispose_on_deletion")

    @dispose_on_deletion.setter
    def dispose_on_deletion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dispose_on_deletion", value)

    @_builtins.property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "vm_count")

    @vm_count.setter
    def vm_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vm_count", value)

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_type", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigEksPlatformArgsDict(TypedDict):
        cluster_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The AWS EKS cluster name. Not Null; Requires replacement if changed.
        """
        compute_service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        namespace: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        pod_cleanup: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        AWS region. Not Null; Requires replacement if changed.
        """
        server: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        service_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ssl_cert: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_claim_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_mount_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigEksPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigEksPlatformArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 head_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_cleanup: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[_builtins.str]] = None,
                 service_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_claim_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mount_path: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_name: The AWS EKS cluster name. Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_service_account: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion2_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_pod_spec: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_service_account: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] namespace: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pod_cleanup: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: AWS region. Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] server: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] service_pod_spec: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ssl_cert: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_claim_name: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_mount_path: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] wave_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AWS EKS cluster name. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_service_account")

    @compute_service_account.setter
    def compute_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_service_account", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pod_spec")

    @head_pod_spec.setter
    def head_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "head_service_account")

    @head_service_account.setter
    def head_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_service_account", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "pod_cleanup")

    @pod_cleanup.setter
    def pod_cleanup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_cleanup", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS region. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_pod_spec")

    @service_pod_spec.setter
    def service_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_cert", value)

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "storage_claim_name")

    @storage_claim_name.setter
    def storage_claim_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_claim_name", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_mount_path")

    @storage_mount_path.setter
    def storage_mount_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_path", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigGkePlatformArgsDict(TypedDict):
        cluster_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The GKE cluster name. Not Null; Requires replacement if changed.
        """
        compute_service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        namespace: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        pod_cleanup: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        The GKE cluster region - or - zone. Not Null; Requires replacement if changed.
        """
        server: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        service_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ssl_cert: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_claim_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_mount_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigGkePlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigGkePlatformArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 head_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_cleanup: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[_builtins.str]] = None,
                 service_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_claim_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mount_path: Optional[pulumi.Input[_builtins.str]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster_name: The GKE cluster name. Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_service_account: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion2_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_pod_spec: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_service_account: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] namespace: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pod_cleanup: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: The GKE cluster region - or - zone. Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] server: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] service_pod_spec: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ssl_cert: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_claim_name: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_mount_path: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] wave_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GKE cluster name. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_service_account")

    @compute_service_account.setter
    def compute_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_service_account", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pod_spec")

    @head_pod_spec.setter
    def head_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "head_service_account")

    @head_service_account.setter
    def head_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_service_account", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "pod_cleanup")

    @pod_cleanup.setter
    def pod_cleanup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_cleanup", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GKE cluster region - or - zone. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_pod_spec")

    @service_pod_spec.setter
    def service_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_cert", value)

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "storage_claim_name")

    @storage_claim_name.setter
    def storage_claim_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_claim_name", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_mount_path")

    @storage_mount_path.setter
    def storage_mount_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_path", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigGoogleBatchArgsDict(TypedDict):
        boot_disk_size_gb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        compute_jobs_instance_template: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        copy_image: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        cpu_platform: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        debug_mode: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_instance_template: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        machine_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        network: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        nfs_mount: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nfs_target: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        spot: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        ssh_daemon: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        ssh_image: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        subnetwork: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        use_private_address: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigGoogleBatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigGoogleBatchArgs:
    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[pulumi.Input[_builtins.float]] = None,
                 compute_jobs_instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 copy_image: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_platform: Optional[pulumi.Input[_builtins.str]] = None,
                 debug_mode: Optional[pulumi.Input[_builtins.float]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs']]]] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_target: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 spot: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_daemon: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_image: Optional[pulumi.Input[_builtins.str]] = None,
                 subnetwork: Optional[pulumi.Input[_builtins.str]] = None,
                 use_private_address: Optional[pulumi.Input[_builtins.bool]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.float] boot_disk_size_gb: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_jobs_instance_template: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] copy_image: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] cpu_platform: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] debug_mode: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion2_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_instance_template: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] location: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] machine_type: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] network: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nfs_mount: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nfs_target: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] project_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] service_account: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] spot: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] ssh_daemon: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ssh_image: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] subnetwork: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] use_private_address: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] wave_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if compute_jobs_instance_template is not None:
            pulumi.set(__self__, "compute_jobs_instance_template", compute_jobs_instance_template)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if cpu_platform is not None:
            pulumi.set(__self__, "cpu_platform", cpu_platform)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_instance_template is not None:
            pulumi.set(__self__, "head_job_instance_template", head_job_instance_template)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if spot is not None:
            pulumi.set(__self__, "spot", spot)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "boot_disk_size_gb")

    @boot_disk_size_gb.setter
    def boot_disk_size_gb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "boot_disk_size_gb", value)

    @_builtins.property
    @pulumi.getter(name="computeJobsInstanceTemplate")
    def compute_jobs_instance_template(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_jobs_instance_template")

    @compute_jobs_instance_template.setter
    def compute_jobs_instance_template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_jobs_instance_template", value)

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "copy_image")

    @copy_image.setter
    def copy_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "copy_image", value)

    @_builtins.property
    @pulumi.getter(name="cpuPlatform")
    def cpu_platform(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cpu_platform")

    @cpu_platform.setter
    def cpu_platform(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpu_platform", value)

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "debug_mode")

    @debug_mode.setter
    def debug_mode(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "debug_mode", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobInstanceTemplate")
    def head_job_instance_template(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_instance_template")

    @head_job_instance_template.setter
    def head_job_instance_template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_instance_template", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_mount")

    @nfs_mount.setter
    def nfs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_mount", value)

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_target")

    @nfs_target.setter
    def nfs_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_target", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account", value)

    @_builtins.property
    @pulumi.getter
    def spot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "spot")

    @spot.setter
    def spot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "spot", value)

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_daemon")

    @ssh_daemon.setter
    def ssh_daemon(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssh_daemon", value)

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_image")

    @ssh_image.setter
    def ssh_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_image", value)

    @_builtins.property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnetwork", value)

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "use_private_address")

    @use_private_address.setter
    def use_private_address(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_private_address", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigGoogleLifesciencesArgsDict(TypedDict):
        boot_disk_size_gb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        copy_image: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        debug_mode: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        nfs_mount: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nfs_target: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        preemptible: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ssh_daemon: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        ssh_image: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        use_private_address: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigGoogleLifesciencesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigGoogleLifesciencesArgs:
    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[pulumi.Input[_builtins.float]] = None,
                 copy_image: Optional[pulumi.Input[_builtins.str]] = None,
                 debug_mode: Optional[pulumi.Input[_builtins.float]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 nfs_target: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 preemptible: Optional[pulumi.Input[_builtins.bool]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_daemon: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_image: Optional[pulumi.Input[_builtins.str]] = None,
                 use_private_address: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.float] boot_disk_size_gb: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] copy_image: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] debug_mode: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] location: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nfs_mount: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nfs_target: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] preemptible: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] project_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] ssh_daemon: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ssh_image: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] use_private_address: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] zones: Requires replacement if changed.
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "boot_disk_size_gb")

    @boot_disk_size_gb.setter
    def boot_disk_size_gb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "boot_disk_size_gb", value)

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "copy_image")

    @copy_image.setter
    def copy_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "copy_image", value)

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "debug_mode")

    @debug_mode.setter
    def debug_mode(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "debug_mode", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_mount")

    @nfs_mount.setter
    def nfs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_mount", value)

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_target")

    @nfs_target.setter
    def nfs_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nfs_target", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "preemptible")

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "preemptible", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_daemon")

    @ssh_daemon.setter
    def ssh_daemon(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssh_daemon", value)

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_image")

    @ssh_image.setter
    def ssh_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_image", value)

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "use_private_address")

    @use_private_address.setter
    def use_private_address(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_private_address", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "zones", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigK8sPlatformArgsDict(TypedDict):
        compute_service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        namespace: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        pod_cleanup: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        server: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        service_pod_spec: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ssl_cert: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_claim_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_mount_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigK8sPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigK8sPlatformArgs:
    def __init__(__self__, *,
                 compute_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs']]]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 head_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_cleanup: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[_builtins.str]] = None,
                 service_pod_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_claim_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_mount_path: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] compute_service_account: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_pod_spec: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_service_account: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] namespace: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pod_cleanup: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] server: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] service_pod_spec: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ssl_cert: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_claim_name: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_mount_path: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_service_account")

    @compute_service_account.setter
    def compute_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_service_account", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pod_spec")

    @head_pod_spec.setter
    def head_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "head_service_account")

    @head_service_account.setter
    def head_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_service_account", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "pod_cleanup")

    @pod_cleanup.setter
    def pod_cleanup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_cleanup", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_pod_spec")

    @service_pod_spec.setter
    def service_pod_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_pod_spec", value)

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_cert", value)

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "storage_claim_name")

    @storage_claim_name.setter
    def storage_claim_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_claim_name", value)

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_mount_path")

    @storage_mount_path.setter
    def storage_mount_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_mount_path", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigLsfPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        per_job_mem_limit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        per_task_reserve: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        unit_for_limits: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigLsfPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigLsfPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 per_job_mem_limit: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_task_reserve: Optional[pulumi.Input[_builtins.bool]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 unit_for_limits: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] compute_queue: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] host_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] max_queue_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] per_job_mem_limit: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] per_task_reserve: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] port: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] propagate_head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] unit_for_limits: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] user_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if per_job_mem_limit is not None:
            pulumi.set(__self__, "per_job_mem_limit", per_job_mem_limit)
        if per_task_reserve is not None:
            pulumi.set(__self__, "per_task_reserve", per_task_reserve)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if unit_for_limits is not None:
            pulumi.set(__self__, "unit_for_limits", unit_for_limits)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="perJobMemLimit")
    def per_job_mem_limit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "per_job_mem_limit")

    @per_job_mem_limit.setter
    def per_job_mem_limit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_job_mem_limit", value)

    @_builtins.property
    @pulumi.getter(name="perTaskReserve")
    def per_task_reserve(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "per_task_reserve")

    @per_task_reserve.setter
    def per_task_reserve(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_task_reserve", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="unitForLimits")
    def unit_for_limits(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "unit_for_limits")

    @unit_for_limits.setter
    def unit_for_limits(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit_for_limits", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigMoabPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigMoabPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigMoabPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] compute_queue: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] host_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] max_queue_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.float] port: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] propagate_head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] user_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigSeqeracomputePlatformArgsDict(TypedDict):
        cli_path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        compute_job_role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        dragen_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        execution_role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        forge: NotRequired[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgsDict']]
        """
        Not Null; Requires replacement if changed.
        """
        fusion2_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        fusion_snapshots: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        head_job_role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        log_group: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        lustre_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        nvnme_storage_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; Requires replacement if changed.
        """
        storage_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        wave_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigSeqeracomputePlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigSeqeracomputePlatformArgs:
    def __init__(__self__, *,
                 cli_path: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]]] = None,
                 execution_role: Optional[pulumi.Input[_builtins.str]] = None,
                 forge: Optional[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgs']] = None,
                 fusion2_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fusion_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_role: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group: Optional[pulumi.Input[_builtins.str]] = None,
                 lustre_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 nvnme_storage_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wave_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cli_path: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_job_role: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_instance_type: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_queue: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] execution_role: Requires replacement if changed.
        :param pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgs'] forge: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion2_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion_snapshots: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_role: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] log_group: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] lustre_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] nvnme_storage_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] storage_type: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] volumes: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] wave_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""lustre_id is deprecated: Deprecated""")
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""storage_type is deprecated: Deprecated""")
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cli_path")

    @cli_path.setter
    def cli_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cli_path", value)

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_job_role")

    @compute_job_role.setter
    def compute_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_job_role", value)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_queue")

    @dragen_queue.setter
    def dragen_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "execution_role", value)

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgs']]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "forge")

    @forge.setter
    def forge(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgs']]):
        pulumi.set(self, "forge", value)

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @fusion2_enabled.setter
    def fusion2_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion2_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_snapshots")

    @fusion_snapshots.setter
    def fusion_snapshots(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_snapshots", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_role")

    @head_job_role.setter
    def head_job_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_role", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_group", value)

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lustre_id")

    @lustre_id.setter
    def lustre_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lustre_id", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nvnme_storage_enabled")

    @nvnme_storage_enabled.setter
    def nvnme_storage_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nvnme_storage_enabled", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volumes", value)

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @wave_enabled.setter
    def wave_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wave_enabled", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgsDict(TypedDict):
        alloc_strategy: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        """
        allow_buckets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        arm64_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        bid_percentage: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        dispose_on_deletion: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        dragen_ami_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        dragen_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        dragen_instance_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ebs_auto_scale: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        ebs_block_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        ebs_boot_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        ec2_key_pair: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        ecs_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        efs_create: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        efs_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        efs_mount: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        fargate_head_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        fsx_mount: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        fsx_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        fsx_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        fusion_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        gpu_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        image_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        instance_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        max_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Not Null; Requires replacement if changed.
        """
        min_cpus: NotRequired[pulumi.Input[_builtins.float]]
        """
        Not Null; Requires replacement if changed.
        """
        security_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        """
        vpc_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgs:
    def __init__(__self__, *,
                 alloc_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 arm64_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 bid_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 dispose_on_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_ami_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dragen_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 dragen_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ebs_auto_scale: Optional[pulumi.Input[_builtins.bool]] = None,
                 ebs_block_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ebs_boot_size: Optional[pulumi.Input[_builtins.float]] = None,
                 ec2_key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 ecs_config: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 efs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 efs_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fargate_head_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fsx_mount: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_name: Optional[pulumi.Input[_builtins.str]] = None,
                 fsx_size: Optional[pulumi.Input[_builtins.float]] = None,
                 fusion_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 gpu_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 min_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allow_buckets: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] arm64_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] bid_percentage: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] dispose_on_deletion: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_ami_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] dragen_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] dragen_instance_type: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] ebs_auto_scale: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] ebs_block_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] ebs_boot_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ec2_key_pair: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] ecs_config: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] efs_create: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] efs_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] efs_mount: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fargate_head_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] fsx_mount: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] fsx_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] fsx_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] fusion_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] gpu_enabled: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] image_id: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] instance_types: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] max_cpus: Not Null; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] min_cpus: Not Null; Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] type: Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] vpc_id: Requires replacement if changed.
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        """
        return pulumi.get(self, "alloc_strategy")

    @alloc_strategy.setter
    def alloc_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alloc_strategy", value)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "allow_buckets")

    @allow_buckets.setter
    def allow_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_buckets", value)

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "arm64_enabled")

    @arm64_enabled.setter
    def arm64_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "arm64_enabled", value)

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "bid_percentage")

    @bid_percentage.setter
    def bid_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bid_percentage", value)

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dispose_on_deletion")

    @dispose_on_deletion.setter
    def dispose_on_deletion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dispose_on_deletion", value)

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_ami_id")

    @dragen_ami_id.setter
    def dragen_ami_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_ami_id", value)

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_enabled")

    @dragen_enabled.setter
    def dragen_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dragen_enabled", value)

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @dragen_instance_type.setter
    def dragen_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dragen_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_auto_scale")

    @ebs_auto_scale.setter
    def ebs_auto_scale(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ebs_auto_scale", value)

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_block_size")

    @ebs_block_size.setter
    def ebs_block_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_block_size", value)

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_boot_size")

    @ebs_boot_size.setter
    def ebs_boot_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ebs_boot_size", value)

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ec2_key_pair")

    @ec2_key_pair.setter
    def ec2_key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ec2_key_pair", value)

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ecs_config")

    @ecs_config.setter
    def ecs_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ecs_config", value)

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_create")

    @efs_create.setter
    def efs_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "efs_create", value)

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_id")

    @efs_id.setter
    def efs_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_id", value)

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_mount")

    @efs_mount.setter
    def efs_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efs_mount", value)

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fargate_head_enabled")

    @fargate_head_enabled.setter
    def fargate_head_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fargate_head_enabled", value)

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_mount")

    @fsx_mount.setter
    def fsx_mount(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_mount", value)

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_name")

    @fsx_name.setter
    def fsx_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fsx_name", value)

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_size")

    @fsx_size.setter
    def fsx_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "fsx_size", value)

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_enabled")

    @fusion_enabled.setter
    def fusion_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fusion_enabled", value)

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu_enabled")

    @gpu_enabled.setter
    def gpu_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gpu_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "instance_types", value)

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "max_cpus")

    @max_cpus.setter
    def max_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_cpus", value)

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "min_cpus")

    @min_cpus.setter
    def min_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_cpus", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigSlurmPlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigSlurmPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigSlurmPlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] compute_queue: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] host_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] max_queue_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.float] port: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] propagate_head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] user_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigUgePlatformArgsDict(TypedDict):
        compute_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        environments: NotRequired[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgsDict']]]]
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        head_job_options: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        head_queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        max_queue_size: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        nextflow_config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        port: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        propagate_head_job_options: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigUgePlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigUgePlatformArgs:
    def __init__(__self__, *,
                 compute_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs']]]] = None,
                 head_job_options: Optional[pulumi.Input[_builtins.str]] = None,
                 head_queue: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 max_queue_size: Optional[pulumi.Input[_builtins.float]] = None,
                 nextflow_config: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_head_job_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] compute_queue: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs']]] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] head_queue: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] host_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] max_queue_size: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param pulumi.Input[_builtins.float] port: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] propagate_head_job_options: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] user_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @compute_queue.setter
    def compute_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_queue", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs']]]]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @head_job_options.setter
    def head_job_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @head_queue.setter
    def head_queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "head_queue", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_queue_size", value)

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @nextflow_config.setter
    def nextflow_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_config", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @propagate_head_job_options.setter
    def propagate_head_job_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_head_job_options", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgsDict(TypedDict):
        compute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        head: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Requires replacement if changed.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
elif False:
    ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input[_builtins.bool]] = None,
                 head: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] compute: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] head: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compute", value)

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @head.setter
    def head(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "head", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ComputeEnvComputeEnvLabelArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the label was created
        """
        id: NotRequired[pulumi.Input[_builtins.float]]
        """
        Unique numeric identifier for the label
        """
        is_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a default system label
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name or key of the label
        """
        resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a resource-level label
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value associated with the label
        """
elif False:
    ComputeEnvComputeEnvLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeEnvComputeEnvLabelArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the label was created
        :param pulumi.Input[_builtins.float] id: Unique numeric identifier for the label
        :param pulumi.Input[_builtins.bool] is_default: Flag indicating if this is a default system label
        :param pulumi.Input[_builtins.str] name: Name or key of the label
        :param pulumi.Input[_builtins.bool] resource: Flag indicating if this is a resource-level label
        :param pulumi.Input[_builtins.str] value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class CredentialKeysArgsDict(TypedDict):
        aws: NotRequired[pulumi.Input['CredentialKeysAwsArgsDict']]
        azure: NotRequired[pulumi.Input['CredentialKeysAzureArgsDict']]
        azure_entra: NotRequired[pulumi.Input['CredentialKeysAzureEntraArgsDict']]
        azurerepos: NotRequired[pulumi.Input['CredentialKeysAzurereposArgsDict']]
        bitbucket: NotRequired[pulumi.Input['CredentialKeysBitbucketArgsDict']]
        codecommit: NotRequired[pulumi.Input['CredentialKeysCodecommitArgsDict']]
        container_reg: NotRequired[pulumi.Input['CredentialKeysContainerRegArgsDict']]
        gitea: NotRequired[pulumi.Input['CredentialKeysGiteaArgsDict']]
        github: NotRequired[pulumi.Input['CredentialKeysGithubArgsDict']]
        gitlab: NotRequired[pulumi.Input['CredentialKeysGitlabArgsDict']]
        google: NotRequired[pulumi.Input['CredentialKeysGoogleArgsDict']]
        k8s: NotRequired[pulumi.Input['CredentialKeysK8sArgsDict']]
        seqeracompute: NotRequired[pulumi.Input['CredentialKeysSeqeracomputeArgsDict']]
        ssh: NotRequired[pulumi.Input['CredentialKeysSshArgsDict']]
        tw_agent: NotRequired[pulumi.Input['CredentialKeysTwAgentArgsDict']]
elif False:
    CredentialKeysArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['CredentialKeysAwsArgs']] = None,
                 azure: Optional[pulumi.Input['CredentialKeysAzureArgs']] = None,
                 azure_entra: Optional[pulumi.Input['CredentialKeysAzureEntraArgs']] = None,
                 azurerepos: Optional[pulumi.Input['CredentialKeysAzurereposArgs']] = None,
                 bitbucket: Optional[pulumi.Input['CredentialKeysBitbucketArgs']] = None,
                 codecommit: Optional[pulumi.Input['CredentialKeysCodecommitArgs']] = None,
                 container_reg: Optional[pulumi.Input['CredentialKeysContainerRegArgs']] = None,
                 gitea: Optional[pulumi.Input['CredentialKeysGiteaArgs']] = None,
                 github: Optional[pulumi.Input['CredentialKeysGithubArgs']] = None,
                 gitlab: Optional[pulumi.Input['CredentialKeysGitlabArgs']] = None,
                 google: Optional[pulumi.Input['CredentialKeysGoogleArgs']] = None,
                 k8s: Optional[pulumi.Input['CredentialKeysK8sArgs']] = None,
                 seqeracompute: Optional[pulumi.Input['CredentialKeysSeqeracomputeArgs']] = None,
                 ssh: Optional[pulumi.Input['CredentialKeysSshArgs']] = None,
                 tw_agent: Optional[pulumi.Input['CredentialKeysTwAgentArgs']] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if azure_entra is not None:
            pulumi.set(__self__, "azure_entra", azure_entra)
        if azurerepos is not None:
            pulumi.set(__self__, "azurerepos", azurerepos)
        if bitbucket is not None:
            pulumi.set(__self__, "bitbucket", bitbucket)
        if codecommit is not None:
            pulumi.set(__self__, "codecommit", codecommit)
        if container_reg is not None:
            pulumi.set(__self__, "container_reg", container_reg)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if google is not None:
            pulumi.set(__self__, "google", google)
        if k8s is not None:
            pulumi.set(__self__, "k8s", k8s)
        if seqeracompute is not None:
            pulumi.set(__self__, "seqeracompute", seqeracompute)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if tw_agent is not None:
            pulumi.set(__self__, "tw_agent", tw_agent)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['CredentialKeysAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['CredentialKeysAwsArgs']]):
        pulumi.set(self, "aws", value)

    @_builtins.property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['CredentialKeysAzureArgs']]:
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['CredentialKeysAzureArgs']]):
        pulumi.set(self, "azure", value)

    @_builtins.property
    @pulumi.getter(name="azureEntra")
    def azure_entra(self) -> Optional[pulumi.Input['CredentialKeysAzureEntraArgs']]:
        return pulumi.get(self, "azure_entra")

    @azure_entra.setter
    def azure_entra(self, value: Optional[pulumi.Input['CredentialKeysAzureEntraArgs']]):
        pulumi.set(self, "azure_entra", value)

    @_builtins.property
    @pulumi.getter
    def azurerepos(self) -> Optional[pulumi.Input['CredentialKeysAzurereposArgs']]:
        return pulumi.get(self, "azurerepos")

    @azurerepos.setter
    def azurerepos(self, value: Optional[pulumi.Input['CredentialKeysAzurereposArgs']]):
        pulumi.set(self, "azurerepos", value)

    @_builtins.property
    @pulumi.getter
    def bitbucket(self) -> Optional[pulumi.Input['CredentialKeysBitbucketArgs']]:
        return pulumi.get(self, "bitbucket")

    @bitbucket.setter
    def bitbucket(self, value: Optional[pulumi.Input['CredentialKeysBitbucketArgs']]):
        pulumi.set(self, "bitbucket", value)

    @_builtins.property
    @pulumi.getter
    def codecommit(self) -> Optional[pulumi.Input['CredentialKeysCodecommitArgs']]:
        return pulumi.get(self, "codecommit")

    @codecommit.setter
    def codecommit(self, value: Optional[pulumi.Input['CredentialKeysCodecommitArgs']]):
        pulumi.set(self, "codecommit", value)

    @_builtins.property
    @pulumi.getter(name="containerReg")
    def container_reg(self) -> Optional[pulumi.Input['CredentialKeysContainerRegArgs']]:
        return pulumi.get(self, "container_reg")

    @container_reg.setter
    def container_reg(self, value: Optional[pulumi.Input['CredentialKeysContainerRegArgs']]):
        pulumi.set(self, "container_reg", value)

    @_builtins.property
    @pulumi.getter
    def gitea(self) -> Optional[pulumi.Input['CredentialKeysGiteaArgs']]:
        return pulumi.get(self, "gitea")

    @gitea.setter
    def gitea(self, value: Optional[pulumi.Input['CredentialKeysGiteaArgs']]):
        pulumi.set(self, "gitea", value)

    @_builtins.property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['CredentialKeysGithubArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['CredentialKeysGithubArgs']]):
        pulumi.set(self, "github", value)

    @_builtins.property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['CredentialKeysGitlabArgs']]:
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['CredentialKeysGitlabArgs']]):
        pulumi.set(self, "gitlab", value)

    @_builtins.property
    @pulumi.getter
    def google(self) -> Optional[pulumi.Input['CredentialKeysGoogleArgs']]:
        return pulumi.get(self, "google")

    @google.setter
    def google(self, value: Optional[pulumi.Input['CredentialKeysGoogleArgs']]):
        pulumi.set(self, "google", value)

    @_builtins.property
    @pulumi.getter
    def k8s(self) -> Optional[pulumi.Input['CredentialKeysK8sArgs']]:
        return pulumi.get(self, "k8s")

    @k8s.setter
    def k8s(self, value: Optional[pulumi.Input['CredentialKeysK8sArgs']]):
        pulumi.set(self, "k8s", value)

    @_builtins.property
    @pulumi.getter
    def seqeracompute(self) -> Optional[pulumi.Input['CredentialKeysSeqeracomputeArgs']]:
        return pulumi.get(self, "seqeracompute")

    @seqeracompute.setter
    def seqeracompute(self, value: Optional[pulumi.Input['CredentialKeysSeqeracomputeArgs']]):
        pulumi.set(self, "seqeracompute", value)

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['CredentialKeysSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['CredentialKeysSshArgs']]):
        pulumi.set(self, "ssh", value)

    @_builtins.property
    @pulumi.getter(name="twAgent")
    def tw_agent(self) -> Optional[pulumi.Input['CredentialKeysTwAgentArgs']]:
        return pulumi.get(self, "tw_agent")

    @tw_agent.setter
    def tw_agent(self, value: Optional[pulumi.Input['CredentialKeysTwAgentArgs']]):
        pulumi.set(self, "tw_agent", value)


if not MYPY:
    class CredentialKeysAwsArgsDict(TypedDict):
        access_key: NotRequired[pulumi.Input[_builtins.str]]
        assume_role_arn: NotRequired[pulumi.Input[_builtins.str]]
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysAwsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysAwsArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "assume_role_arn", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)


if not MYPY:
    class CredentialKeysAzureArgsDict(TypedDict):
        batch_key: NotRequired[pulumi.Input[_builtins.str]]
        batch_name: NotRequired[pulumi.Input[_builtins.str]]
        storage_key: NotRequired[pulumi.Input[_builtins.str]]
        storage_name: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysAzureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysAzureArgs:
    def __init__(__self__, *,
                 batch_key: Optional[pulumi.Input[_builtins.str]] = None,
                 batch_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_key: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_name: Optional[pulumi.Input[_builtins.str]] = None):
        if batch_key is not None:
            pulumi.set(__self__, "batch_key", batch_key)
        if batch_name is not None:
            pulumi.set(__self__, "batch_name", batch_name)
        if storage_key is not None:
            pulumi.set(__self__, "storage_key", storage_key)
        if storage_name is not None:
            pulumi.set(__self__, "storage_name", storage_name)

    @_builtins.property
    @pulumi.getter(name="batchKey")
    def batch_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "batch_key")

    @batch_key.setter
    def batch_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "batch_key", value)

    @_builtins.property
    @pulumi.getter(name="batchName")
    def batch_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "batch_name")

    @batch_name.setter
    def batch_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "batch_name", value)

    @_builtins.property
    @pulumi.getter(name="storageKey")
    def storage_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_key")

    @storage_key.setter
    def storage_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_key", value)

    @_builtins.property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_name")

    @storage_name.setter
    def storage_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_name", value)


if not MYPY:
    class CredentialKeysAzureEntraArgsDict(TypedDict):
        batch_key: NotRequired[pulumi.Input[_builtins.str]]
        batch_name: NotRequired[pulumi.Input[_builtins.str]]
        client_id: NotRequired[pulumi.Input[_builtins.str]]
        client_secret: NotRequired[pulumi.Input[_builtins.str]]
        storage_key: NotRequired[pulumi.Input[_builtins.str]]
        storage_name: NotRequired[pulumi.Input[_builtins.str]]
        tenant_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysAzureEntraArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysAzureEntraArgs:
    def __init__(__self__, *,
                 batch_key: Optional[pulumi.Input[_builtins.str]] = None,
                 batch_name: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_key: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        if batch_key is not None:
            pulumi.set(__self__, "batch_key", batch_key)
        if batch_name is not None:
            pulumi.set(__self__, "batch_name", batch_name)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if storage_key is not None:
            pulumi.set(__self__, "storage_key", storage_key)
        if storage_name is not None:
            pulumi.set(__self__, "storage_name", storage_name)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="batchKey")
    def batch_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "batch_key")

    @batch_key.setter
    def batch_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "batch_key", value)

    @_builtins.property
    @pulumi.getter(name="batchName")
    def batch_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "batch_name")

    @batch_name.setter
    def batch_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "batch_name", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter(name="storageKey")
    def storage_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_key")

    @storage_key.setter
    def storage_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_key", value)

    @_builtins.property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_name")

    @storage_name.setter
    def storage_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_name", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class CredentialKeysAzurereposArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[_builtins.str]]
        username: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysAzurereposArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysAzurereposArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class CredentialKeysBitbucketArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[_builtins.str]]
        username: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysBitbucketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysBitbucketArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class CredentialKeysCodecommitArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[_builtins.str]]
        username: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysCodecommitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysCodecommitArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class CredentialKeysContainerRegArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[_builtins.str]]
        registry: NotRequired[pulumi.Input[_builtins.str]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysContainerRegArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysContainerRegArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 registry: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "registry", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class CredentialKeysGiteaArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[_builtins.str]]
        username: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysGiteaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysGiteaArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class CredentialKeysGithubArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[_builtins.str]]
        username: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysGithubArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysGithubArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class CredentialKeysGitlabArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[_builtins.str]]
        token: NotRequired[pulumi.Input[_builtins.str]]
        username: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysGitlabArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysGitlabArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class CredentialKeysGoogleArgsDict(TypedDict):
        data: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysGoogleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysGoogleArgs:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[_builtins.str]] = None):
        if data is not None:
            pulumi.set(__self__, "data", data)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data", value)


if not MYPY:
    class CredentialKeysK8sArgsDict(TypedDict):
        certificate: NotRequired[pulumi.Input[_builtins.str]]
        private_key: NotRequired[pulumi.Input[_builtins.str]]
        token: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysK8sArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysK8sArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token", value)


if not MYPY:
    class CredentialKeysSeqeracomputeArgsDict(TypedDict):
        access_key: NotRequired[pulumi.Input[_builtins.str]]
        assume_role_arn: NotRequired[pulumi.Input[_builtins.str]]
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysSeqeracomputeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysSeqeracomputeArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "assume_role_arn", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)


if not MYPY:
    class CredentialKeysSshArgsDict(TypedDict):
        passphrase: NotRequired[pulumi.Input[_builtins.str]]
        private_key: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysSshArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysSshArgs:
    def __init__(__self__, *,
                 passphrase: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None):
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passphrase", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)


if not MYPY:
    class CredentialKeysTwAgentArgsDict(TypedDict):
        connection_id: NotRequired[pulumi.Input[_builtins.str]]
        shared: NotRequired[pulumi.Input[_builtins.bool]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    CredentialKeysTwAgentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialKeysTwAgentArgs:
    def __init__(__self__, *,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shared: Optional[pulumi.Input[_builtins.bool]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shared", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class DataLinkCredentialArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        provider_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
elif False:
    DataLinkCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataLinkCredentialArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provider_type", value)


if not MYPY:
    class LabelsLabelArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the label was created
        """
        id: NotRequired[pulumi.Input[_builtins.float]]
        """
        Unique numeric identifier for the label
        """
        is_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a default system label
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name or key of the label
        """
        resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a resource-level label
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value associated with the label
        """
elif False:
    LabelsLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelsLabelArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the label was created
        :param pulumi.Input[_builtins.float] id: Unique numeric identifier for the label
        :param pulumi.Input[_builtins.bool] is_default: Flag indicating if this is a default system label
        :param pulumi.Input[_builtins.str] name: Name or key of the label
        :param pulumi.Input[_builtins.bool] resource: Flag indicating if this is a resource-level label
        :param pulumi.Input[_builtins.str] value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PipelineComputeEnvArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        platform: NotRequired[pulumi.Input[_builtins.str]]
        region: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PipelineComputeEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineComputeEnvArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 platform: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "platform", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class PipelineLabelArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the label was created
        """
        id: NotRequired[pulumi.Input[_builtins.float]]
        """
        Unique numeric identifier for the label
        """
        is_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a default system label
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name or key of the label
        """
        resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a resource-level label
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value associated with the label
        """
elif False:
    PipelineLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineLabelArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the label was created
        :param pulumi.Input[_builtins.float] id: Unique numeric identifier for the label
        :param pulumi.Input[_builtins.bool] is_default: Flag indicating if this is a default system label
        :param pulumi.Input[_builtins.str] name: Name or key of the label
        :param pulumi.Input[_builtins.bool] resource: Flag indicating if this is a resource-level label
        :param pulumi.Input[_builtins.str] value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PipelineLaunchArgsDict(TypedDict):
        compute_env_id: pulumi.Input[_builtins.str]
        pipeline: pulumi.Input[_builtins.str]
        work_dir: pulumi.Input[_builtins.str]
        config_profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        config_text: NotRequired[pulumi.Input[_builtins.str]]
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        entry_name: NotRequired[pulumi.Input[_builtins.str]]
        head_job_cpus: NotRequired[pulumi.Input[_builtins.float]]
        head_job_memory_mb: NotRequired[pulumi.Input[_builtins.float]]
        label_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]
        launch_container: NotRequired[pulumi.Input[_builtins.str]]
        main_script: NotRequired[pulumi.Input[_builtins.str]]
        optimization_id: NotRequired[pulumi.Input[_builtins.str]]
        optimization_targets: NotRequired[pulumi.Input[_builtins.str]]
        params_text: NotRequired[pulumi.Input[_builtins.str]]
        post_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        pre_run_script: NotRequired[pulumi.Input[_builtins.str]]
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        pull_latest: NotRequired[pulumi.Input[_builtins.bool]]
        resume: NotRequired[pulumi.Input[_builtins.bool]]
        revision: NotRequired[pulumi.Input[_builtins.str]]
        run_name: NotRequired[pulumi.Input[_builtins.str]]
        schema_name: NotRequired[pulumi.Input[_builtins.str]]
        session_id: NotRequired[pulumi.Input[_builtins.str]]
        stub_run: NotRequired[pulumi.Input[_builtins.bool]]
        tower_config: NotRequired[pulumi.Input[_builtins.str]]
        user_secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        workspace_secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    PipelineLaunchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineLaunchArgs:
    def __init__(__self__, *,
                 compute_env_id: pulumi.Input[_builtins.str],
                 pipeline: pulumi.Input[_builtins.str],
                 work_dir: pulumi.Input[_builtins.str],
                 config_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 config_text: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 entry_name: Optional[pulumi.Input[_builtins.str]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 launch_container: Optional[pulumi.Input[_builtins.str]] = None,
                 main_script: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
                 params_text: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 revision: Optional[pulumi.Input[_builtins.str]] = None,
                 run_name: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stub_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 tower_config: Optional[pulumi.Input[_builtins.str]] = None,
                 user_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 workspace_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        :param pulumi.Input[_builtins.str] pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "pipeline", pipeline)
        pulumi.set(__self__, "work_dir", work_dir)
        if config_profiles is not None:
            pulumi.set(__self__, "config_profiles", config_profiles)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if launch_container is not None:
            pulumi.set(__self__, "launch_container", launch_container)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if optimization_id is not None:
            pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_targets is not None:
            pulumi.set(__self__, "optimization_targets", optimization_targets)
        if params_text is not None:
            pulumi.set(__self__, "params_text", params_text)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if pull_latest is not None:
            pulumi.set(__self__, "pull_latest", pull_latest)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if stub_run is not None:
            pulumi.set(__self__, "stub_run", stub_run)
        if tower_config is not None:
            pulumi.set(__self__, "tower_config", tower_config)
        if user_secrets is not None:
            pulumi.set(__self__, "user_secrets", user_secrets)
        if workspace_secrets is not None:
            pulumi.set(__self__, "workspace_secrets", workspace_secrets)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "work_dir", value)

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "config_profiles")

    @config_profiles.setter
    def config_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "config_profiles", value)

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "config_text")

    @config_text.setter
    def config_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_text", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "entry_name")

    @entry_name.setter
    def entry_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entry_name", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_container")

    @launch_container.setter
    def launch_container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_container", value)

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "main_script")

    @main_script.setter
    def main_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "main_script", value)

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "optimization_id")

    @optimization_id.setter
    def optimization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_id", value)

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "optimization_targets")

    @optimization_targets.setter
    def optimization_targets(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_targets", value)

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "params_text")

    @params_text.setter
    def params_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params_text", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "pull_latest")

    @pull_latest.setter
    def pull_latest(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pull_latest", value)

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "resume")

    @resume.setter
    def resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resume", value)

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "revision", value)

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "run_name")

    @run_name.setter
    def run_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_name", value)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_id", value)

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "stub_run")

    @stub_run.setter
    def stub_run(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub_run", value)

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tower_config")

    @tower_config.setter
    def tower_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tower_config", value)

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "user_secrets")

    @user_secrets.setter
    def user_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_secrets", value)

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "workspace_secrets")

    @workspace_secrets.setter
    def workspace_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "workspace_secrets", value)


if not MYPY:
    class StudiosActiveConnectionArgsDict(TypedDict):
        avatar: NotRequired[pulumi.Input[_builtins.str]]
        email: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.float]]
        last_active: NotRequired[pulumi.Input[_builtins.str]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    StudiosActiveConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosActiveConnectionArgs:
    def __init__(__self__, *,
                 avatar: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 last_active: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_active is not None:
            pulumi.set(__self__, "last_active", last_active)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def avatar(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "avatar")

    @avatar.setter
    def avatar(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "avatar", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="lastActive")
    def last_active(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_active")

    @last_active.setter
    def last_active(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_active", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class StudiosComputeEnvArgsDict(TypedDict):
        credentials_id: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        platform: NotRequired[pulumi.Input[_builtins.str]]
        region: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    StudiosComputeEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosComputeEnvArgs:
    def __init__(__self__, *,
                 credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 platform: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credentials_id", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "platform", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class StudiosConfigurationArgsDict(TypedDict):
        conda_environment: NotRequired[pulumi.Input[_builtins.str]]
        """
        Requires replacement if changed.
        """
        cpu: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        gpu: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        lifespan_hours: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        memory: NotRequired[pulumi.Input[_builtins.float]]
        """
        Requires replacement if changed.
        """
        mount_datas: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Requires replacement if changed.
        """
elif False:
    StudiosConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosConfigurationArgs:
    def __init__(__self__, *,
                 conda_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 gpu: Optional[pulumi.Input[_builtins.float]] = None,
                 lifespan_hours: Optional[pulumi.Input[_builtins.float]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 mount_datas: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] conda_environment: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] cpu: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] gpu: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] lifespan_hours: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] memory: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mount_datas: Requires replacement if changed.
        """
        if conda_environment is not None:
            pulumi.set(__self__, "conda_environment", conda_environment)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if lifespan_hours is not None:
            pulumi.set(__self__, "lifespan_hours", lifespan_hours)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if mount_datas is not None:
            pulumi.set(__self__, "mount_datas", mount_datas)

    @_builtins.property
    @pulumi.getter(name="condaEnvironment")
    def conda_environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "conda_environment")

    @conda_environment.setter
    def conda_environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "conda_environment", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter
    def gpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu")

    @gpu.setter
    def gpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "gpu", value)

    @_builtins.property
    @pulumi.getter(name="lifespanHours")
    def lifespan_hours(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lifespan_hours")

    @lifespan_hours.setter
    def lifespan_hours(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "lifespan_hours", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="mountDatas")
    def mount_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "mount_datas")

    @mount_datas.setter
    def mount_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mount_datas", value)


if not MYPY:
    class StudiosLabelArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the label was created
        """
        id: NotRequired[pulumi.Input[_builtins.float]]
        """
        Unique numeric identifier for the label
        """
        is_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a default system label
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name or key of the label
        """
        resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a resource-level label
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value associated with the label
        """
elif False:
    StudiosLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosLabelArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the label was created
        :param pulumi.Input[_builtins.float] id: Unique numeric identifier for the label
        :param pulumi.Input[_builtins.bool] is_default: Flag indicating if this is a default system label
        :param pulumi.Input[_builtins.str] name: Name or key of the label
        :param pulumi.Input[_builtins.bool] resource: Flag indicating if this is a resource-level label
        :param pulumi.Input[_builtins.str] value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class StudiosMountedDataLinkArgsDict(TypedDict):
        credentials: NotRequired[pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkCredentialArgsDict']]]]
        """
        Array of credentials required to access the data link
        """
        data_link_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Unique identifier for the data link
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Description of the data link's purpose and contents
        """
        hidden: NotRequired[pulumi.Input[_builtins.bool]]
        message: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Display name for the data link connection
        """
        provider_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        public_accessible: NotRequired[pulumi.Input[_builtins.bool]]
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Geographic region where the data link is hosted
        """
        resource_ref: NotRequired[pulumi.Input[_builtins.str]]
        """
        Reference identifier for the external resource
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["VALID", "INVALID"]
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be "bucket"
        """
elif False:
    StudiosMountedDataLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosMountedDataLinkArgs:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkCredentialArgs']]]] = None,
                 data_link_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hidden: Optional[pulumi.Input[_builtins.bool]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_accessible: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkCredentialArgs']]] credentials: Array of credentials required to access the data link
        :param pulumi.Input[_builtins.str] data_link_id: Unique identifier for the data link
        :param pulumi.Input[_builtins.str] description: Description of the data link's purpose and contents
        :param pulumi.Input[_builtins.str] name: Display name for the data link connection
        :param pulumi.Input[_builtins.str] provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        :param pulumi.Input[_builtins.str] region: Geographic region where the data link is hosted
        :param pulumi.Input[_builtins.str] resource_ref: Reference identifier for the external resource
        :param pulumi.Input[_builtins.str] status: must be one of ["VALID", "INVALID"]
        :param pulumi.Input[_builtins.str] type: must be "bucket"
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if data_link_id is not None:
            pulumi.set(__self__, "data_link_id", data_link_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if public_accessible is not None:
            pulumi.set(__self__, "public_accessible", public_accessible)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_ref is not None:
            pulumi.set(__self__, "resource_ref", resource_ref)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkCredentialArgs']]]]:
        """
        Array of credentials required to access the data link
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkCredentialArgs']]]]):
        pulumi.set(self, "credentials", value)

    @_builtins.property
    @pulumi.getter(name="dataLinkId")
    def data_link_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the data link
        """
        return pulumi.get(self, "data_link_id")

    @data_link_id.setter
    def data_link_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_link_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the data link's purpose and contents
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hidden", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display name for the data link connection
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provider_type", value)

    @_builtins.property
    @pulumi.getter(name="publicAccessible")
    def public_accessible(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_accessible")

    @public_accessible.setter
    def public_accessible(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_accessible", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Geographic region where the data link is hosted
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reference identifier for the external resource
        """
        return pulumi.get(self, "resource_ref")

    @resource_ref.setter
    def resource_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_ref", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["VALID", "INVALID"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be "bucket"
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class StudiosMountedDataLinkCredentialArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        provider_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
elif False:
    StudiosMountedDataLinkCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosMountedDataLinkCredentialArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provider_type", value)


if not MYPY:
    class StudiosParentCheckpointArgsDict(TypedDict):
        checkpoint_id: NotRequired[pulumi.Input[_builtins.float]]
        checkpoint_name: NotRequired[pulumi.Input[_builtins.str]]
        session_id: NotRequired[pulumi.Input[_builtins.str]]
        studio_name: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    StudiosParentCheckpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosParentCheckpointArgs:
    def __init__(__self__, *,
                 checkpoint_id: Optional[pulumi.Input[_builtins.float]] = None,
                 checkpoint_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 studio_name: Optional[pulumi.Input[_builtins.str]] = None):
        if checkpoint_id is not None:
            pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        if checkpoint_name is not None:
            pulumi.set(__self__, "checkpoint_name", checkpoint_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if studio_name is not None:
            pulumi.set(__self__, "studio_name", studio_name)

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "checkpoint_id")

    @checkpoint_id.setter
    def checkpoint_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "checkpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="checkpointName")
    def checkpoint_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "checkpoint_name")

    @checkpoint_name.setter
    def checkpoint_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "checkpoint_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_id", value)

    @_builtins.property
    @pulumi.getter(name="studioName")
    def studio_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "studio_name")

    @studio_name.setter
    def studio_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "studio_name", value)


if not MYPY:
    class StudiosProgressArgsDict(TypedDict):
        message: NotRequired[pulumi.Input[_builtins.str]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["pending", "in-progress", "succeeded", "errored"]
        """
        warnings: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    StudiosProgressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosProgressArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 warnings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] status: must be one of ["pending", "in-progress", "succeeded", "errored"]
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["pending", "in-progress", "succeeded", "errored"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "warnings")

    @warnings.setter
    def warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "warnings", value)


if not MYPY:
    class StudiosStatusInfoArgsDict(TypedDict):
        last_update: NotRequired[pulumi.Input[_builtins.str]]
        message: NotRequired[pulumi.Input[_builtins.str]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]
        """
elif False:
    StudiosStatusInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosStatusInfoArgs:
    def __init__(__self__, *,
                 last_update: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] status: must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]
        """
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_update", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class StudiosTemplateArgsDict(TypedDict):
        icon: NotRequired[pulumi.Input[_builtins.str]]
        repository: NotRequired[pulumi.Input[_builtins.str]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["recommended", "deprecated", "experimental", "unsupported"]
        """
        tool: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    StudiosTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosTemplateArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tool: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] status: must be one of ["recommended", "deprecated", "experimental", "unsupported"]
        """
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tool is not None:
            pulumi.set(__self__, "tool", tool)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["recommended", "deprecated", "experimental", "unsupported"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tool(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tool")

    @tool.setter
    def tool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tool", value)


if not MYPY:
    class StudiosUserArgsDict(TypedDict):
        avatar: NotRequired[pulumi.Input[_builtins.str]]
        email: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.float]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    StudiosUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudiosUserArgs:
    def __init__(__self__, *,
                 avatar: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def avatar(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "avatar")

    @avatar.setter
    def avatar(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "avatar", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class TokensTokenArgsDict(TypedDict):
        basic_auth: NotRequired[pulumi.Input[_builtins.str]]
        """
        Deprecated basic authentication string
        """
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the token was created
        """
        id: NotRequired[pulumi.Input[_builtins.float]]
        """
        Unique numeric identifier for the access token (nullable)
        """
        last_used: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the token was last used for authentication
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Display name for the token (1-50 characters)
        """
elif False:
    TokensTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TokensTokenArgs:
    def __init__(__self__, *,
                 basic_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 last_used: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] basic_auth: Deprecated basic authentication string
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the token was created
        :param pulumi.Input[_builtins.float] id: Unique numeric identifier for the access token (nullable)
        :param pulumi.Input[_builtins.str] last_used: Timestamp when the token was last used for authentication
        :param pulumi.Input[_builtins.str] name: Display name for the token (1-50 characters)
        """
        if basic_auth is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""basic_auth is deprecated: Deprecated""")
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="basicAuth")
    @_utilities.deprecated("""Deprecated""")
    def basic_auth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Deprecated basic authentication string
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "basic_auth", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the token was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the access token (nullable)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the token was last used for authentication
        """
        return pulumi.get(self, "last_used")

    @last_used.setter
    def last_used(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_used", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display name for the token (1-50 characters)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkflowsJobInfoArgsDict(TypedDict):
        exit_code: NotRequired[pulumi.Input[_builtins.float]]
        id: NotRequired[pulumi.Input[_builtins.float]]
        message: NotRequired[pulumi.Input[_builtins.str]]
        operation_id: NotRequired[pulumi.Input[_builtins.str]]
        status: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    WorkflowsJobInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsJobInfoArgs:
    def __init__(__self__, *,
                 exit_code: Optional[pulumi.Input[_builtins.float]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 operation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        if exit_code is not None:
            pulumi.set(__self__, "exit_code", exit_code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "exit_code", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "operation_id")

    @operation_id.setter
    def operation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operation_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class WorkflowsLabelArgsDict(TypedDict):
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        """
        Timestamp when the label was created
        """
        id: NotRequired[pulumi.Input[_builtins.float]]
        """
        Unique numeric identifier for the label
        """
        is_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a default system label
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name or key of the label
        """
        resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Flag indicating if this is a resource-level label
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value associated with the label
        """
elif False:
    WorkflowsLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsLabelArgs:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the label was created
        :param pulumi.Input[_builtins.float] id: Unique numeric identifier for the label
        :param pulumi.Input[_builtins.bool] is_default: Flag indicating if this is a default system label
        :param pulumi.Input[_builtins.str] name: Name or key of the label
        :param pulumi.Input[_builtins.bool] resource: Flag indicating if this is a resource-level label
        :param pulumi.Input[_builtins.str] value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WorkflowsPlatformArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    WorkflowsPlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsPlatformArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkflowsProgressArgsDict(TypedDict):
        processes_progresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkflowsProgressProcessesProgressArgsDict']]]]
        total_processes: NotRequired[pulumi.Input[_builtins.float]]
        workflow_progress: NotRequired[pulumi.Input['WorkflowsProgressWorkflowProgressArgsDict']]
elif False:
    WorkflowsProgressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsProgressArgs:
    def __init__(__self__, *,
                 processes_progresses: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowsProgressProcessesProgressArgs']]]] = None,
                 total_processes: Optional[pulumi.Input[_builtins.float]] = None,
                 workflow_progress: Optional[pulumi.Input['WorkflowsProgressWorkflowProgressArgs']] = None):
        if processes_progresses is not None:
            pulumi.set(__self__, "processes_progresses", processes_progresses)
        if total_processes is not None:
            pulumi.set(__self__, "total_processes", total_processes)
        if workflow_progress is not None:
            pulumi.set(__self__, "workflow_progress", workflow_progress)

    @_builtins.property
    @pulumi.getter(name="processesProgresses")
    def processes_progresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowsProgressProcessesProgressArgs']]]]:
        return pulumi.get(self, "processes_progresses")

    @processes_progresses.setter
    def processes_progresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowsProgressProcessesProgressArgs']]]]):
        pulumi.set(self, "processes_progresses", value)

    @_builtins.property
    @pulumi.getter(name="totalProcesses")
    def total_processes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "total_processes")

    @total_processes.setter
    def total_processes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_processes", value)

    @_builtins.property
    @pulumi.getter(name="workflowProgress")
    def workflow_progress(self) -> Optional[pulumi.Input['WorkflowsProgressWorkflowProgressArgs']]:
        return pulumi.get(self, "workflow_progress")

    @workflow_progress.setter
    def workflow_progress(self, value: Optional[pulumi.Input['WorkflowsProgressWorkflowProgressArgs']]):
        pulumi.set(self, "workflow_progress", value)


if not MYPY:
    class WorkflowsProgressProcessesProgressArgsDict(TypedDict):
        aborted: NotRequired[pulumi.Input[_builtins.float]]
        cached: NotRequired[pulumi.Input[_builtins.float]]
        cpu_efficiency: NotRequired[pulumi.Input[_builtins.float]]
        cpu_load: NotRequired[pulumi.Input[_builtins.float]]
        cpu_time: NotRequired[pulumi.Input[_builtins.float]]
        cpus: NotRequired[pulumi.Input[_builtins.float]]
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        failed: NotRequired[pulumi.Input[_builtins.float]]
        inv_ctx_switch: NotRequired[pulumi.Input[_builtins.float]]
        last_updated: NotRequired[pulumi.Input[_builtins.str]]
        load_cpus: NotRequired[pulumi.Input[_builtins.float]]
        load_memory: NotRequired[pulumi.Input[_builtins.float]]
        load_tasks: NotRequired[pulumi.Input[_builtins.float]]
        memory_efficiency: NotRequired[pulumi.Input[_builtins.float]]
        memory_req: NotRequired[pulumi.Input[_builtins.float]]
        memory_rss: NotRequired[pulumi.Input[_builtins.float]]
        peak_cpus: NotRequired[pulumi.Input[_builtins.float]]
        peak_memory: NotRequired[pulumi.Input[_builtins.float]]
        peak_tasks: NotRequired[pulumi.Input[_builtins.float]]
        pending: NotRequired[pulumi.Input[_builtins.float]]
        process: NotRequired[pulumi.Input[_builtins.str]]
        read_bytes: NotRequired[pulumi.Input[_builtins.float]]
        running: NotRequired[pulumi.Input[_builtins.float]]
        submitted: NotRequired[pulumi.Input[_builtins.float]]
        succeeded: NotRequired[pulumi.Input[_builtins.float]]
        vol_ctx_switch: NotRequired[pulumi.Input[_builtins.float]]
        write_bytes: NotRequired[pulumi.Input[_builtins.float]]
elif False:
    WorkflowsProgressProcessesProgressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsProgressProcessesProgressArgs:
    def __init__(__self__, *,
                 aborted: Optional[pulumi.Input[_builtins.float]] = None,
                 cached: Optional[pulumi.Input[_builtins.float]] = None,
                 cpu_efficiency: Optional[pulumi.Input[_builtins.float]] = None,
                 cpu_load: Optional[pulumi.Input[_builtins.float]] = None,
                 cpu_time: Optional[pulumi.Input[_builtins.float]] = None,
                 cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 failed: Optional[pulumi.Input[_builtins.float]] = None,
                 inv_ctx_switch: Optional[pulumi.Input[_builtins.float]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 load_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 load_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 load_tasks: Optional[pulumi.Input[_builtins.float]] = None,
                 memory_efficiency: Optional[pulumi.Input[_builtins.float]] = None,
                 memory_req: Optional[pulumi.Input[_builtins.float]] = None,
                 memory_rss: Optional[pulumi.Input[_builtins.float]] = None,
                 peak_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 peak_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 peak_tasks: Optional[pulumi.Input[_builtins.float]] = None,
                 pending: Optional[pulumi.Input[_builtins.float]] = None,
                 process: Optional[pulumi.Input[_builtins.str]] = None,
                 read_bytes: Optional[pulumi.Input[_builtins.float]] = None,
                 running: Optional[pulumi.Input[_builtins.float]] = None,
                 submitted: Optional[pulumi.Input[_builtins.float]] = None,
                 succeeded: Optional[pulumi.Input[_builtins.float]] = None,
                 vol_ctx_switch: Optional[pulumi.Input[_builtins.float]] = None,
                 write_bytes: Optional[pulumi.Input[_builtins.float]] = None):
        if aborted is not None:
            pulumi.set(__self__, "aborted", aborted)
        if cached is not None:
            pulumi.set(__self__, "cached", cached)
        if cpu_efficiency is not None:
            pulumi.set(__self__, "cpu_efficiency", cpu_efficiency)
        if cpu_load is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""cpu_load is deprecated: Deprecated""")
        if cpu_load is not None:
            pulumi.set(__self__, "cpu_load", cpu_load)
        if cpu_time is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""cpu_time is deprecated: Deprecated""")
        if cpu_time is not None:
            pulumi.set(__self__, "cpu_time", cpu_time)
        if cpus is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""cpus is deprecated: Deprecated""")
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if inv_ctx_switch is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""inv_ctx_switch is deprecated: Deprecated""")
        if inv_ctx_switch is not None:
            pulumi.set(__self__, "inv_ctx_switch", inv_ctx_switch)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if load_cpus is not None:
            pulumi.set(__self__, "load_cpus", load_cpus)
        if load_memory is not None:
            pulumi.set(__self__, "load_memory", load_memory)
        if load_tasks is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""load_tasks is deprecated: Deprecated""")
        if load_tasks is not None:
            pulumi.set(__self__, "load_tasks", load_tasks)
        if memory_efficiency is not None:
            pulumi.set(__self__, "memory_efficiency", memory_efficiency)
        if memory_req is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""memory_req is deprecated: Deprecated""")
        if memory_req is not None:
            pulumi.set(__self__, "memory_req", memory_req)
        if memory_rss is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""memory_rss is deprecated: Deprecated""")
        if memory_rss is not None:
            pulumi.set(__self__, "memory_rss", memory_rss)
        if peak_cpus is not None:
            pulumi.set(__self__, "peak_cpus", peak_cpus)
        if peak_memory is not None:
            pulumi.set(__self__, "peak_memory", peak_memory)
        if peak_tasks is not None:
            pulumi.set(__self__, "peak_tasks", peak_tasks)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if process is not None:
            pulumi.set(__self__, "process", process)
        if read_bytes is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""read_bytes is deprecated: Deprecated""")
        if read_bytes is not None:
            pulumi.set(__self__, "read_bytes", read_bytes)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if submitted is not None:
            pulumi.set(__self__, "submitted", submitted)
        if succeeded is not None:
            pulumi.set(__self__, "succeeded", succeeded)
        if vol_ctx_switch is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""vol_ctx_switch is deprecated: Deprecated""")
        if vol_ctx_switch is not None:
            pulumi.set(__self__, "vol_ctx_switch", vol_ctx_switch)
        if write_bytes is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""write_bytes is deprecated: Deprecated""")
        if write_bytes is not None:
            pulumi.set(__self__, "write_bytes", write_bytes)

    @_builtins.property
    @pulumi.getter
    def aborted(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "aborted")

    @aborted.setter
    def aborted(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "aborted", value)

    @_builtins.property
    @pulumi.getter
    def cached(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cached")

    @cached.setter
    def cached(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cached", value)

    @_builtins.property
    @pulumi.getter(name="cpuEfficiency")
    def cpu_efficiency(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpu_efficiency")

    @cpu_efficiency.setter
    def cpu_efficiency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_efficiency", value)

    @_builtins.property
    @pulumi.getter(name="cpuLoad")
    @_utilities.deprecated("""Deprecated""")
    def cpu_load(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpu_load")

    @cpu_load.setter
    def cpu_load(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_load", value)

    @_builtins.property
    @pulumi.getter(name="cpuTime")
    @_utilities.deprecated("""Deprecated""")
    def cpu_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpu_time")

    @cpu_time.setter
    def cpu_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_time", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpus", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def failed(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "failed")

    @failed.setter
    def failed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "failed", value)

    @_builtins.property
    @pulumi.getter(name="invCtxSwitch")
    @_utilities.deprecated("""Deprecated""")
    def inv_ctx_switch(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "inv_ctx_switch")

    @inv_ctx_switch.setter
    def inv_ctx_switch(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "inv_ctx_switch", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="loadCpus")
    def load_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "load_cpus")

    @load_cpus.setter
    def load_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "load_cpus", value)

    @_builtins.property
    @pulumi.getter(name="loadMemory")
    def load_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "load_memory")

    @load_memory.setter
    def load_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "load_memory", value)

    @_builtins.property
    @pulumi.getter(name="loadTasks")
    @_utilities.deprecated("""Deprecated""")
    def load_tasks(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "load_tasks")

    @load_tasks.setter
    def load_tasks(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "load_tasks", value)

    @_builtins.property
    @pulumi.getter(name="memoryEfficiency")
    def memory_efficiency(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory_efficiency")

    @memory_efficiency.setter
    def memory_efficiency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory_efficiency", value)

    @_builtins.property
    @pulumi.getter(name="memoryReq")
    @_utilities.deprecated("""Deprecated""")
    def memory_req(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory_req")

    @memory_req.setter
    def memory_req(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory_req", value)

    @_builtins.property
    @pulumi.getter(name="memoryRss")
    @_utilities.deprecated("""Deprecated""")
    def memory_rss(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory_rss")

    @memory_rss.setter
    def memory_rss(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory_rss", value)

    @_builtins.property
    @pulumi.getter(name="peakCpus")
    def peak_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "peak_cpus")

    @peak_cpus.setter
    def peak_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "peak_cpus", value)

    @_builtins.property
    @pulumi.getter(name="peakMemory")
    def peak_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "peak_memory")

    @peak_memory.setter
    def peak_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "peak_memory", value)

    @_builtins.property
    @pulumi.getter(name="peakTasks")
    def peak_tasks(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "peak_tasks")

    @peak_tasks.setter
    def peak_tasks(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "peak_tasks", value)

    @_builtins.property
    @pulumi.getter
    def pending(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pending", value)

    @_builtins.property
    @pulumi.getter
    def process(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "process")

    @process.setter
    def process(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "process", value)

    @_builtins.property
    @pulumi.getter(name="readBytes")
    @_utilities.deprecated("""Deprecated""")
    def read_bytes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "read_bytes")

    @read_bytes.setter
    def read_bytes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "read_bytes", value)

    @_builtins.property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "running", value)

    @_builtins.property
    @pulumi.getter
    def submitted(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "submitted")

    @submitted.setter
    def submitted(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "submitted", value)

    @_builtins.property
    @pulumi.getter
    def succeeded(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "succeeded")

    @succeeded.setter
    def succeeded(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "succeeded", value)

    @_builtins.property
    @pulumi.getter(name="volCtxSwitch")
    @_utilities.deprecated("""Deprecated""")
    def vol_ctx_switch(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "vol_ctx_switch")

    @vol_ctx_switch.setter
    def vol_ctx_switch(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vol_ctx_switch", value)

    @_builtins.property
    @pulumi.getter(name="writeBytes")
    @_utilities.deprecated("""Deprecated""")
    def write_bytes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "write_bytes")

    @write_bytes.setter
    def write_bytes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "write_bytes", value)


if not MYPY:
    class WorkflowsProgressWorkflowProgressArgsDict(TypedDict):
        aborted: NotRequired[pulumi.Input[_builtins.float]]
        cached: NotRequired[pulumi.Input[_builtins.float]]
        cost: NotRequired[pulumi.Input[_builtins.float]]
        cpu_efficiency: NotRequired[pulumi.Input[_builtins.float]]
        cpu_load: NotRequired[pulumi.Input[_builtins.float]]
        cpu_time: NotRequired[pulumi.Input[_builtins.float]]
        cpus: NotRequired[pulumi.Input[_builtins.float]]
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        executors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        failed: NotRequired[pulumi.Input[_builtins.float]]
        inv_ctx_switch: NotRequired[pulumi.Input[_builtins.float]]
        last_updated: NotRequired[pulumi.Input[_builtins.str]]
        load_cpus: NotRequired[pulumi.Input[_builtins.float]]
        load_memory: NotRequired[pulumi.Input[_builtins.float]]
        load_tasks: NotRequired[pulumi.Input[_builtins.float]]
        memory_efficiency: NotRequired[pulumi.Input[_builtins.float]]
        memory_req: NotRequired[pulumi.Input[_builtins.float]]
        memory_rss: NotRequired[pulumi.Input[_builtins.float]]
        peak_cpus: NotRequired[pulumi.Input[_builtins.float]]
        peak_memory: NotRequired[pulumi.Input[_builtins.float]]
        peak_tasks: NotRequired[pulumi.Input[_builtins.float]]
        pending: NotRequired[pulumi.Input[_builtins.float]]
        read_bytes: NotRequired[pulumi.Input[_builtins.float]]
        running: NotRequired[pulumi.Input[_builtins.float]]
        submitted: NotRequired[pulumi.Input[_builtins.float]]
        succeeded: NotRequired[pulumi.Input[_builtins.float]]
        vol_ctx_switch: NotRequired[pulumi.Input[_builtins.float]]
        write_bytes: NotRequired[pulumi.Input[_builtins.float]]
elif False:
    WorkflowsProgressWorkflowProgressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsProgressWorkflowProgressArgs:
    def __init__(__self__, *,
                 aborted: Optional[pulumi.Input[_builtins.float]] = None,
                 cached: Optional[pulumi.Input[_builtins.float]] = None,
                 cost: Optional[pulumi.Input[_builtins.float]] = None,
                 cpu_efficiency: Optional[pulumi.Input[_builtins.float]] = None,
                 cpu_load: Optional[pulumi.Input[_builtins.float]] = None,
                 cpu_time: Optional[pulumi.Input[_builtins.float]] = None,
                 cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 executors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 failed: Optional[pulumi.Input[_builtins.float]] = None,
                 inv_ctx_switch: Optional[pulumi.Input[_builtins.float]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 load_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 load_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 load_tasks: Optional[pulumi.Input[_builtins.float]] = None,
                 memory_efficiency: Optional[pulumi.Input[_builtins.float]] = None,
                 memory_req: Optional[pulumi.Input[_builtins.float]] = None,
                 memory_rss: Optional[pulumi.Input[_builtins.float]] = None,
                 peak_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 peak_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 peak_tasks: Optional[pulumi.Input[_builtins.float]] = None,
                 pending: Optional[pulumi.Input[_builtins.float]] = None,
                 read_bytes: Optional[pulumi.Input[_builtins.float]] = None,
                 running: Optional[pulumi.Input[_builtins.float]] = None,
                 submitted: Optional[pulumi.Input[_builtins.float]] = None,
                 succeeded: Optional[pulumi.Input[_builtins.float]] = None,
                 vol_ctx_switch: Optional[pulumi.Input[_builtins.float]] = None,
                 write_bytes: Optional[pulumi.Input[_builtins.float]] = None):
        if aborted is not None:
            pulumi.set(__self__, "aborted", aborted)
        if cached is not None:
            pulumi.set(__self__, "cached", cached)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cpu_efficiency is not None:
            pulumi.set(__self__, "cpu_efficiency", cpu_efficiency)
        if cpu_load is not None:
            pulumi.set(__self__, "cpu_load", cpu_load)
        if cpu_time is not None:
            pulumi.set(__self__, "cpu_time", cpu_time)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if executors is not None:
            pulumi.set(__self__, "executors", executors)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if inv_ctx_switch is not None:
            pulumi.set(__self__, "inv_ctx_switch", inv_ctx_switch)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if load_cpus is not None:
            pulumi.set(__self__, "load_cpus", load_cpus)
        if load_memory is not None:
            pulumi.set(__self__, "load_memory", load_memory)
        if load_tasks is not None:
            pulumi.set(__self__, "load_tasks", load_tasks)
        if memory_efficiency is not None:
            pulumi.set(__self__, "memory_efficiency", memory_efficiency)
        if memory_req is not None:
            pulumi.set(__self__, "memory_req", memory_req)
        if memory_rss is not None:
            pulumi.set(__self__, "memory_rss", memory_rss)
        if peak_cpus is not None:
            pulumi.set(__self__, "peak_cpus", peak_cpus)
        if peak_memory is not None:
            pulumi.set(__self__, "peak_memory", peak_memory)
        if peak_tasks is not None:
            pulumi.set(__self__, "peak_tasks", peak_tasks)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if read_bytes is not None:
            pulumi.set(__self__, "read_bytes", read_bytes)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if submitted is not None:
            pulumi.set(__self__, "submitted", submitted)
        if succeeded is not None:
            pulumi.set(__self__, "succeeded", succeeded)
        if vol_ctx_switch is not None:
            pulumi.set(__self__, "vol_ctx_switch", vol_ctx_switch)
        if write_bytes is not None:
            pulumi.set(__self__, "write_bytes", write_bytes)

    @_builtins.property
    @pulumi.getter
    def aborted(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "aborted")

    @aborted.setter
    def aborted(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "aborted", value)

    @_builtins.property
    @pulumi.getter
    def cached(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cached")

    @cached.setter
    def cached(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cached", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="cpuEfficiency")
    def cpu_efficiency(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpu_efficiency")

    @cpu_efficiency.setter
    def cpu_efficiency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_efficiency", value)

    @_builtins.property
    @pulumi.getter(name="cpuLoad")
    def cpu_load(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpu_load")

    @cpu_load.setter
    def cpu_load(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_load", value)

    @_builtins.property
    @pulumi.getter(name="cpuTime")
    def cpu_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpu_time")

    @cpu_time.setter
    def cpu_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_time", value)

    @_builtins.property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpus", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def executors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "executors")

    @executors.setter
    def executors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "executors", value)

    @_builtins.property
    @pulumi.getter
    def failed(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "failed")

    @failed.setter
    def failed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "failed", value)

    @_builtins.property
    @pulumi.getter(name="invCtxSwitch")
    def inv_ctx_switch(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "inv_ctx_switch")

    @inv_ctx_switch.setter
    def inv_ctx_switch(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "inv_ctx_switch", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="loadCpus")
    def load_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "load_cpus")

    @load_cpus.setter
    def load_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "load_cpus", value)

    @_builtins.property
    @pulumi.getter(name="loadMemory")
    def load_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "load_memory")

    @load_memory.setter
    def load_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "load_memory", value)

    @_builtins.property
    @pulumi.getter(name="loadTasks")
    def load_tasks(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "load_tasks")

    @load_tasks.setter
    def load_tasks(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "load_tasks", value)

    @_builtins.property
    @pulumi.getter(name="memoryEfficiency")
    def memory_efficiency(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory_efficiency")

    @memory_efficiency.setter
    def memory_efficiency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory_efficiency", value)

    @_builtins.property
    @pulumi.getter(name="memoryReq")
    def memory_req(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory_req")

    @memory_req.setter
    def memory_req(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory_req", value)

    @_builtins.property
    @pulumi.getter(name="memoryRss")
    def memory_rss(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory_rss")

    @memory_rss.setter
    def memory_rss(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory_rss", value)

    @_builtins.property
    @pulumi.getter(name="peakCpus")
    def peak_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "peak_cpus")

    @peak_cpus.setter
    def peak_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "peak_cpus", value)

    @_builtins.property
    @pulumi.getter(name="peakMemory")
    def peak_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "peak_memory")

    @peak_memory.setter
    def peak_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "peak_memory", value)

    @_builtins.property
    @pulumi.getter(name="peakTasks")
    def peak_tasks(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "peak_tasks")

    @peak_tasks.setter
    def peak_tasks(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "peak_tasks", value)

    @_builtins.property
    @pulumi.getter
    def pending(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pending", value)

    @_builtins.property
    @pulumi.getter(name="readBytes")
    def read_bytes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "read_bytes")

    @read_bytes.setter
    def read_bytes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "read_bytes", value)

    @_builtins.property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "running", value)

    @_builtins.property
    @pulumi.getter
    def submitted(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "submitted")

    @submitted.setter
    def submitted(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "submitted", value)

    @_builtins.property
    @pulumi.getter
    def succeeded(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "succeeded")

    @succeeded.setter
    def succeeded(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "succeeded", value)

    @_builtins.property
    @pulumi.getter(name="volCtxSwitch")
    def vol_ctx_switch(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "vol_ctx_switch")

    @vol_ctx_switch.setter
    def vol_ctx_switch(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vol_ctx_switch", value)

    @_builtins.property
    @pulumi.getter(name="writeBytes")
    def write_bytes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "write_bytes")

    @write_bytes.setter
    def write_bytes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "write_bytes", value)


if not MYPY:
    class WorkflowsWorkflowArgsDict(TypedDict):
        command_line: NotRequired[pulumi.Input[_builtins.str]]
        commit_id: NotRequired[pulumi.Input[_builtins.str]]
        complete: NotRequired[pulumi.Input[_builtins.str]]
        config_files: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        config_text: NotRequired[pulumi.Input[_builtins.str]]
        container: NotRequired[pulumi.Input[_builtins.str]]
        container_engine: NotRequired[pulumi.Input[_builtins.str]]
        date_created: NotRequired[pulumi.Input[_builtins.str]]
        deleted: NotRequired[pulumi.Input[_builtins.bool]]
        duration: NotRequired[pulumi.Input[_builtins.float]]
        error_message: NotRequired[pulumi.Input[_builtins.str]]
        error_report: NotRequired[pulumi.Input[_builtins.str]]
        exit_status: NotRequired[pulumi.Input[_builtins.float]]
        home_dir: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        last_updated: NotRequired[pulumi.Input[_builtins.str]]
        launch_dir: NotRequired[pulumi.Input[_builtins.str]]
        launch_id: NotRequired[pulumi.Input[_builtins.str]]
        log_file: NotRequired[pulumi.Input[_builtins.str]]
        manifest: NotRequired[pulumi.Input['WorkflowsWorkflowManifestArgsDict']]
        nextflow: NotRequired[pulumi.Input['WorkflowsWorkflowNextflowArgsDict']]
        operation_id: NotRequired[pulumi.Input[_builtins.str]]
        out_file: NotRequired[pulumi.Input[_builtins.str]]
        owner_id: NotRequired[pulumi.Input[_builtins.float]]
        params: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        profile: NotRequired[pulumi.Input[_builtins.str]]
        project_dir: NotRequired[pulumi.Input[_builtins.str]]
        project_name: NotRequired[pulumi.Input[_builtins.str]]
        repository: NotRequired[pulumi.Input[_builtins.str]]
        requires_attention: NotRequired[pulumi.Input[_builtins.bool]]
        resume: NotRequired[pulumi.Input[_builtins.bool]]
        revision: NotRequired[pulumi.Input[_builtins.str]]
        run_name: NotRequired[pulumi.Input[_builtins.str]]
        script_file: NotRequired[pulumi.Input[_builtins.str]]
        script_id: NotRequired[pulumi.Input[_builtins.str]]
        script_name: NotRequired[pulumi.Input[_builtins.str]]
        session_id: NotRequired[pulumi.Input[_builtins.str]]
        start: NotRequired[pulumi.Input[_builtins.str]]
        stats: NotRequired[pulumi.Input['WorkflowsWorkflowStatsArgsDict']]
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        must be one of ["SUBMITTED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "UNKNOWN"]
        """
        submit: NotRequired[pulumi.Input[_builtins.str]]
        success: NotRequired[pulumi.Input[_builtins.bool]]
        user_name: NotRequired[pulumi.Input[_builtins.str]]
        work_dir: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    WorkflowsWorkflowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsWorkflowArgs:
    def __init__(__self__, *,
                 command_line: Optional[pulumi.Input[_builtins.str]] = None,
                 commit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 complete: Optional[pulumi.Input[_builtins.str]] = None,
                 config_files: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 config_text: Optional[pulumi.Input[_builtins.str]] = None,
                 container: Optional[pulumi.Input[_builtins.str]] = None,
                 container_engine: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted: Optional[pulumi.Input[_builtins.bool]] = None,
                 duration: Optional[pulumi.Input[_builtins.float]] = None,
                 error_message: Optional[pulumi.Input[_builtins.str]] = None,
                 error_report: Optional[pulumi.Input[_builtins.str]] = None,
                 exit_status: Optional[pulumi.Input[_builtins.float]] = None,
                 home_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 launch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_file: Optional[pulumi.Input[_builtins.str]] = None,
                 manifest: Optional[pulumi.Input['WorkflowsWorkflowManifestArgs']] = None,
                 nextflow: Optional[pulumi.Input['WorkflowsWorkflowNextflowArgs']] = None,
                 operation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 out_file: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_id: Optional[pulumi.Input[_builtins.float]] = None,
                 params: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 project_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 project_name: Optional[pulumi.Input[_builtins.str]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 requires_attention: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 revision: Optional[pulumi.Input[_builtins.str]] = None,
                 run_name: Optional[pulumi.Input[_builtins.str]] = None,
                 script_file: Optional[pulumi.Input[_builtins.str]] = None,
                 script_id: Optional[pulumi.Input[_builtins.str]] = None,
                 script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 start: Optional[pulumi.Input[_builtins.str]] = None,
                 stats: Optional[pulumi.Input['WorkflowsWorkflowStatsArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 submit: Optional[pulumi.Input[_builtins.str]] = None,
                 success: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] status: must be one of ["SUBMITTED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "UNKNOWN"]
        """
        if command_line is not None:
            pulumi.set(__self__, "command_line", command_line)
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if complete is not None:
            pulumi.set(__self__, "complete", complete)
        if config_files is not None:
            pulumi.set(__self__, "config_files", config_files)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if container_engine is not None:
            pulumi.set(__self__, "container_engine", container_engine)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_report is not None:
            pulumi.set(__self__, "error_report", error_report)
        if exit_status is not None:
            pulumi.set(__self__, "exit_status", exit_status)
        if home_dir is not None:
            pulumi.set(__self__, "home_dir", home_dir)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if launch_id is not None:
            pulumi.set(__self__, "launch_id", launch_id)
        if log_file is not None:
            pulumi.set(__self__, "log_file", log_file)
        if manifest is not None:
            pulumi.set(__self__, "manifest", manifest)
        if nextflow is not None:
            pulumi.set(__self__, "nextflow", nextflow)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if out_file is not None:
            pulumi.set(__self__, "out_file", out_file)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if project_dir is not None:
            pulumi.set(__self__, "project_dir", project_dir)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if requires_attention is not None:
            pulumi.set(__self__, "requires_attention", requires_attention)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if script_file is not None:
            pulumi.set(__self__, "script_file", script_file)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if script_name is not None:
            pulumi.set(__self__, "script_name", script_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if stats is not None:
            pulumi.set(__self__, "stats", stats)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)
        if success is not None:
            pulumi.set(__self__, "success", success)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "command_line")

    @command_line.setter
    def command_line(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command_line", value)

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "commit_id")

    @commit_id.setter
    def commit_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "commit_id", value)

    @_builtins.property
    @pulumi.getter
    def complete(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "complete")

    @complete.setter
    def complete(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "complete", value)

    @_builtins.property
    @pulumi.getter(name="configFiles")
    def config_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "config_files")

    @config_files.setter
    def config_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "config_files", value)

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "config_text")

    @config_text.setter
    def config_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_text", value)

    @_builtins.property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container", value)

    @_builtins.property
    @pulumi.getter(name="containerEngine")
    def container_engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_engine")

    @container_engine.setter
    def container_engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_engine", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "deleted")

    @deleted.setter
    def deleted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deleted", value)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "error_message", value)

    @_builtins.property
    @pulumi.getter(name="errorReport")
    def error_report(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "error_report")

    @error_report.setter
    def error_report(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "error_report", value)

    @_builtins.property
    @pulumi.getter(name="exitStatus")
    def exit_status(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "exit_status")

    @exit_status.setter
    def exit_status(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "exit_status", value)

    @_builtins.property
    @pulumi.getter(name="homeDir")
    def home_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "home_dir")

    @home_dir.setter
    def home_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "home_dir", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_dir")

    @launch_dir.setter
    def launch_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_dir", value)

    @_builtins.property
    @pulumi.getter(name="launchId")
    def launch_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "launch_id")

    @launch_id.setter
    def launch_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_id", value)

    @_builtins.property
    @pulumi.getter(name="logFile")
    def log_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "log_file")

    @log_file.setter
    def log_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_file", value)

    @_builtins.property
    @pulumi.getter
    def manifest(self) -> Optional[pulumi.Input['WorkflowsWorkflowManifestArgs']]:
        return pulumi.get(self, "manifest")

    @manifest.setter
    def manifest(self, value: Optional[pulumi.Input['WorkflowsWorkflowManifestArgs']]):
        pulumi.set(self, "manifest", value)

    @_builtins.property
    @pulumi.getter
    def nextflow(self) -> Optional[pulumi.Input['WorkflowsWorkflowNextflowArgs']]:
        return pulumi.get(self, "nextflow")

    @nextflow.setter
    def nextflow(self, value: Optional[pulumi.Input['WorkflowsWorkflowNextflowArgs']]):
        pulumi.set(self, "nextflow", value)

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "operation_id")

    @operation_id.setter
    def operation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operation_id", value)

    @_builtins.property
    @pulumi.getter(name="outFile")
    def out_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "out_file")

    @out_file.setter
    def out_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "out_file", value)

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "owner_id", value)

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "params", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="projectDir")
    def project_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_dir")

    @project_dir.setter
    def project_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_dir", value)

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_name", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter(name="requiresAttention")
    def requires_attention(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "requires_attention")

    @requires_attention.setter
    def requires_attention(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "requires_attention", value)

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "resume")

    @resume.setter
    def resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resume", value)

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "revision", value)

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "run_name")

    @run_name.setter
    def run_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_name", value)

    @_builtins.property
    @pulumi.getter(name="scriptFile")
    def script_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "script_file")

    @script_file.setter
    def script_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_file", value)

    @_builtins.property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_id", value)

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "script_name")

    @script_name.setter
    def script_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_id", value)

    @_builtins.property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start", value)

    @_builtins.property
    @pulumi.getter
    def stats(self) -> Optional[pulumi.Input['WorkflowsWorkflowStatsArgs']]:
        return pulumi.get(self, "stats")

    @stats.setter
    def stats(self, value: Optional[pulumi.Input['WorkflowsWorkflowStatsArgs']]):
        pulumi.set(self, "stats", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["SUBMITTED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "UNKNOWN"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def submit(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "submit")

    @submit.setter
    def submit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "submit", value)

    @_builtins.property
    @pulumi.getter
    def success(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "success")

    @success.setter
    def success(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "success", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)


if not MYPY:
    class WorkflowsWorkflowManifestArgsDict(TypedDict):
        author: NotRequired[pulumi.Input[_builtins.str]]
        default_branch: NotRequired[pulumi.Input[_builtins.str]]
        description: NotRequired[pulumi.Input[_builtins.str]]
        gitmodules: NotRequired[pulumi.Input[_builtins.str]]
        home_page: NotRequired[pulumi.Input[_builtins.str]]
        icon: NotRequired[pulumi.Input[_builtins.str]]
        main_script: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        nextflow_version: NotRequired[pulumi.Input[_builtins.str]]
        version: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    WorkflowsWorkflowManifestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsWorkflowManifestArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[_builtins.str]] = None,
                 default_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 gitmodules: Optional[pulumi.Input[_builtins.str]] = None,
                 home_page: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 main_script: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nextflow_version: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gitmodules is not None:
            pulumi.set(__self__, "gitmodules", gitmodules)
        if home_page is not None:
            pulumi.set(__self__, "home_page", home_page)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nextflow_version is not None:
            pulumi.set(__self__, "nextflow_version", nextflow_version)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "author", value)

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_branch", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def gitmodules(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "gitmodules")

    @gitmodules.setter
    def gitmodules(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gitmodules", value)

    @_builtins.property
    @pulumi.getter(name="homePage")
    def home_page(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "home_page")

    @home_page.setter
    def home_page(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "home_page", value)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon", value)

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "main_script")

    @main_script.setter
    def main_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "main_script", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nextflowVersion")
    def nextflow_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nextflow_version")

    @nextflow_version.setter
    def nextflow_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nextflow_version", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class WorkflowsWorkflowNextflowArgsDict(TypedDict):
        build: NotRequired[pulumi.Input[_builtins.str]]
        timestamp: NotRequired[pulumi.Input[_builtins.str]]
        version: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    WorkflowsWorkflowNextflowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsWorkflowNextflowArgs:
    def __init__(__self__, *,
                 build: Optional[pulumi.Input[_builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        if build is not None:
            pulumi.set(__self__, "build", build)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def build(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build", value)

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timestamp", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class WorkflowsWorkflowStatsArgsDict(TypedDict):
        cached_count: NotRequired[pulumi.Input[_builtins.float]]
        cached_count_fmt: NotRequired[pulumi.Input[_builtins.str]]
        cached_duration: NotRequired[pulumi.Input[_builtins.float]]
        cached_pct: NotRequired[pulumi.Input[_builtins.float]]
        compute_time_fmt: NotRequired[pulumi.Input[_builtins.str]]
        failed_count: NotRequired[pulumi.Input[_builtins.float]]
        failed_count_fmt: NotRequired[pulumi.Input[_builtins.str]]
        failed_duration: NotRequired[pulumi.Input[_builtins.float]]
        failed_pct: NotRequired[pulumi.Input[_builtins.float]]
        ignored_count: NotRequired[pulumi.Input[_builtins.float]]
        ignored_count_fmt: NotRequired[pulumi.Input[_builtins.str]]
        ignored_pct: NotRequired[pulumi.Input[_builtins.float]]
        succeed_count: NotRequired[pulumi.Input[_builtins.float]]
        succeed_count_fmt: NotRequired[pulumi.Input[_builtins.str]]
        succeed_duration: NotRequired[pulumi.Input[_builtins.float]]
        succeed_pct: NotRequired[pulumi.Input[_builtins.float]]
elif False:
    WorkflowsWorkflowStatsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowsWorkflowStatsArgs:
    def __init__(__self__, *,
                 cached_count: Optional[pulumi.Input[_builtins.float]] = None,
                 cached_count_fmt: Optional[pulumi.Input[_builtins.str]] = None,
                 cached_duration: Optional[pulumi.Input[_builtins.float]] = None,
                 cached_pct: Optional[pulumi.Input[_builtins.float]] = None,
                 compute_time_fmt: Optional[pulumi.Input[_builtins.str]] = None,
                 failed_count: Optional[pulumi.Input[_builtins.float]] = None,
                 failed_count_fmt: Optional[pulumi.Input[_builtins.str]] = None,
                 failed_duration: Optional[pulumi.Input[_builtins.float]] = None,
                 failed_pct: Optional[pulumi.Input[_builtins.float]] = None,
                 ignored_count: Optional[pulumi.Input[_builtins.float]] = None,
                 ignored_count_fmt: Optional[pulumi.Input[_builtins.str]] = None,
                 ignored_pct: Optional[pulumi.Input[_builtins.float]] = None,
                 succeed_count: Optional[pulumi.Input[_builtins.float]] = None,
                 succeed_count_fmt: Optional[pulumi.Input[_builtins.str]] = None,
                 succeed_duration: Optional[pulumi.Input[_builtins.float]] = None,
                 succeed_pct: Optional[pulumi.Input[_builtins.float]] = None):
        if cached_count is not None:
            pulumi.set(__self__, "cached_count", cached_count)
        if cached_count_fmt is not None:
            pulumi.set(__self__, "cached_count_fmt", cached_count_fmt)
        if cached_duration is not None:
            pulumi.set(__self__, "cached_duration", cached_duration)
        if cached_pct is not None:
            pulumi.set(__self__, "cached_pct", cached_pct)
        if compute_time_fmt is not None:
            pulumi.set(__self__, "compute_time_fmt", compute_time_fmt)
        if failed_count is not None:
            pulumi.set(__self__, "failed_count", failed_count)
        if failed_count_fmt is not None:
            pulumi.set(__self__, "failed_count_fmt", failed_count_fmt)
        if failed_duration is not None:
            pulumi.set(__self__, "failed_duration", failed_duration)
        if failed_pct is not None:
            pulumi.set(__self__, "failed_pct", failed_pct)
        if ignored_count is not None:
            pulumi.set(__self__, "ignored_count", ignored_count)
        if ignored_count_fmt is not None:
            pulumi.set(__self__, "ignored_count_fmt", ignored_count_fmt)
        if ignored_pct is not None:
            pulumi.set(__self__, "ignored_pct", ignored_pct)
        if succeed_count is not None:
            pulumi.set(__self__, "succeed_count", succeed_count)
        if succeed_count_fmt is not None:
            pulumi.set(__self__, "succeed_count_fmt", succeed_count_fmt)
        if succeed_duration is not None:
            pulumi.set(__self__, "succeed_duration", succeed_duration)
        if succeed_pct is not None:
            pulumi.set(__self__, "succeed_pct", succeed_pct)

    @_builtins.property
    @pulumi.getter(name="cachedCount")
    def cached_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cached_count")

    @cached_count.setter
    def cached_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cached_count", value)

    @_builtins.property
    @pulumi.getter(name="cachedCountFmt")
    def cached_count_fmt(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cached_count_fmt")

    @cached_count_fmt.setter
    def cached_count_fmt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cached_count_fmt", value)

    @_builtins.property
    @pulumi.getter(name="cachedDuration")
    def cached_duration(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cached_duration")

    @cached_duration.setter
    def cached_duration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cached_duration", value)

    @_builtins.property
    @pulumi.getter(name="cachedPct")
    def cached_pct(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cached_pct")

    @cached_pct.setter
    def cached_pct(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cached_pct", value)

    @_builtins.property
    @pulumi.getter(name="computeTimeFmt")
    def compute_time_fmt(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_time_fmt")

    @compute_time_fmt.setter
    def compute_time_fmt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_time_fmt", value)

    @_builtins.property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "failed_count")

    @failed_count.setter
    def failed_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "failed_count", value)

    @_builtins.property
    @pulumi.getter(name="failedCountFmt")
    def failed_count_fmt(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "failed_count_fmt")

    @failed_count_fmt.setter
    def failed_count_fmt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "failed_count_fmt", value)

    @_builtins.property
    @pulumi.getter(name="failedDuration")
    def failed_duration(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "failed_duration")

    @failed_duration.setter
    def failed_duration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "failed_duration", value)

    @_builtins.property
    @pulumi.getter(name="failedPct")
    def failed_pct(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "failed_pct")

    @failed_pct.setter
    def failed_pct(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "failed_pct", value)

    @_builtins.property
    @pulumi.getter(name="ignoredCount")
    def ignored_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ignored_count")

    @ignored_count.setter
    def ignored_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ignored_count", value)

    @_builtins.property
    @pulumi.getter(name="ignoredCountFmt")
    def ignored_count_fmt(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ignored_count_fmt")

    @ignored_count_fmt.setter
    def ignored_count_fmt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ignored_count_fmt", value)

    @_builtins.property
    @pulumi.getter(name="ignoredPct")
    def ignored_pct(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ignored_pct")

    @ignored_pct.setter
    def ignored_pct(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ignored_pct", value)

    @_builtins.property
    @pulumi.getter(name="succeedCount")
    def succeed_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "succeed_count")

    @succeed_count.setter
    def succeed_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "succeed_count", value)

    @_builtins.property
    @pulumi.getter(name="succeedCountFmt")
    def succeed_count_fmt(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "succeed_count_fmt")

    @succeed_count_fmt.setter
    def succeed_count_fmt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "succeed_count_fmt", value)

    @_builtins.property
    @pulumi.getter(name="succeedDuration")
    def succeed_duration(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "succeed_duration")

    @succeed_duration.setter
    def succeed_duration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "succeed_duration", value)

    @_builtins.property
    @pulumi.getter(name="succeedPct")
    def succeed_pct(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "succeed_pct")

    @succeed_pct.setter
    def succeed_pct(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "succeed_pct", value)


