# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTokensResult',
    'AwaitableGetTokensResult',
    'get_tokens',
    'get_tokens_output',
]

@pulumi.output_type
class GetTokensResult:
    """
    A collection of values returned by getTokens.
    """
    def __init__(__self__, basic_auth=None, date_created=None, id=None, last_used=None, name=None):
        if basic_auth and not isinstance(basic_auth, str):
            raise TypeError("Expected argument 'basic_auth' to be a str")
        pulumi.set(__self__, "basic_auth", basic_auth)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        pulumi.set(__self__, "id", id)
        if last_used and not isinstance(last_used, str):
            raise TypeError("Expected argument 'last_used' to be a str")
        pulumi.set(__self__, "last_used", last_used)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="basicAuth")
    @_utilities.deprecated("""Deprecated""")
    def basic_auth(self) -> _builtins.str:
        return pulumi.get(self, "basic_auth")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> _builtins.str:
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


class AwaitableGetTokensResult(GetTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTokensResult(
            basic_auth=self.basic_auth,
            date_created=self.date_created,
            id=self.id,
            last_used=self.last_used,
            name=self.name)


def get_tokens(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTokensResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getTokens:getTokens', __args__, opts=opts, typ=GetTokensResult, package_ref=_utilities.get_package()).value

    return AwaitableGetTokensResult(
        basic_auth=pulumi.get(__ret__, 'basic_auth'),
        date_created=pulumi.get(__ret__, 'date_created'),
        id=pulumi.get(__ret__, 'id'),
        last_used=pulumi.get(__ret__, 'last_used'),
        name=pulumi.get(__ret__, 'name'))
def get_tokens_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTokensResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getTokens:getTokens', __args__, opts=opts, typ=GetTokensResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetTokensResult(
        basic_auth=pulumi.get(__response__, 'basic_auth'),
        date_created=pulumi.get(__response__, 'date_created'),
        id=pulumi.get(__response__, 'id'),
        last_used=pulumi.get(__response__, 'last_used'),
        name=pulumi.get(__response__, 'name')))
