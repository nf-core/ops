# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetOrgsResult',
    'AwaitableGetOrgsResult',
    'get_orgs',
    'get_orgs_output',
]

@pulumi.output_type
class GetOrgsResult:
    """
    A collection of values returned by getOrgs.
    """
    def __init__(__self__, description=None, full_name=None, id=None, location=None, logo_id=None, logo_url=None, member_id=None, member_role=None, name=None, org_id=None, paying=None, type=None, website=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if logo_id and not isinstance(logo_id, str):
            raise TypeError("Expected argument 'logo_id' to be a str")
        pulumi.set(__self__, "logo_id", logo_id)
        if logo_url and not isinstance(logo_url, str):
            raise TypeError("Expected argument 'logo_url' to be a str")
        pulumi.set(__self__, "logo_url", logo_url)
        if member_id and not isinstance(member_id, float):
            raise TypeError("Expected argument 'member_id' to be a float")
        pulumi.set(__self__, "member_id", member_id)
        if member_role and not isinstance(member_role, str):
            raise TypeError("Expected argument 'member_role' to be a str")
        pulumi.set(__self__, "member_role", member_role)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, float):
            raise TypeError("Expected argument 'org_id' to be a float")
        pulumi.set(__self__, "org_id", org_id)
        if paying and not isinstance(paying, bool):
            raise TypeError("Expected argument 'paying' to be a bool")
        pulumi.set(__self__, "paying", paying)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if website and not isinstance(website, str):
            raise TypeError("Expected argument 'website' to be a str")
        pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fullName")
    def full_name(self) -> _builtins.str:
        return pulumi.get(self, "full_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="logoId")
    def logo_id(self) -> _builtins.str:
        return pulumi.get(self, "logo_id")

    @_builtins.property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> _builtins.str:
        return pulumi.get(self, "logo_url")

    @_builtins.property
    @pulumi.getter(name="memberId")
    def member_id(self) -> _builtins.float:
        return pulumi.get(self, "member_id")

    @_builtins.property
    @pulumi.getter(name="memberRole")
    def member_role(self) -> _builtins.str:
        return pulumi.get(self, "member_role")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.float:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def paying(self) -> _builtins.bool:
        return pulumi.get(self, "paying")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def website(self) -> _builtins.str:
        return pulumi.get(self, "website")


class AwaitableGetOrgsResult(GetOrgsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgsResult(
            description=self.description,
            full_name=self.full_name,
            id=self.id,
            location=self.location,
            logo_id=self.logo_id,
            logo_url=self.logo_url,
            member_id=self.member_id,
            member_role=self.member_role,
            name=self.name,
            org_id=self.org_id,
            paying=self.paying,
            type=self.type,
            website=self.website)


def get_orgs(org_id: Optional[_builtins.float] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getOrgs:getOrgs', __args__, opts=opts, typ=GetOrgsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetOrgsResult(
        description=pulumi.get(__ret__, 'description'),
        full_name=pulumi.get(__ret__, 'full_name'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        logo_id=pulumi.get(__ret__, 'logo_id'),
        logo_url=pulumi.get(__ret__, 'logo_url'),
        member_id=pulumi.get(__ret__, 'member_id'),
        member_role=pulumi.get(__ret__, 'member_role'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        paying=pulumi.get(__ret__, 'paying'),
        type=pulumi.get(__ret__, 'type'),
        website=pulumi.get(__ret__, 'website'))
def get_orgs_output(org_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getOrgs:getOrgs', __args__, opts=opts, typ=GetOrgsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetOrgsResult(
        description=pulumi.get(__response__, 'description'),
        full_name=pulumi.get(__response__, 'full_name'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        logo_id=pulumi.get(__response__, 'logo_id'),
        logo_url=pulumi.get(__response__, 'logo_url'),
        member_id=pulumi.get(__response__, 'member_id'),
        member_role=pulumi.get(__response__, 'member_role'),
        name=pulumi.get(__response__, 'name'),
        org_id=pulumi.get(__response__, 'org_id'),
        paying=pulumi.get(__response__, 'paying'),
        type=pulumi.get(__response__, 'type'),
        website=pulumi.get(__response__, 'website')))
