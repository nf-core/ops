# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetStudiosResult',
    'AwaitableGetStudiosResult',
    'get_studios',
    'get_studios_output',
]

@pulumi.output_type
class GetStudiosResult:
    """
    A collection of values returned by getStudios.
    """
    def __init__(__self__, active_connections=None, base_image=None, compute_env=None, configuration=None, custom_image=None, date_created=None, description=None, effective_lifespan_hours=None, id=None, is_private=None, labels=None, last_started=None, last_updated=None, mounted_data_links=None, name=None, parent_checkpoint=None, progresses=None, session_id=None, status_info=None, studio_url=None, template=None, user=None, wave_build_url=None, workspace_id=None):
        if active_connections and not isinstance(active_connections, list):
            raise TypeError("Expected argument 'active_connections' to be a list")
        pulumi.set(__self__, "active_connections", active_connections)
        if base_image and not isinstance(base_image, str):
            raise TypeError("Expected argument 'base_image' to be a str")
        pulumi.set(__self__, "base_image", base_image)
        if compute_env and not isinstance(compute_env, dict):
            raise TypeError("Expected argument 'compute_env' to be a dict")
        pulumi.set(__self__, "compute_env", compute_env)
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if custom_image and not isinstance(custom_image, bool):
            raise TypeError("Expected argument 'custom_image' to be a bool")
        pulumi.set(__self__, "custom_image", custom_image)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if effective_lifespan_hours and not isinstance(effective_lifespan_hours, float):
            raise TypeError("Expected argument 'effective_lifespan_hours' to be a float")
        pulumi.set(__self__, "effective_lifespan_hours", effective_lifespan_hours)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_private and not isinstance(is_private, bool):
            raise TypeError("Expected argument 'is_private' to be a bool")
        pulumi.set(__self__, "is_private", is_private)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_started and not isinstance(last_started, str):
            raise TypeError("Expected argument 'last_started' to be a str")
        pulumi.set(__self__, "last_started", last_started)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if mounted_data_links and not isinstance(mounted_data_links, list):
            raise TypeError("Expected argument 'mounted_data_links' to be a list")
        pulumi.set(__self__, "mounted_data_links", mounted_data_links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_checkpoint and not isinstance(parent_checkpoint, dict):
            raise TypeError("Expected argument 'parent_checkpoint' to be a dict")
        pulumi.set(__self__, "parent_checkpoint", parent_checkpoint)
        if progresses and not isinstance(progresses, list):
            raise TypeError("Expected argument 'progresses' to be a list")
        pulumi.set(__self__, "progresses", progresses)
        if session_id and not isinstance(session_id, str):
            raise TypeError("Expected argument 'session_id' to be a str")
        pulumi.set(__self__, "session_id", session_id)
        if status_info and not isinstance(status_info, dict):
            raise TypeError("Expected argument 'status_info' to be a dict")
        pulumi.set(__self__, "status_info", status_info)
        if studio_url and not isinstance(studio_url, str):
            raise TypeError("Expected argument 'studio_url' to be a str")
        pulumi.set(__self__, "studio_url", studio_url)
        if template and not isinstance(template, dict):
            raise TypeError("Expected argument 'template' to be a dict")
        pulumi.set(__self__, "template", template)
        if user and not isinstance(user, dict):
            raise TypeError("Expected argument 'user' to be a dict")
        pulumi.set(__self__, "user", user)
        if wave_build_url and not isinstance(wave_build_url, str):
            raise TypeError("Expected argument 'wave_build_url' to be a str")
        pulumi.set(__self__, "wave_build_url", wave_build_url)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="activeConnections")
    def active_connections(self) -> Sequence['outputs.GetStudiosActiveConnectionResult']:
        return pulumi.get(self, "active_connections")

    @_builtins.property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> _builtins.str:
        return pulumi.get(self, "base_image")

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> 'outputs.GetStudiosComputeEnvResult':
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> 'outputs.GetStudiosConfigurationResult':
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="customImage")
    def custom_image(self) -> _builtins.bool:
        return pulumi.get(self, "custom_image")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="effectiveLifespanHours")
    def effective_lifespan_hours(self) -> _builtins.float:
        return pulumi.get(self, "effective_lifespan_hours")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> _builtins.bool:
        return pulumi.get(self, "is_private")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetStudiosLabelResult']:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastStarted")
    def last_started(self) -> _builtins.str:
        return pulumi.get(self, "last_started")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="mountedDataLinks")
    def mounted_data_links(self) -> Sequence['outputs.GetStudiosMountedDataLinkResult']:
        return pulumi.get(self, "mounted_data_links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentCheckpoint")
    def parent_checkpoint(self) -> 'outputs.GetStudiosParentCheckpointResult':
        return pulumi.get(self, "parent_checkpoint")

    @_builtins.property
    @pulumi.getter
    def progresses(self) -> Sequence['outputs.GetStudiosProgressResult']:
        return pulumi.get(self, "progresses")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> _builtins.str:
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="statusInfo")
    def status_info(self) -> 'outputs.GetStudiosStatusInfoResult':
        return pulumi.get(self, "status_info")

    @_builtins.property
    @pulumi.getter(name="studioUrl")
    def studio_url(self) -> _builtins.str:
        return pulumi.get(self, "studio_url")

    @_builtins.property
    @pulumi.getter
    def template(self) -> 'outputs.GetStudiosTemplateResult':
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter
    def user(self) -> 'outputs.GetStudiosUserResult':
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="waveBuildUrl")
    def wave_build_url(self) -> _builtins.str:
        return pulumi.get(self, "wave_build_url")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "workspace_id")


class AwaitableGetStudiosResult(GetStudiosResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStudiosResult(
            active_connections=self.active_connections,
            base_image=self.base_image,
            compute_env=self.compute_env,
            configuration=self.configuration,
            custom_image=self.custom_image,
            date_created=self.date_created,
            description=self.description,
            effective_lifespan_hours=self.effective_lifespan_hours,
            id=self.id,
            is_private=self.is_private,
            labels=self.labels,
            last_started=self.last_started,
            last_updated=self.last_updated,
            mounted_data_links=self.mounted_data_links,
            name=self.name,
            parent_checkpoint=self.parent_checkpoint,
            progresses=self.progresses,
            session_id=self.session_id,
            status_info=self.status_info,
            studio_url=self.studio_url,
            template=self.template,
            user=self.user,
            wave_build_url=self.wave_build_url,
            workspace_id=self.workspace_id)


def get_studios(workspace_id: Optional[_builtins.float] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStudiosResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getStudios:getStudios', __args__, opts=opts, typ=GetStudiosResult, package_ref=_utilities.get_package()).value

    return AwaitableGetStudiosResult(
        active_connections=pulumi.get(__ret__, 'active_connections'),
        base_image=pulumi.get(__ret__, 'base_image'),
        compute_env=pulumi.get(__ret__, 'compute_env'),
        configuration=pulumi.get(__ret__, 'configuration'),
        custom_image=pulumi.get(__ret__, 'custom_image'),
        date_created=pulumi.get(__ret__, 'date_created'),
        description=pulumi.get(__ret__, 'description'),
        effective_lifespan_hours=pulumi.get(__ret__, 'effective_lifespan_hours'),
        id=pulumi.get(__ret__, 'id'),
        is_private=pulumi.get(__ret__, 'is_private'),
        labels=pulumi.get(__ret__, 'labels'),
        last_started=pulumi.get(__ret__, 'last_started'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        mounted_data_links=pulumi.get(__ret__, 'mounted_data_links'),
        name=pulumi.get(__ret__, 'name'),
        parent_checkpoint=pulumi.get(__ret__, 'parent_checkpoint'),
        progresses=pulumi.get(__ret__, 'progresses'),
        session_id=pulumi.get(__ret__, 'session_id'),
        status_info=pulumi.get(__ret__, 'status_info'),
        studio_url=pulumi.get(__ret__, 'studio_url'),
        template=pulumi.get(__ret__, 'template'),
        user=pulumi.get(__ret__, 'user'),
        wave_build_url=pulumi.get(__ret__, 'wave_build_url'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_studios_output(workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStudiosResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getStudios:getStudios', __args__, opts=opts, typ=GetStudiosResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetStudiosResult(
        active_connections=pulumi.get(__response__, 'active_connections'),
        base_image=pulumi.get(__response__, 'base_image'),
        compute_env=pulumi.get(__response__, 'compute_env'),
        configuration=pulumi.get(__response__, 'configuration'),
        custom_image=pulumi.get(__response__, 'custom_image'),
        date_created=pulumi.get(__response__, 'date_created'),
        description=pulumi.get(__response__, 'description'),
        effective_lifespan_hours=pulumi.get(__response__, 'effective_lifespan_hours'),
        id=pulumi.get(__response__, 'id'),
        is_private=pulumi.get(__response__, 'is_private'),
        labels=pulumi.get(__response__, 'labels'),
        last_started=pulumi.get(__response__, 'last_started'),
        last_updated=pulumi.get(__response__, 'last_updated'),
        mounted_data_links=pulumi.get(__response__, 'mounted_data_links'),
        name=pulumi.get(__response__, 'name'),
        parent_checkpoint=pulumi.get(__response__, 'parent_checkpoint'),
        progresses=pulumi.get(__response__, 'progresses'),
        session_id=pulumi.get(__response__, 'session_id'),
        status_info=pulumi.get(__response__, 'status_info'),
        studio_url=pulumi.get(__response__, 'studio_url'),
        template=pulumi.get(__response__, 'template'),
        user=pulumi.get(__response__, 'user'),
        wave_build_url=pulumi.get(__response__, 'wave_build_url'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
