# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ActionConfig',
    'ActionConfigGithub',
    'ActionConfigTower',
    'ActionEvent',
    'ActionEventGithub',
    'ActionEventTower',
    'ActionLabel',
    'ActionLaunch',
    'ActionLaunchComputeEnv',
    'ActionLaunchComputeEnvConfig',
    'ActionLaunchComputeEnvConfigAltairPlatform',
    'ActionLaunchComputeEnvConfigAltairPlatformEnvironment',
    'ActionLaunchComputeEnvConfigAwsBatch',
    'ActionLaunchComputeEnvConfigAwsBatchEnvironment',
    'ActionLaunchComputeEnvConfigAwsBatchForge',
    'ActionLaunchComputeEnvConfigAwsCloud',
    'ActionLaunchComputeEnvConfigAwsCloudEnvironment',
    'ActionLaunchComputeEnvConfigAzureBatch',
    'ActionLaunchComputeEnvConfigAzureBatchEnvironment',
    'ActionLaunchComputeEnvConfigAzureBatchForge',
    'ActionLaunchComputeEnvConfigEksPlatform',
    'ActionLaunchComputeEnvConfigEksPlatformEnvironment',
    'ActionLaunchComputeEnvConfigGkePlatform',
    'ActionLaunchComputeEnvConfigGkePlatformEnvironment',
    'ActionLaunchComputeEnvConfigGoogleBatch',
    'ActionLaunchComputeEnvConfigGoogleBatchEnvironment',
    'ActionLaunchComputeEnvConfigGoogleLifesciences',
    'ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironment',
    'ActionLaunchComputeEnvConfigK8sPlatform',
    'ActionLaunchComputeEnvConfigK8sPlatformEnvironment',
    'ActionLaunchComputeEnvConfigLsfPlatform',
    'ActionLaunchComputeEnvConfigLsfPlatformEnvironment',
    'ActionLaunchComputeEnvConfigMoabPlatform',
    'ActionLaunchComputeEnvConfigMoabPlatformEnvironment',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatform',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironment',
    'ActionLaunchComputeEnvConfigSeqeracomputePlatformForge',
    'ActionLaunchComputeEnvConfigSlurmPlatform',
    'ActionLaunchComputeEnvConfigSlurmPlatformEnvironment',
    'ActionLaunchComputeEnvConfigUgePlatform',
    'ActionLaunchComputeEnvConfigUgePlatformEnvironment',
    'ComputeEnvComputeEnv',
    'ComputeEnvComputeEnvConfig',
    'ComputeEnvComputeEnvConfigAltairPlatform',
    'ComputeEnvComputeEnvConfigAltairPlatformEnvironment',
    'ComputeEnvComputeEnvConfigAwsBatch',
    'ComputeEnvComputeEnvConfigAwsBatchEnvironment',
    'ComputeEnvComputeEnvConfigAwsBatchForge',
    'ComputeEnvComputeEnvConfigAwsCloud',
    'ComputeEnvComputeEnvConfigAwsCloudEnvironment',
    'ComputeEnvComputeEnvConfigAzureBatch',
    'ComputeEnvComputeEnvConfigAzureBatchEnvironment',
    'ComputeEnvComputeEnvConfigAzureBatchForge',
    'ComputeEnvComputeEnvConfigEksPlatform',
    'ComputeEnvComputeEnvConfigEksPlatformEnvironment',
    'ComputeEnvComputeEnvConfigGkePlatform',
    'ComputeEnvComputeEnvConfigGkePlatformEnvironment',
    'ComputeEnvComputeEnvConfigGoogleBatch',
    'ComputeEnvComputeEnvConfigGoogleBatchEnvironment',
    'ComputeEnvComputeEnvConfigGoogleLifesciences',
    'ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironment',
    'ComputeEnvComputeEnvConfigK8sPlatform',
    'ComputeEnvComputeEnvConfigK8sPlatformEnvironment',
    'ComputeEnvComputeEnvConfigLsfPlatform',
    'ComputeEnvComputeEnvConfigLsfPlatformEnvironment',
    'ComputeEnvComputeEnvConfigMoabPlatform',
    'ComputeEnvComputeEnvConfigMoabPlatformEnvironment',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatform',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironment',
    'ComputeEnvComputeEnvConfigSeqeracomputePlatformForge',
    'ComputeEnvComputeEnvConfigSlurmPlatform',
    'ComputeEnvComputeEnvConfigSlurmPlatformEnvironment',
    'ComputeEnvComputeEnvConfigUgePlatform',
    'ComputeEnvComputeEnvConfigUgePlatformEnvironment',
    'ComputeEnvComputeEnvLabel',
    'CredentialKeys',
    'CredentialKeysAws',
    'CredentialKeysAzure',
    'CredentialKeysAzureEntra',
    'CredentialKeysAzurerepos',
    'CredentialKeysBitbucket',
    'CredentialKeysCodecommit',
    'CredentialKeysContainerReg',
    'CredentialKeysGitea',
    'CredentialKeysGithub',
    'CredentialKeysGitlab',
    'CredentialKeysGoogle',
    'CredentialKeysK8s',
    'CredentialKeysSeqeracompute',
    'CredentialKeysSsh',
    'CredentialKeysTwAgent',
    'DataLinkCredential',
    'LabelsLabel',
    'PipelineComputeEnv',
    'PipelineLabel',
    'PipelineLaunch',
    'StudiosActiveConnection',
    'StudiosComputeEnv',
    'StudiosConfiguration',
    'StudiosLabel',
    'StudiosMountedDataLink',
    'StudiosMountedDataLinkCredential',
    'StudiosParentCheckpoint',
    'StudiosProgress',
    'StudiosStatusInfo',
    'StudiosTemplate',
    'StudiosUser',
    'TokensToken',
    'WorkflowsJobInfo',
    'WorkflowsLabel',
    'WorkflowsPlatform',
    'WorkflowsProgress',
    'WorkflowsProgressProcessesProgress',
    'WorkflowsProgressWorkflowProgress',
    'WorkflowsWorkflow',
    'WorkflowsWorkflowManifest',
    'WorkflowsWorkflowNextflow',
    'WorkflowsWorkflowStats',
    'GetActionConfigResult',
    'GetActionConfigGithubResult',
    'GetActionConfigTowerResult',
    'GetActionEventResult',
    'GetActionEventGithubResult',
    'GetActionEventTowerResult',
    'GetActionLabelResult',
    'GetActionLaunchResult',
    'GetActionLaunchComputeEnvResult',
    'GetActionLaunchComputeEnvConfigResult',
    'GetActionLaunchComputeEnvConfigAltairPlatformResult',
    'GetActionLaunchComputeEnvConfigAltairPlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigAwsBatchResult',
    'GetActionLaunchComputeEnvConfigAwsBatchEnvironmentResult',
    'GetActionLaunchComputeEnvConfigAwsBatchForgeResult',
    'GetActionLaunchComputeEnvConfigAwsCloudResult',
    'GetActionLaunchComputeEnvConfigAwsCloudEnvironmentResult',
    'GetActionLaunchComputeEnvConfigAzureBatchResult',
    'GetActionLaunchComputeEnvConfigAzureBatchEnvironmentResult',
    'GetActionLaunchComputeEnvConfigAzureBatchForgeResult',
    'GetActionLaunchComputeEnvConfigEksPlatformResult',
    'GetActionLaunchComputeEnvConfigEksPlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigGkePlatformResult',
    'GetActionLaunchComputeEnvConfigGkePlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigGoogleBatchResult',
    'GetActionLaunchComputeEnvConfigGoogleBatchEnvironmentResult',
    'GetActionLaunchComputeEnvConfigGoogleLifesciencesResult',
    'GetActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentResult',
    'GetActionLaunchComputeEnvConfigK8sPlatformResult',
    'GetActionLaunchComputeEnvConfigK8sPlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigLsfPlatformResult',
    'GetActionLaunchComputeEnvConfigLsfPlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigMoabPlatformResult',
    'GetActionLaunchComputeEnvConfigMoabPlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigSeqeracomputePlatformResult',
    'GetActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigSeqeracomputePlatformForgeResult',
    'GetActionLaunchComputeEnvConfigSlurmPlatformResult',
    'GetActionLaunchComputeEnvConfigSlurmPlatformEnvironmentResult',
    'GetActionLaunchComputeEnvConfigUgePlatformResult',
    'GetActionLaunchComputeEnvConfigUgePlatformEnvironmentResult',
    'GetComputeEnvComputeEnvResult',
    'GetComputeEnvComputeEnvConfigResult',
    'GetComputeEnvComputeEnvConfigAltairPlatformResult',
    'GetComputeEnvComputeEnvConfigAltairPlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigAwsBatchResult',
    'GetComputeEnvComputeEnvConfigAwsBatchEnvironmentResult',
    'GetComputeEnvComputeEnvConfigAwsBatchForgeResult',
    'GetComputeEnvComputeEnvConfigAwsCloudResult',
    'GetComputeEnvComputeEnvConfigAwsCloudEnvironmentResult',
    'GetComputeEnvComputeEnvConfigAzureBatchResult',
    'GetComputeEnvComputeEnvConfigAzureBatchEnvironmentResult',
    'GetComputeEnvComputeEnvConfigAzureBatchForgeResult',
    'GetComputeEnvComputeEnvConfigEksPlatformResult',
    'GetComputeEnvComputeEnvConfigEksPlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigGkePlatformResult',
    'GetComputeEnvComputeEnvConfigGkePlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigGoogleBatchResult',
    'GetComputeEnvComputeEnvConfigGoogleBatchEnvironmentResult',
    'GetComputeEnvComputeEnvConfigGoogleLifesciencesResult',
    'GetComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentResult',
    'GetComputeEnvComputeEnvConfigK8sPlatformResult',
    'GetComputeEnvComputeEnvConfigK8sPlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigLsfPlatformResult',
    'GetComputeEnvComputeEnvConfigLsfPlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigMoabPlatformResult',
    'GetComputeEnvComputeEnvConfigMoabPlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigSeqeracomputePlatformResult',
    'GetComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigSeqeracomputePlatformForgeResult',
    'GetComputeEnvComputeEnvConfigSlurmPlatformResult',
    'GetComputeEnvComputeEnvConfigSlurmPlatformEnvironmentResult',
    'GetComputeEnvComputeEnvConfigUgePlatformResult',
    'GetComputeEnvComputeEnvConfigUgePlatformEnvironmentResult',
    'GetComputeEnvComputeEnvLabelResult',
    'GetCredentialKeysResult',
    'GetCredentialKeysAwsResult',
    'GetCredentialKeysAzureResult',
    'GetCredentialKeysAzureEntraResult',
    'GetCredentialKeysAzurereposResult',
    'GetCredentialKeysBitbucketResult',
    'GetCredentialKeysCodecommitResult',
    'GetCredentialKeysContainerRegResult',
    'GetCredentialKeysGiteaResult',
    'GetCredentialKeysGithubResult',
    'GetCredentialKeysGitlabResult',
    'GetCredentialKeysGoogleResult',
    'GetCredentialKeysK8sResult',
    'GetCredentialKeysSeqeracomputeResult',
    'GetCredentialKeysSshResult',
    'GetCredentialKeysTwAgentResult',
    'GetDataLinkCredentialResult',
    'GetDatasetDatasetResult',
    'GetLabelsLabelResult',
    'GetPipelineComputeEnvResult',
    'GetPipelineLabelResult',
    'GetStudiosActiveConnectionResult',
    'GetStudiosComputeEnvResult',
    'GetStudiosConfigurationResult',
    'GetStudiosLabelResult',
    'GetStudiosMountedDataLinkResult',
    'GetStudiosMountedDataLinkCredentialResult',
    'GetStudiosParentCheckpointResult',
    'GetStudiosProgressResult',
    'GetStudiosStatusInfoResult',
    'GetStudiosTemplateResult',
    'GetStudiosUserResult',
    'GetUserWorkspacesOrgsAndWorkspaceResult',
    'GetWorkflowsJobInfoResult',
    'GetWorkflowsLabelResult',
    'GetWorkflowsPlatformResult',
    'GetWorkflowsProgressResult',
    'GetWorkflowsProgressProcessesProgressResult',
    'GetWorkflowsProgressWorkflowProgressResult',
    'GetWorkflowsWorkflowResult',
    'GetWorkflowsWorkflowManifestResult',
    'GetWorkflowsWorkflowNextflowResult',
    'GetWorkflowsWorkflowStatsResult',
    'GetWorkspacesWorkspaceResult',
]

@pulumi.output_type
class ActionConfig(dict):
    def __init__(__self__, *,
                 github: Optional['outputs.ActionConfigGithub'] = None,
                 tower: Optional['outputs.ActionConfigTower'] = None):
        if github is not None:
            pulumi.set(__self__, "github", github)
        if tower is not None:
            pulumi.set(__self__, "tower", tower)

    @_builtins.property
    @pulumi.getter
    def github(self) -> Optional['outputs.ActionConfigGithub']:
        return pulumi.get(self, "github")

    @_builtins.property
    @pulumi.getter
    def tower(self) -> Optional['outputs.ActionConfigTower']:
        return pulumi.get(self, "tower")


@pulumi.output_type
class ActionConfigGithub(dict):
    def __init__(__self__, *,
                 discriminator: Optional[_builtins.str] = None,
                 events: Optional[Sequence[_builtins.str]] = None):
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "discriminator")

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "events")


@pulumi.output_type
class ActionConfigTower(dict):
    def __init__(__self__, *,
                 discriminator: Optional[_builtins.str] = None):
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "discriminator")


@pulumi.output_type
class ActionEvent(dict):
    def __init__(__self__, *,
                 github: Optional['outputs.ActionEventGithub'] = None,
                 tower: Optional['outputs.ActionEventTower'] = None):
        if github is not None:
            pulumi.set(__self__, "github", github)
        if tower is not None:
            pulumi.set(__self__, "tower", tower)

    @_builtins.property
    @pulumi.getter
    def github(self) -> Optional['outputs.ActionEventGithub']:
        return pulumi.get(self, "github")

    @_builtins.property
    @pulumi.getter
    def tower(self) -> Optional['outputs.ActionEventTower']:
        return pulumi.get(self, "tower")


@pulumi.output_type
class ActionEventGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitId":
            suggest = "commit_id"
        elif key == "commitMessage":
            suggest = "commit_message"
        elif key == "pusherEmail":
            suggest = "pusher_email"
        elif key == "pusherName":
            suggest = "pusher_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionEventGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionEventGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionEventGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commit_id: Optional[_builtins.str] = None,
                 commit_message: Optional[_builtins.str] = None,
                 discriminator: Optional[_builtins.str] = None,
                 pusher_email: Optional[_builtins.str] = None,
                 pusher_name: Optional[_builtins.str] = None,
                 ref: Optional[_builtins.str] = None,
                 timestamp: Optional[_builtins.str] = None):
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if commit_message is not None:
            pulumi.set(__self__, "commit_message", commit_message)
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)
        if pusher_email is not None:
            pulumi.set(__self__, "pusher_email", pusher_email)
        if pusher_name is not None:
            pulumi.set(__self__, "pusher_name", pusher_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "commit_id")

    @_builtins.property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "commit_message")

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "discriminator")

    @_builtins.property
    @pulumi.getter(name="pusherEmail")
    def pusher_email(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pusher_email")

    @_builtins.property
    @pulumi.getter(name="pusherName")
    def pusher_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pusher_name")

    @_builtins.property
    @pulumi.getter
    def ref(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ref")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class ActionEventTower(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workflowId":
            suggest = "workflow_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionEventTower. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionEventTower.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionEventTower.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 discriminator: Optional[_builtins.str] = None,
                 timestamp: Optional[_builtins.str] = None,
                 workflow_id: Optional[_builtins.str] = None):
        if discriminator is not None:
            pulumi.set(__self__, "discriminator", discriminator)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "discriminator")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workflow_id")


@pulumi.output_type
class ActionLabel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLabel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLabel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLabel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 is_default: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 resource: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeEnvId":
            suggest = "compute_env_id"
        elif key == "workDir":
            suggest = "work_dir"
        elif key == "computeEnv":
            suggest = "compute_env"
        elif key == "configProfiles":
            suggest = "config_profiles"
        elif key == "configText":
            suggest = "config_text"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "entryName":
            suggest = "entry_name"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "labelIds":
            suggest = "label_ids"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "launchContainer":
            suggest = "launch_container"
        elif key == "mainScript":
            suggest = "main_script"
        elif key == "optimizationId":
            suggest = "optimization_id"
        elif key == "optimizationTargets":
            suggest = "optimization_targets"
        elif key == "paramsText":
            suggest = "params_text"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "pullLatest":
            suggest = "pull_latest"
        elif key == "resumeLaunchId":
            suggest = "resume_launch_id"
        elif key == "runName":
            suggest = "run_name"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sessionId":
            suggest = "session_id"
        elif key == "stubRun":
            suggest = "stub_run"
        elif key == "towerConfig":
            suggest = "tower_config"
        elif key == "userSecrets":
            suggest = "user_secrets"
        elif key == "workspaceSecrets":
            suggest = "workspace_secrets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_env_id: _builtins.str,
                 pipeline: _builtins.str,
                 work_dir: _builtins.str,
                 compute_env: Optional['outputs.ActionLaunchComputeEnv'] = None,
                 config_profiles: Optional[Sequence[_builtins.str]] = None,
                 config_text: Optional[_builtins.str] = None,
                 date_created: Optional[_builtins.str] = None,
                 entry_name: Optional[_builtins.str] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 id: Optional[_builtins.str] = None,
                 label_ids: Optional[Sequence[_builtins.float]] = None,
                 last_updated: Optional[_builtins.str] = None,
                 launch_container: Optional[_builtins.str] = None,
                 main_script: Optional[_builtins.str] = None,
                 optimization_id: Optional[_builtins.str] = None,
                 optimization_targets: Optional[_builtins.str] = None,
                 params_text: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 pull_latest: Optional[_builtins.bool] = None,
                 resume: Optional[_builtins.bool] = None,
                 resume_launch_id: Optional[_builtins.str] = None,
                 revision: Optional[_builtins.str] = None,
                 run_name: Optional[_builtins.str] = None,
                 schema_name: Optional[_builtins.str] = None,
                 session_id: Optional[_builtins.str] = None,
                 stub_run: Optional[_builtins.bool] = None,
                 tower_config: Optional[_builtins.str] = None,
                 user_secrets: Optional[Sequence[_builtins.str]] = None,
                 workspace_secrets: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str compute_env_id: Requires replacement if changed.
        :param _builtins.str pipeline: Requires replacement if changed.
        :param _builtins.str work_dir: Requires replacement if changed.
        :param Sequence[_builtins.str] config_profiles: Requires replacement if changed.
        :param _builtins.str config_text: Requires replacement if changed.
        :param _builtins.str date_created: Requires replacement if changed.
        :param _builtins.str entry_name: Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param Sequence[_builtins.float] label_ids: Requires replacement if changed.
        :param _builtins.str launch_container: Requires replacement if changed.
        :param _builtins.str main_script: Requires replacement if changed.
        :param _builtins.str optimization_id: Requires replacement if changed.
        :param _builtins.str optimization_targets: Requires replacement if changed.
        :param _builtins.str params_text: Requires replacement if changed.
        :param _builtins.str post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        :param _builtins.str pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        :param _builtins.bool pull_latest: Requires replacement if changed.
        :param _builtins.bool resume: Requires replacement if changed.
        :param _builtins.str revision: Requires replacement if changed.
        :param _builtins.str run_name: Requires replacement if changed.
        :param _builtins.str schema_name: Requires replacement if changed.
        :param _builtins.str session_id: Requires replacement if changed.
        :param _builtins.bool stub_run: Requires replacement if changed.
        :param _builtins.str tower_config: Requires replacement if changed.
        :param Sequence[_builtins.str] user_secrets: Requires replacement if changed.
        :param Sequence[_builtins.str] workspace_secrets: Requires replacement if changed.
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "pipeline", pipeline)
        pulumi.set(__self__, "work_dir", work_dir)
        if compute_env is not None:
            pulumi.set(__self__, "compute_env", compute_env)
        if config_profiles is not None:
            pulumi.set(__self__, "config_profiles", config_profiles)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if launch_container is not None:
            pulumi.set(__self__, "launch_container", launch_container)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if optimization_id is not None:
            pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_targets is not None:
            pulumi.set(__self__, "optimization_targets", optimization_targets)
        if params_text is not None:
            pulumi.set(__self__, "params_text", params_text)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if pull_latest is not None:
            pulumi.set(__self__, "pull_latest", pull_latest)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if resume_launch_id is not None:
            pulumi.set(__self__, "resume_launch_id", resume_launch_id)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if stub_run is not None:
            pulumi.set(__self__, "stub_run", stub_run)
        if tower_config is not None:
            pulumi.set(__self__, "tower_config", tower_config)
        if user_secrets is not None:
            pulumi.set(__self__, "user_secrets", user_secrets)
        if workspace_secrets is not None:
            pulumi.set(__self__, "workspace_secrets", workspace_secrets)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> _builtins.str:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> _builtins.str:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pipeline")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> Optional['outputs.ActionLaunchComputeEnv']:
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_profiles")

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_text")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "entry_name")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[Sequence[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_container")

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "main_script")

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_id")

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_targets")

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "params_text")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pull_latest")

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resume")

    @_builtins.property
    @pulumi.getter(name="resumeLaunchId")
    def resume_launch_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resume_launch_id")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "run_name")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "stub_run")

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "tower_config")

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_secrets")

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_secrets")


@pulumi.output_type
class ActionLaunchComputeEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeEnvId":
            suggest = "compute_env_id"
        elif key == "credentialsId":
            suggest = "credentials_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "lastUsed":
            suggest = "last_used"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_env_id: Optional[_builtins.str] = None,
                 config: Optional['outputs.ActionLaunchComputeEnvConfig'] = None,
                 credentials_id: Optional[_builtins.str] = None,
                 date_created: Optional[_builtins.str] = None,
                 deleted: Optional[_builtins.bool] = None,
                 description: Optional[_builtins.str] = None,
                 last_updated: Optional[_builtins.str] = None,
                 last_used: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 org_id: Optional[_builtins.float] = None,
                 platform: Optional[_builtins.str] = None,
                 primary: Optional[_builtins.bool] = None,
                 status: Optional[_builtins.str] = None,
                 workspace_id: Optional[_builtins.float] = None):
        """
        :param 'ActionLaunchComputeEnvConfigArgs' config: Configuration settings for compute environments including work directories,
               pre/post run scripts, and environment-specific parameters.
        :param _builtins.str platform: must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]
        :param _builtins.str status: must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        if compute_env_id is not None:
            pulumi.set(__self__, "compute_env_id", compute_env_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional['outputs.ActionLaunchComputeEnvConfig']:
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[_builtins.str]:
        """
        must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]
        """
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "primary")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class ActionLaunchComputeEnvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "altairPlatform":
            suggest = "altair_platform"
        elif key == "awsBatch":
            suggest = "aws_batch"
        elif key == "awsCloud":
            suggest = "aws_cloud"
        elif key == "azureBatch":
            suggest = "azure_batch"
        elif key == "eksPlatform":
            suggest = "eks_platform"
        elif key == "gkePlatform":
            suggest = "gke_platform"
        elif key == "googleBatch":
            suggest = "google_batch"
        elif key == "googleLifesciences":
            suggest = "google_lifesciences"
        elif key == "k8sPlatform":
            suggest = "k8s_platform"
        elif key == "lsfPlatform":
            suggest = "lsf_platform"
        elif key == "moabPlatform":
            suggest = "moab_platform"
        elif key == "seqeracomputePlatform":
            suggest = "seqeracompute_platform"
        elif key == "slurmPlatform":
            suggest = "slurm_platform"
        elif key == "ugePlatform":
            suggest = "uge_platform"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 altair_platform: Optional['outputs.ActionLaunchComputeEnvConfigAltairPlatform'] = None,
                 aws_batch: Optional['outputs.ActionLaunchComputeEnvConfigAwsBatch'] = None,
                 aws_cloud: Optional['outputs.ActionLaunchComputeEnvConfigAwsCloud'] = None,
                 azure_batch: Optional['outputs.ActionLaunchComputeEnvConfigAzureBatch'] = None,
                 eks_platform: Optional['outputs.ActionLaunchComputeEnvConfigEksPlatform'] = None,
                 gke_platform: Optional['outputs.ActionLaunchComputeEnvConfigGkePlatform'] = None,
                 google_batch: Optional['outputs.ActionLaunchComputeEnvConfigGoogleBatch'] = None,
                 google_lifesciences: Optional['outputs.ActionLaunchComputeEnvConfigGoogleLifesciences'] = None,
                 k8s_platform: Optional['outputs.ActionLaunchComputeEnvConfigK8sPlatform'] = None,
                 lsf_platform: Optional['outputs.ActionLaunchComputeEnvConfigLsfPlatform'] = None,
                 moab_platform: Optional['outputs.ActionLaunchComputeEnvConfigMoabPlatform'] = None,
                 seqeracompute_platform: Optional['outputs.ActionLaunchComputeEnvConfigSeqeracomputePlatform'] = None,
                 slurm_platform: Optional['outputs.ActionLaunchComputeEnvConfigSlurmPlatform'] = None,
                 uge_platform: Optional['outputs.ActionLaunchComputeEnvConfigUgePlatform'] = None):
        if altair_platform is not None:
            pulumi.set(__self__, "altair_platform", altair_platform)
        if aws_batch is not None:
            pulumi.set(__self__, "aws_batch", aws_batch)
        if aws_cloud is not None:
            pulumi.set(__self__, "aws_cloud", aws_cloud)
        if azure_batch is not None:
            pulumi.set(__self__, "azure_batch", azure_batch)
        if eks_platform is not None:
            pulumi.set(__self__, "eks_platform", eks_platform)
        if gke_platform is not None:
            pulumi.set(__self__, "gke_platform", gke_platform)
        if google_batch is not None:
            pulumi.set(__self__, "google_batch", google_batch)
        if google_lifesciences is not None:
            pulumi.set(__self__, "google_lifesciences", google_lifesciences)
        if k8s_platform is not None:
            pulumi.set(__self__, "k8s_platform", k8s_platform)
        if lsf_platform is not None:
            pulumi.set(__self__, "lsf_platform", lsf_platform)
        if moab_platform is not None:
            pulumi.set(__self__, "moab_platform", moab_platform)
        if seqeracompute_platform is not None:
            pulumi.set(__self__, "seqeracompute_platform", seqeracompute_platform)
        if slurm_platform is not None:
            pulumi.set(__self__, "slurm_platform", slurm_platform)
        if uge_platform is not None:
            pulumi.set(__self__, "uge_platform", uge_platform)

    @_builtins.property
    @pulumi.getter(name="altairPlatform")
    def altair_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigAltairPlatform']:
        return pulumi.get(self, "altair_platform")

    @_builtins.property
    @pulumi.getter(name="awsBatch")
    def aws_batch(self) -> Optional['outputs.ActionLaunchComputeEnvConfigAwsBatch']:
        return pulumi.get(self, "aws_batch")

    @_builtins.property
    @pulumi.getter(name="awsCloud")
    def aws_cloud(self) -> Optional['outputs.ActionLaunchComputeEnvConfigAwsCloud']:
        return pulumi.get(self, "aws_cloud")

    @_builtins.property
    @pulumi.getter(name="azureBatch")
    def azure_batch(self) -> Optional['outputs.ActionLaunchComputeEnvConfigAzureBatch']:
        return pulumi.get(self, "azure_batch")

    @_builtins.property
    @pulumi.getter(name="eksPlatform")
    def eks_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigEksPlatform']:
        return pulumi.get(self, "eks_platform")

    @_builtins.property
    @pulumi.getter(name="gkePlatform")
    def gke_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigGkePlatform']:
        return pulumi.get(self, "gke_platform")

    @_builtins.property
    @pulumi.getter(name="googleBatch")
    def google_batch(self) -> Optional['outputs.ActionLaunchComputeEnvConfigGoogleBatch']:
        return pulumi.get(self, "google_batch")

    @_builtins.property
    @pulumi.getter(name="googleLifesciences")
    def google_lifesciences(self) -> Optional['outputs.ActionLaunchComputeEnvConfigGoogleLifesciences']:
        return pulumi.get(self, "google_lifesciences")

    @_builtins.property
    @pulumi.getter(name="k8sPlatform")
    def k8s_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigK8sPlatform']:
        return pulumi.get(self, "k8s_platform")

    @_builtins.property
    @pulumi.getter(name="lsfPlatform")
    def lsf_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigLsfPlatform']:
        return pulumi.get(self, "lsf_platform")

    @_builtins.property
    @pulumi.getter(name="moabPlatform")
    def moab_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigMoabPlatform']:
        return pulumi.get(self, "moab_platform")

    @_builtins.property
    @pulumi.getter(name="seqeracomputePlatform")
    def seqeracompute_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigSeqeracomputePlatform']:
        return pulumi.get(self, "seqeracompute_platform")

    @_builtins.property
    @pulumi.getter(name="slurmPlatform")
    def slurm_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigSlurmPlatform']:
        return pulumi.get(self, "slurm_platform")

    @_builtins.property
    @pulumi.getter(name="ugePlatform")
    def uge_platform(self) -> Optional['outputs.ActionLaunchComputeEnvConfigUgePlatform']:
        return pulumi.get(self, "uge_platform")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAltairPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigAltairPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigAltairPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigAltairPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAltairPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAltairPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAltairPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAwsBatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cliPath":
            suggest = "cli_path"
        elif key == "computeJobRole":
            suggest = "compute_job_role"
        elif key == "computeQueue":
            suggest = "compute_queue"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "dragenQueue":
            suggest = "dragen_queue"
        elif key == "executionRole":
            suggest = "execution_role"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "fusionSnapshots":
            suggest = "fusion_snapshots"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headJobRole":
            suggest = "head_job_role"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "logGroup":
            suggest = "log_group"
        elif key == "lustreId":
            suggest = "lustre_id"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nvnmeStorageEnabled":
            suggest = "nvnme_storage_enabled"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigAwsBatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigAwsBatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigAwsBatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cli_path: Optional[_builtins.str] = None,
                 compute_job_role: Optional[_builtins.str] = None,
                 compute_queue: Optional[_builtins.str] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 dragen_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAwsBatchEnvironment']] = None,
                 execution_role: Optional[_builtins.str] = None,
                 forge: Optional['outputs.ActionLaunchComputeEnvConfigAwsBatchForge'] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 fusion_snapshots: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_job_role: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 log_group: Optional[_builtins.str] = None,
                 lustre_id: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nvnme_storage_enabled: Optional[_builtins.bool] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 storage_type: Optional[_builtins.str] = None,
                 volumes: Optional[Sequence[_builtins.str]] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAwsBatchEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional['outputs.ActionLaunchComputeEnvConfigAwsBatchForge']:
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAwsBatchEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAwsBatchForge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocStrategy":
            suggest = "alloc_strategy"
        elif key == "allowBuckets":
            suggest = "allow_buckets"
        elif key == "arm64Enabled":
            suggest = "arm64_enabled"
        elif key == "bidPercentage":
            suggest = "bid_percentage"
        elif key == "disposeOnDeletion":
            suggest = "dispose_on_deletion"
        elif key == "dragenAmiId":
            suggest = "dragen_ami_id"
        elif key == "dragenEnabled":
            suggest = "dragen_enabled"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "ebsAutoScale":
            suggest = "ebs_auto_scale"
        elif key == "ebsBlockSize":
            suggest = "ebs_block_size"
        elif key == "ebsBootSize":
            suggest = "ebs_boot_size"
        elif key == "ec2KeyPair":
            suggest = "ec2_key_pair"
        elif key == "ecsConfig":
            suggest = "ecs_config"
        elif key == "efsCreate":
            suggest = "efs_create"
        elif key == "efsId":
            suggest = "efs_id"
        elif key == "efsMount":
            suggest = "efs_mount"
        elif key == "fargateHeadEnabled":
            suggest = "fargate_head_enabled"
        elif key == "fsxMount":
            suggest = "fsx_mount"
        elif key == "fsxName":
            suggest = "fsx_name"
        elif key == "fsxSize":
            suggest = "fsx_size"
        elif key == "fusionEnabled":
            suggest = "fusion_enabled"
        elif key == "gpuEnabled":
            suggest = "gpu_enabled"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceTypes":
            suggest = "instance_types"
        elif key == "maxCpus":
            suggest = "max_cpus"
        elif key == "minCpus":
            suggest = "min_cpus"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigAwsBatchForge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigAwsBatchForge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigAwsBatchForge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alloc_strategy: Optional[_builtins.str] = None,
                 allow_buckets: Optional[Sequence[_builtins.str]] = None,
                 arm64_enabled: Optional[_builtins.bool] = None,
                 bid_percentage: Optional[_builtins.float] = None,
                 dispose_on_deletion: Optional[_builtins.bool] = None,
                 dragen_ami_id: Optional[_builtins.str] = None,
                 dragen_enabled: Optional[_builtins.bool] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 ebs_auto_scale: Optional[_builtins.bool] = None,
                 ebs_block_size: Optional[_builtins.float] = None,
                 ebs_boot_size: Optional[_builtins.float] = None,
                 ec2_key_pair: Optional[_builtins.str] = None,
                 ecs_config: Optional[_builtins.str] = None,
                 efs_create: Optional[_builtins.bool] = None,
                 efs_id: Optional[_builtins.str] = None,
                 efs_mount: Optional[_builtins.str] = None,
                 fargate_head_enabled: Optional[_builtins.bool] = None,
                 fsx_mount: Optional[_builtins.str] = None,
                 fsx_name: Optional[_builtins.str] = None,
                 fsx_size: Optional[_builtins.float] = None,
                 fusion_enabled: Optional[_builtins.bool] = None,
                 gpu_enabled: Optional[_builtins.bool] = None,
                 image_id: Optional[_builtins.str] = None,
                 instance_types: Optional[Sequence[_builtins.str]] = None,
                 max_cpus: Optional[_builtins.float] = None,
                 min_cpus: Optional[_builtins.float] = None,
                 security_groups: Optional[Sequence[_builtins.str]] = None,
                 subnets: Optional[Sequence[_builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 vpc_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        :param _builtins.str type: must be one of ["SPOT", "EC2"]
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[_builtins.str]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        """
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        must be one of ["SPOT", "EC2"]
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAwsCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowBuckets":
            suggest = "allow_buckets"
        elif key == "arm64Enabled":
            suggest = "arm64_enabled"
        elif key == "ebsBootSize":
            suggest = "ebs_boot_size"
        elif key == "ec2KeyPair":
            suggest = "ec2_key_pair"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "gpuEnabled":
            suggest = "gpu_enabled"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "logGroup":
            suggest = "log_group"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigAwsCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigAwsCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigAwsCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_buckets: Optional[Sequence[_builtins.str]] = None,
                 arm64_enabled: Optional[_builtins.bool] = None,
                 ebs_boot_size: Optional[_builtins.float] = None,
                 ec2_key_pair: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAwsCloudEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 gpu_enabled: Optional[_builtins.bool] = None,
                 image_id: Optional[_builtins.str] = None,
                 instance_profile_arn: Optional[_builtins.str] = None,
                 instance_type: Optional[_builtins.str] = None,
                 log_group: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 security_groups: Optional[Sequence[_builtins.str]] = None,
                 subnet_id: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_profile_arn is not None:
            pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAwsCloudEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_profile_arn")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAwsCloudEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAzureBatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoPoolMode":
            suggest = "auto_pool_mode"
        elif key == "deleteJobsOnCompletion":
            suggest = "delete_jobs_on_completion"
        elif key == "deletePoolsOnCompletion":
            suggest = "delete_pools_on_completion"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headPool":
            suggest = "head_pool"
        elif key == "managedIdentityClientId":
            suggest = "managed_identity_client_id"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "tokenDuration":
            suggest = "token_duration"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigAzureBatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigAzureBatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigAzureBatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_pool_mode: Optional[_builtins.bool] = None,
                 delete_jobs_on_completion: Optional[_builtins.str] = None,
                 delete_pools_on_completion: Optional[_builtins.bool] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAzureBatchEnvironment']] = None,
                 forge: Optional['outputs.ActionLaunchComputeEnvConfigAzureBatchForge'] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_pool: Optional[_builtins.str] = None,
                 managed_identity_client_id: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 token_duration: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str delete_jobs_on_completion: must be one of ["on_success", "always", "never"]
        :param Sequence['ActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if auto_pool_mode is not None:
            pulumi.set(__self__, "auto_pool_mode", auto_pool_mode)
        if delete_jobs_on_completion is not None:
            pulumi.set(__self__, "delete_jobs_on_completion", delete_jobs_on_completion)
        if delete_pools_on_completion is not None:
            pulumi.set(__self__, "delete_pools_on_completion", delete_pools_on_completion)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_pool is not None:
            pulumi.set(__self__, "head_pool", head_pool)
        if managed_identity_client_id is not None:
            pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if token_duration is not None:
            pulumi.set(__self__, "token_duration", token_duration)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="autoPoolMode")
    @_utilities.deprecated("""Deprecated""")
    def auto_pool_mode(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "auto_pool_mode")

    @_builtins.property
    @pulumi.getter(name="deleteJobsOnCompletion")
    def delete_jobs_on_completion(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "delete_jobs_on_completion")

    @_builtins.property
    @pulumi.getter(name="deletePoolsOnCompletion")
    def delete_pools_on_completion(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "delete_pools_on_completion")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigAzureBatchEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional['outputs.ActionLaunchComputeEnvConfigAzureBatchForge']:
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headPool")
    def head_pool(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_pool")

    @_builtins.property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "managed_identity_client_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tokenDuration")
    def token_duration(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "token_duration")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAzureBatchEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigAzureBatchForge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoScale":
            suggest = "auto_scale"
        elif key == "containerRegIds":
            suggest = "container_reg_ids"
        elif key == "disposeOnDeletion":
            suggest = "dispose_on_deletion"
        elif key == "vmCount":
            suggest = "vm_count"
        elif key == "vmType":
            suggest = "vm_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigAzureBatchForge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigAzureBatchForge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigAzureBatchForge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_scale: Optional[_builtins.bool] = None,
                 container_reg_ids: Optional[Sequence[_builtins.str]] = None,
                 dispose_on_deletion: Optional[_builtins.bool] = None,
                 vm_count: Optional[_builtins.float] = None,
                 vm_type: Optional[_builtins.str] = None):
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if container_reg_ids is not None:
            pulumi.set(__self__, "container_reg_ids", container_reg_ids)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "auto_scale")

    @_builtins.property
    @pulumi.getter(name="containerRegIds")
    def container_reg_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "container_reg_ids")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "vm_count")

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vm_type")


@pulumi.output_type
class ActionLaunchComputeEnvConfigEksPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "computeServiceAccount":
            suggest = "compute_service_account"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headPodSpec":
            suggest = "head_pod_spec"
        elif key == "headServiceAccount":
            suggest = "head_service_account"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "podCleanup":
            suggest = "pod_cleanup"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "servicePodSpec":
            suggest = "service_pod_spec"
        elif key == "sslCert":
            suggest = "ssl_cert"
        elif key == "storageClaimName":
            suggest = "storage_claim_name"
        elif key == "storageMountPath":
            suggest = "storage_mount_path"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigEksPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigEksPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigEksPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[_builtins.str] = None,
                 compute_service_account: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigEksPlatformEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_pod_spec: Optional[_builtins.str] = None,
                 head_service_account: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 pod_cleanup: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 server: Optional[_builtins.str] = None,
                 service_pod_spec: Optional[_builtins.str] = None,
                 ssl_cert: Optional[_builtins.str] = None,
                 storage_claim_name: Optional[_builtins.str] = None,
                 storage_mount_path: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_name: The AWS EKS cluster name
        :param Sequence['ActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str pod_cleanup: must be one of ["on_success", "always", "never"]
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str region: AWS region
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[_builtins.str]:
        """
        The AWS EKS cluster name
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigEksPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        AWS region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigEksPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigGkePlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "computeServiceAccount":
            suggest = "compute_service_account"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headPodSpec":
            suggest = "head_pod_spec"
        elif key == "headServiceAccount":
            suggest = "head_service_account"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "podCleanup":
            suggest = "pod_cleanup"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "servicePodSpec":
            suggest = "service_pod_spec"
        elif key == "sslCert":
            suggest = "ssl_cert"
        elif key == "storageClaimName":
            suggest = "storage_claim_name"
        elif key == "storageMountPath":
            suggest = "storage_mount_path"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigGkePlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigGkePlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigGkePlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[_builtins.str] = None,
                 compute_service_account: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigGkePlatformEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_pod_spec: Optional[_builtins.str] = None,
                 head_service_account: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 pod_cleanup: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 server: Optional[_builtins.str] = None,
                 service_pod_spec: Optional[_builtins.str] = None,
                 ssl_cert: Optional[_builtins.str] = None,
                 storage_claim_name: Optional[_builtins.str] = None,
                 storage_mount_path: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_name: The GKE cluster name
        :param Sequence['ActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str pod_cleanup: must be one of ["on_success", "always", "never"]
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str region: The GKE cluster region - or - zone
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[_builtins.str]:
        """
        The GKE cluster name
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigGkePlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        The GKE cluster region - or - zone
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigGkePlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigGoogleBatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSizeGb":
            suggest = "boot_disk_size_gb"
        elif key == "computeJobsInstanceTemplate":
            suggest = "compute_jobs_instance_template"
        elif key == "copyImage":
            suggest = "copy_image"
        elif key == "cpuPlatform":
            suggest = "cpu_platform"
        elif key == "debugMode":
            suggest = "debug_mode"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobInstanceTemplate":
            suggest = "head_job_instance_template"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nfsMount":
            suggest = "nfs_mount"
        elif key == "nfsTarget":
            suggest = "nfs_target"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "sshDaemon":
            suggest = "ssh_daemon"
        elif key == "sshImage":
            suggest = "ssh_image"
        elif key == "usePrivateAddress":
            suggest = "use_private_address"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigGoogleBatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigGoogleBatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigGoogleBatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[_builtins.float] = None,
                 compute_jobs_instance_template: Optional[_builtins.str] = None,
                 copy_image: Optional[_builtins.str] = None,
                 cpu_platform: Optional[_builtins.str] = None,
                 debug_mode: Optional[_builtins.float] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigGoogleBatchEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_instance_template: Optional[_builtins.str] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 location: Optional[_builtins.str] = None,
                 machine_type: Optional[_builtins.str] = None,
                 network: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nfs_mount: Optional[_builtins.str] = None,
                 nfs_target: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 service_account: Optional[_builtins.str] = None,
                 spot: Optional[_builtins.bool] = None,
                 ssh_daemon: Optional[_builtins.bool] = None,
                 ssh_image: Optional[_builtins.str] = None,
                 subnetwork: Optional[_builtins.str] = None,
                 use_private_address: Optional[_builtins.bool] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if compute_jobs_instance_template is not None:
            pulumi.set(__self__, "compute_jobs_instance_template", compute_jobs_instance_template)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if cpu_platform is not None:
            pulumi.set(__self__, "cpu_platform", cpu_platform)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_instance_template is not None:
            pulumi.set(__self__, "head_job_instance_template", head_job_instance_template)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if spot is not None:
            pulumi.set(__self__, "spot", spot)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="computeJobsInstanceTemplate")
    def compute_jobs_instance_template(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_jobs_instance_template")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="cpuPlatform")
    def cpu_platform(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cpu_platform")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigGoogleBatchEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobInstanceTemplate")
    def head_job_instance_template(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_instance_template")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_account")

    @_builtins.property
    @pulumi.getter
    def spot(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "spot")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter
    def subnetwork(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "subnetwork")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigGoogleBatchEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigGoogleLifesciences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSizeGb":
            suggest = "boot_disk_size_gb"
        elif key == "copyImage":
            suggest = "copy_image"
        elif key == "debugMode":
            suggest = "debug_mode"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nfsMount":
            suggest = "nfs_mount"
        elif key == "nfsTarget":
            suggest = "nfs_target"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "sshDaemon":
            suggest = "ssh_daemon"
        elif key == "sshImage":
            suggest = "ssh_image"
        elif key == "usePrivateAddress":
            suggest = "use_private_address"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigGoogleLifesciences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigGoogleLifesciences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigGoogleLifesciences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[_builtins.float] = None,
                 copy_image: Optional[_builtins.str] = None,
                 debug_mode: Optional[_builtins.float] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironment']] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 location: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nfs_mount: Optional[_builtins.str] = None,
                 nfs_target: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 preemptible: Optional[_builtins.bool] = None,
                 project_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 ssh_daemon: Optional[_builtins.bool] = None,
                 ssh_image: Optional[_builtins.str] = None,
                 use_private_address: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None,
                 zones: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def preemptible(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "preemptible")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "zones")


@pulumi.output_type
class ActionLaunchComputeEnvConfigGoogleLifesciencesEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigK8sPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeServiceAccount":
            suggest = "compute_service_account"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headPodSpec":
            suggest = "head_pod_spec"
        elif key == "headServiceAccount":
            suggest = "head_service_account"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "podCleanup":
            suggest = "pod_cleanup"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "servicePodSpec":
            suggest = "service_pod_spec"
        elif key == "sslCert":
            suggest = "ssl_cert"
        elif key == "storageClaimName":
            suggest = "storage_claim_name"
        elif key == "storageMountPath":
            suggest = "storage_mount_path"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigK8sPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigK8sPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigK8sPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_service_account: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigK8sPlatformEnvironment']] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_pod_spec: Optional[_builtins.str] = None,
                 head_service_account: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 pod_cleanup: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 server: Optional[_builtins.str] = None,
                 service_pod_spec: Optional[_builtins.str] = None,
                 ssl_cert: Optional[_builtins.str] = None,
                 storage_claim_name: Optional[_builtins.str] = None,
                 storage_mount_path: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str pod_cleanup: must be one of ["on_success", "always", "never"]
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigK8sPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]
        """
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigK8sPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigLsfPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "perJobMemLimit":
            suggest = "per_job_mem_limit"
        elif key == "perTaskReserve":
            suggest = "per_task_reserve"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "unitForLimits":
            suggest = "unit_for_limits"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigLsfPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigLsfPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigLsfPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigLsfPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 per_job_mem_limit: Optional[_builtins.bool] = None,
                 per_task_reserve: Optional[_builtins.bool] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 unit_for_limits: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if per_job_mem_limit is not None:
            pulumi.set(__self__, "per_job_mem_limit", per_job_mem_limit)
        if per_task_reserve is not None:
            pulumi.set(__self__, "per_task_reserve", per_task_reserve)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if unit_for_limits is not None:
            pulumi.set(__self__, "unit_for_limits", unit_for_limits)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigLsfPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="perJobMemLimit")
    def per_job_mem_limit(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "per_job_mem_limit")

    @_builtins.property
    @pulumi.getter(name="perTaskReserve")
    def per_task_reserve(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "per_task_reserve")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="unitForLimits")
    def unit_for_limits(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unit_for_limits")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigLsfPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigMoabPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigMoabPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigMoabPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigMoabPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigMoabPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigMoabPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigMoabPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigSeqeracomputePlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cliPath":
            suggest = "cli_path"
        elif key == "computeJobRole":
            suggest = "compute_job_role"
        elif key == "computeQueue":
            suggest = "compute_queue"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "dragenQueue":
            suggest = "dragen_queue"
        elif key == "executionRole":
            suggest = "execution_role"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "fusionSnapshots":
            suggest = "fusion_snapshots"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headJobRole":
            suggest = "head_job_role"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "logGroup":
            suggest = "log_group"
        elif key == "lustreId":
            suggest = "lustre_id"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nvnmeStorageEnabled":
            suggest = "nvnme_storage_enabled"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigSeqeracomputePlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigSeqeracomputePlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigSeqeracomputePlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cli_path: Optional[_builtins.str] = None,
                 compute_job_role: Optional[_builtins.str] = None,
                 compute_queue: Optional[_builtins.str] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 dragen_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironment']] = None,
                 execution_role: Optional[_builtins.str] = None,
                 forge: Optional['outputs.ActionLaunchComputeEnvConfigSeqeracomputePlatformForge'] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 fusion_snapshots: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_job_role: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 log_group: Optional[_builtins.str] = None,
                 lustre_id: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nvnme_storage_enabled: Optional[_builtins.bool] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 storage_type: Optional[_builtins.str] = None,
                 volumes: Optional[Sequence[_builtins.str]] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional['outputs.ActionLaunchComputeEnvConfigSeqeracomputePlatformForge']:
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigSeqeracomputePlatformForge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocStrategy":
            suggest = "alloc_strategy"
        elif key == "allowBuckets":
            suggest = "allow_buckets"
        elif key == "arm64Enabled":
            suggest = "arm64_enabled"
        elif key == "bidPercentage":
            suggest = "bid_percentage"
        elif key == "disposeOnDeletion":
            suggest = "dispose_on_deletion"
        elif key == "dragenAmiId":
            suggest = "dragen_ami_id"
        elif key == "dragenEnabled":
            suggest = "dragen_enabled"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "ebsAutoScale":
            suggest = "ebs_auto_scale"
        elif key == "ebsBlockSize":
            suggest = "ebs_block_size"
        elif key == "ebsBootSize":
            suggest = "ebs_boot_size"
        elif key == "ec2KeyPair":
            suggest = "ec2_key_pair"
        elif key == "ecsConfig":
            suggest = "ecs_config"
        elif key == "efsCreate":
            suggest = "efs_create"
        elif key == "efsId":
            suggest = "efs_id"
        elif key == "efsMount":
            suggest = "efs_mount"
        elif key == "fargateHeadEnabled":
            suggest = "fargate_head_enabled"
        elif key == "fsxMount":
            suggest = "fsx_mount"
        elif key == "fsxName":
            suggest = "fsx_name"
        elif key == "fsxSize":
            suggest = "fsx_size"
        elif key == "fusionEnabled":
            suggest = "fusion_enabled"
        elif key == "gpuEnabled":
            suggest = "gpu_enabled"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceTypes":
            suggest = "instance_types"
        elif key == "maxCpus":
            suggest = "max_cpus"
        elif key == "minCpus":
            suggest = "min_cpus"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigSeqeracomputePlatformForge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigSeqeracomputePlatformForge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigSeqeracomputePlatformForge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alloc_strategy: Optional[_builtins.str] = None,
                 allow_buckets: Optional[Sequence[_builtins.str]] = None,
                 arm64_enabled: Optional[_builtins.bool] = None,
                 bid_percentage: Optional[_builtins.float] = None,
                 dispose_on_deletion: Optional[_builtins.bool] = None,
                 dragen_ami_id: Optional[_builtins.str] = None,
                 dragen_enabled: Optional[_builtins.bool] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 ebs_auto_scale: Optional[_builtins.bool] = None,
                 ebs_block_size: Optional[_builtins.float] = None,
                 ebs_boot_size: Optional[_builtins.float] = None,
                 ec2_key_pair: Optional[_builtins.str] = None,
                 ecs_config: Optional[_builtins.str] = None,
                 efs_create: Optional[_builtins.bool] = None,
                 efs_id: Optional[_builtins.str] = None,
                 efs_mount: Optional[_builtins.str] = None,
                 fargate_head_enabled: Optional[_builtins.bool] = None,
                 fsx_mount: Optional[_builtins.str] = None,
                 fsx_name: Optional[_builtins.str] = None,
                 fsx_size: Optional[_builtins.float] = None,
                 fusion_enabled: Optional[_builtins.bool] = None,
                 gpu_enabled: Optional[_builtins.bool] = None,
                 image_id: Optional[_builtins.str] = None,
                 instance_types: Optional[Sequence[_builtins.str]] = None,
                 max_cpus: Optional[_builtins.float] = None,
                 min_cpus: Optional[_builtins.float] = None,
                 security_groups: Optional[Sequence[_builtins.str]] = None,
                 subnets: Optional[Sequence[_builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 vpc_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        :param _builtins.str type: must be one of ["SPOT", "EC2"]
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[_builtins.str]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]
        """
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        must be one of ["SPOT", "EC2"]
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ActionLaunchComputeEnvConfigSlurmPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigSlurmPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigSlurmPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigSlurmPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigSlurmPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigSlurmPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigSlurmPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionLaunchComputeEnvConfigUgePlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionLaunchComputeEnvConfigUgePlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionLaunchComputeEnvConfigUgePlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionLaunchComputeEnvConfigUgePlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ActionLaunchComputeEnvConfigUgePlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence['ActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ActionLaunchComputeEnvConfigUgePlatformEnvironment']]:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ActionLaunchComputeEnvConfigUgePlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsId":
            suggest = "credentials_id"
        elif key == "computeEnvId":
            suggest = "compute_env_id"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "lastUsed":
            suggest = "last_used"
        elif key == "managedIdentityId":
            suggest = "managed_identity_id"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: 'outputs.ComputeEnvComputeEnvConfig',
                 credentials_id: _builtins.str,
                 name: _builtins.str,
                 platform: _builtins.str,
                 compute_env_id: Optional[_builtins.str] = None,
                 date_created: Optional[_builtins.str] = None,
                 deleted: Optional[_builtins.bool] = None,
                 description: Optional[_builtins.str] = None,
                 labels: Optional[Sequence['outputs.ComputeEnvComputeEnvLabel']] = None,
                 last_updated: Optional[_builtins.str] = None,
                 last_used: Optional[_builtins.str] = None,
                 managed_identity_id: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 org_id: Optional[_builtins.float] = None,
                 primary: Optional[_builtins.bool] = None,
                 status: Optional[_builtins.str] = None,
                 workspace_id: Optional[_builtins.float] = None):
        """
        :param 'ComputeEnvComputeEnvConfigArgs' config: Configuration settings for compute environments including work directories,
               pre/post run scripts, and environment-specific parameters.
               Requires replacement if changed.
        :param _builtins.str credentials_id: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str platform: must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]; Requires replacement if changed.
        :param _builtins.str description: Requires replacement if changed.
        :param _builtins.str message: Requires replacement if changed.
        :param _builtins.str status: must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        if compute_env_id is not None:
            pulumi.set(__self__, "compute_env_id", compute_env_id)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if managed_identity_id is not None:
            pulumi.set(__self__, "managed_identity_id", managed_identity_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def config(self) -> 'outputs.ComputeEnvComputeEnvConfig':
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        Requires replacement if changed.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> _builtins.str:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        """
        must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]; Requires replacement if changed.
        """
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvLabel']]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "managed_identity_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "primary")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class ComputeEnvComputeEnvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "altairPlatform":
            suggest = "altair_platform"
        elif key == "awsBatch":
            suggest = "aws_batch"
        elif key == "awsCloud":
            suggest = "aws_cloud"
        elif key == "azureBatch":
            suggest = "azure_batch"
        elif key == "eksPlatform":
            suggest = "eks_platform"
        elif key == "gkePlatform":
            suggest = "gke_platform"
        elif key == "googleBatch":
            suggest = "google_batch"
        elif key == "googleLifesciences":
            suggest = "google_lifesciences"
        elif key == "k8sPlatform":
            suggest = "k8s_platform"
        elif key == "lsfPlatform":
            suggest = "lsf_platform"
        elif key == "moabPlatform":
            suggest = "moab_platform"
        elif key == "seqeracomputePlatform":
            suggest = "seqeracompute_platform"
        elif key == "slurmPlatform":
            suggest = "slurm_platform"
        elif key == "ugePlatform":
            suggest = "uge_platform"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 altair_platform: Optional['outputs.ComputeEnvComputeEnvConfigAltairPlatform'] = None,
                 aws_batch: Optional['outputs.ComputeEnvComputeEnvConfigAwsBatch'] = None,
                 aws_cloud: Optional['outputs.ComputeEnvComputeEnvConfigAwsCloud'] = None,
                 azure_batch: Optional['outputs.ComputeEnvComputeEnvConfigAzureBatch'] = None,
                 eks_platform: Optional['outputs.ComputeEnvComputeEnvConfigEksPlatform'] = None,
                 gke_platform: Optional['outputs.ComputeEnvComputeEnvConfigGkePlatform'] = None,
                 google_batch: Optional['outputs.ComputeEnvComputeEnvConfigGoogleBatch'] = None,
                 google_lifesciences: Optional['outputs.ComputeEnvComputeEnvConfigGoogleLifesciences'] = None,
                 k8s_platform: Optional['outputs.ComputeEnvComputeEnvConfigK8sPlatform'] = None,
                 lsf_platform: Optional['outputs.ComputeEnvComputeEnvConfigLsfPlatform'] = None,
                 moab_platform: Optional['outputs.ComputeEnvComputeEnvConfigMoabPlatform'] = None,
                 seqeracompute_platform: Optional['outputs.ComputeEnvComputeEnvConfigSeqeracomputePlatform'] = None,
                 slurm_platform: Optional['outputs.ComputeEnvComputeEnvConfigSlurmPlatform'] = None,
                 uge_platform: Optional['outputs.ComputeEnvComputeEnvConfigUgePlatform'] = None):
        """
        :param 'ComputeEnvComputeEnvConfigAltairPlatformArgs' altair_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigAwsBatchArgs' aws_batch: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigAwsCloudArgs' aws_cloud: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigAzureBatchArgs' azure_batch: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigEksPlatformArgs' eks_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigGkePlatformArgs' gke_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigGoogleBatchArgs' google_batch: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigGoogleLifesciencesArgs' google_lifesciences: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigK8sPlatformArgs' k8s_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigLsfPlatformArgs' lsf_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigMoabPlatformArgs' moab_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigSeqeracomputePlatformArgs' seqeracompute_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigSlurmPlatformArgs' slurm_platform: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigUgePlatformArgs' uge_platform: Requires replacement if changed.
        """
        if altair_platform is not None:
            pulumi.set(__self__, "altair_platform", altair_platform)
        if aws_batch is not None:
            pulumi.set(__self__, "aws_batch", aws_batch)
        if aws_cloud is not None:
            pulumi.set(__self__, "aws_cloud", aws_cloud)
        if azure_batch is not None:
            pulumi.set(__self__, "azure_batch", azure_batch)
        if eks_platform is not None:
            pulumi.set(__self__, "eks_platform", eks_platform)
        if gke_platform is not None:
            pulumi.set(__self__, "gke_platform", gke_platform)
        if google_batch is not None:
            pulumi.set(__self__, "google_batch", google_batch)
        if google_lifesciences is not None:
            pulumi.set(__self__, "google_lifesciences", google_lifesciences)
        if k8s_platform is not None:
            pulumi.set(__self__, "k8s_platform", k8s_platform)
        if lsf_platform is not None:
            pulumi.set(__self__, "lsf_platform", lsf_platform)
        if moab_platform is not None:
            pulumi.set(__self__, "moab_platform", moab_platform)
        if seqeracompute_platform is not None:
            pulumi.set(__self__, "seqeracompute_platform", seqeracompute_platform)
        if slurm_platform is not None:
            pulumi.set(__self__, "slurm_platform", slurm_platform)
        if uge_platform is not None:
            pulumi.set(__self__, "uge_platform", uge_platform)

    @_builtins.property
    @pulumi.getter(name="altairPlatform")
    def altair_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigAltairPlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "altair_platform")

    @_builtins.property
    @pulumi.getter(name="awsBatch")
    def aws_batch(self) -> Optional['outputs.ComputeEnvComputeEnvConfigAwsBatch']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "aws_batch")

    @_builtins.property
    @pulumi.getter(name="awsCloud")
    def aws_cloud(self) -> Optional['outputs.ComputeEnvComputeEnvConfigAwsCloud']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "aws_cloud")

    @_builtins.property
    @pulumi.getter(name="azureBatch")
    def azure_batch(self) -> Optional['outputs.ComputeEnvComputeEnvConfigAzureBatch']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "azure_batch")

    @_builtins.property
    @pulumi.getter(name="eksPlatform")
    def eks_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigEksPlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "eks_platform")

    @_builtins.property
    @pulumi.getter(name="gkePlatform")
    def gke_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigGkePlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gke_platform")

    @_builtins.property
    @pulumi.getter(name="googleBatch")
    def google_batch(self) -> Optional['outputs.ComputeEnvComputeEnvConfigGoogleBatch']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "google_batch")

    @_builtins.property
    @pulumi.getter(name="googleLifesciences")
    def google_lifesciences(self) -> Optional['outputs.ComputeEnvComputeEnvConfigGoogleLifesciences']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "google_lifesciences")

    @_builtins.property
    @pulumi.getter(name="k8sPlatform")
    def k8s_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigK8sPlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "k8s_platform")

    @_builtins.property
    @pulumi.getter(name="lsfPlatform")
    def lsf_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigLsfPlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lsf_platform")

    @_builtins.property
    @pulumi.getter(name="moabPlatform")
    def moab_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigMoabPlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "moab_platform")

    @_builtins.property
    @pulumi.getter(name="seqeracomputePlatform")
    def seqeracompute_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigSeqeracomputePlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "seqeracompute_platform")

    @_builtins.property
    @pulumi.getter(name="slurmPlatform")
    def slurm_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigSlurmPlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "slurm_platform")

    @_builtins.property
    @pulumi.getter(name="ugePlatform")
    def uge_platform(self) -> Optional['outputs.ComputeEnvComputeEnvConfigUgePlatform']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "uge_platform")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAltairPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigAltairPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigAltairPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigAltairPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAltairPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str compute_queue: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.str head_job_options: Requires replacement if changed.
        :param _builtins.str head_queue: Requires replacement if changed.
        :param _builtins.str host_name: Requires replacement if changed.
        :param _builtins.str launch_dir: Requires replacement if changed.
        :param _builtins.float max_queue_size: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.float port: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.bool propagate_head_job_options: Requires replacement if changed.
        :param _builtins.str user_name: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAltairPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAltairPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAwsBatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cliPath":
            suggest = "cli_path"
        elif key == "computeJobRole":
            suggest = "compute_job_role"
        elif key == "computeQueue":
            suggest = "compute_queue"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "dragenQueue":
            suggest = "dragen_queue"
        elif key == "executionRole":
            suggest = "execution_role"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "fusionSnapshots":
            suggest = "fusion_snapshots"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headJobRole":
            suggest = "head_job_role"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "logGroup":
            suggest = "log_group"
        elif key == "lustreId":
            suggest = "lustre_id"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nvnmeStorageEnabled":
            suggest = "nvnme_storage_enabled"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigAwsBatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigAwsBatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigAwsBatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cli_path: Optional[_builtins.str] = None,
                 compute_job_role: Optional[_builtins.str] = None,
                 compute_queue: Optional[_builtins.str] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 dragen_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAwsBatchEnvironment']] = None,
                 execution_role: Optional[_builtins.str] = None,
                 forge: Optional['outputs.ComputeEnvComputeEnvConfigAwsBatchForge'] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 fusion_snapshots: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_job_role: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 log_group: Optional[_builtins.str] = None,
                 lustre_id: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nvnme_storage_enabled: Optional[_builtins.bool] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 storage_type: Optional[_builtins.str] = None,
                 volumes: Optional[Sequence[_builtins.str]] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str cli_path: Requires replacement if changed.
        :param _builtins.str compute_job_role: Requires replacement if changed.
        :param _builtins.str compute_queue: Requires replacement if changed.
        :param _builtins.str dragen_instance_type: Requires replacement if changed.
        :param _builtins.str dragen_queue: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.str execution_role: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigAwsBatchForgeArgs' forge: Not Null; Requires replacement if changed.
        :param _builtins.bool fusion2_enabled: Requires replacement if changed.
        :param _builtins.bool fusion_snapshots: Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param _builtins.str head_job_role: Requires replacement if changed.
        :param _builtins.str head_queue: Requires replacement if changed.
        :param _builtins.str log_group: Requires replacement if changed.
        :param _builtins.str lustre_id: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.bool nvnme_storage_enabled: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str region: Not Null; Requires replacement if changed.
        :param _builtins.str storage_type: Requires replacement if changed.
        :param Sequence[_builtins.str] volumes: Requires replacement if changed.
        :param _builtins.bool wave_enabled: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAwsBatchEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional['outputs.ComputeEnvComputeEnvConfigAwsBatchForge']:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAwsBatchEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAwsBatchForge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocStrategy":
            suggest = "alloc_strategy"
        elif key == "allowBuckets":
            suggest = "allow_buckets"
        elif key == "arm64Enabled":
            suggest = "arm64_enabled"
        elif key == "bidPercentage":
            suggest = "bid_percentage"
        elif key == "disposeOnDeletion":
            suggest = "dispose_on_deletion"
        elif key == "dragenAmiId":
            suggest = "dragen_ami_id"
        elif key == "dragenEnabled":
            suggest = "dragen_enabled"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "ebsAutoScale":
            suggest = "ebs_auto_scale"
        elif key == "ebsBlockSize":
            suggest = "ebs_block_size"
        elif key == "ebsBootSize":
            suggest = "ebs_boot_size"
        elif key == "ec2KeyPair":
            suggest = "ec2_key_pair"
        elif key == "ecsConfig":
            suggest = "ecs_config"
        elif key == "efsCreate":
            suggest = "efs_create"
        elif key == "efsId":
            suggest = "efs_id"
        elif key == "efsMount":
            suggest = "efs_mount"
        elif key == "fargateHeadEnabled":
            suggest = "fargate_head_enabled"
        elif key == "fsxMount":
            suggest = "fsx_mount"
        elif key == "fsxName":
            suggest = "fsx_name"
        elif key == "fsxSize":
            suggest = "fsx_size"
        elif key == "fusionEnabled":
            suggest = "fusion_enabled"
        elif key == "gpuEnabled":
            suggest = "gpu_enabled"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceTypes":
            suggest = "instance_types"
        elif key == "maxCpus":
            suggest = "max_cpus"
        elif key == "minCpus":
            suggest = "min_cpus"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigAwsBatchForge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigAwsBatchForge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigAwsBatchForge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alloc_strategy: Optional[_builtins.str] = None,
                 allow_buckets: Optional[Sequence[_builtins.str]] = None,
                 arm64_enabled: Optional[_builtins.bool] = None,
                 bid_percentage: Optional[_builtins.float] = None,
                 dispose_on_deletion: Optional[_builtins.bool] = None,
                 dragen_ami_id: Optional[_builtins.str] = None,
                 dragen_enabled: Optional[_builtins.bool] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 ebs_auto_scale: Optional[_builtins.bool] = None,
                 ebs_block_size: Optional[_builtins.float] = None,
                 ebs_boot_size: Optional[_builtins.float] = None,
                 ec2_key_pair: Optional[_builtins.str] = None,
                 ecs_config: Optional[_builtins.str] = None,
                 efs_create: Optional[_builtins.bool] = None,
                 efs_id: Optional[_builtins.str] = None,
                 efs_mount: Optional[_builtins.str] = None,
                 fargate_head_enabled: Optional[_builtins.bool] = None,
                 fsx_mount: Optional[_builtins.str] = None,
                 fsx_name: Optional[_builtins.str] = None,
                 fsx_size: Optional[_builtins.float] = None,
                 fusion_enabled: Optional[_builtins.bool] = None,
                 gpu_enabled: Optional[_builtins.bool] = None,
                 image_id: Optional[_builtins.str] = None,
                 instance_types: Optional[Sequence[_builtins.str]] = None,
                 max_cpus: Optional[_builtins.float] = None,
                 min_cpus: Optional[_builtins.float] = None,
                 security_groups: Optional[Sequence[_builtins.str]] = None,
                 subnets: Optional[Sequence[_builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 vpc_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        :param Sequence[_builtins.str] allow_buckets: Requires replacement if changed.
        :param _builtins.bool arm64_enabled: Requires replacement if changed.
        :param _builtins.float bid_percentage: Requires replacement if changed.
        :param _builtins.bool dispose_on_deletion: Requires replacement if changed.
        :param _builtins.str dragen_ami_id: Requires replacement if changed.
        :param _builtins.bool dragen_enabled: Requires replacement if changed.
        :param _builtins.str dragen_instance_type: Requires replacement if changed.
        :param _builtins.bool ebs_auto_scale: Requires replacement if changed.
        :param _builtins.float ebs_block_size: Requires replacement if changed.
        :param _builtins.float ebs_boot_size: Requires replacement if changed.
        :param _builtins.str ec2_key_pair: Requires replacement if changed.
        :param _builtins.str ecs_config: Requires replacement if changed.
        :param _builtins.bool efs_create: Requires replacement if changed.
        :param _builtins.str efs_id: Requires replacement if changed.
        :param _builtins.str efs_mount: Requires replacement if changed.
        :param _builtins.bool fargate_head_enabled: Requires replacement if changed.
        :param _builtins.str fsx_mount: Requires replacement if changed.
        :param _builtins.str fsx_name: Requires replacement if changed.
        :param _builtins.float fsx_size: Requires replacement if changed.
        :param _builtins.bool fusion_enabled: Requires replacement if changed.
        :param _builtins.bool gpu_enabled: Requires replacement if changed.
        :param _builtins.str image_id: Requires replacement if changed.
        :param Sequence[_builtins.str] instance_types: Requires replacement if changed.
        :param _builtins.float max_cpus: Not Null; Requires replacement if changed.
        :param _builtins.float min_cpus: Not Null; Requires replacement if changed.
        :param Sequence[_builtins.str] security_groups: Requires replacement if changed.
        :param Sequence[_builtins.str] subnets: Requires replacement if changed.
        :param _builtins.str type: Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        :param _builtins.str vpc_id: Requires replacement if changed.
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[_builtins.str]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        """
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[_builtins.float]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[_builtins.float]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAwsCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowBuckets":
            suggest = "allow_buckets"
        elif key == "arm64Enabled":
            suggest = "arm64_enabled"
        elif key == "ebsBootSize":
            suggest = "ebs_boot_size"
        elif key == "ec2KeyPair":
            suggest = "ec2_key_pair"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "gpuEnabled":
            suggest = "gpu_enabled"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "logGroup":
            suggest = "log_group"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigAwsCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigAwsCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigAwsCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_buckets: Optional[Sequence[_builtins.str]] = None,
                 arm64_enabled: Optional[_builtins.bool] = None,
                 ebs_boot_size: Optional[_builtins.float] = None,
                 ec2_key_pair: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAwsCloudEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 gpu_enabled: Optional[_builtins.bool] = None,
                 image_id: Optional[_builtins.str] = None,
                 instance_profile_arn: Optional[_builtins.str] = None,
                 instance_type: Optional[_builtins.str] = None,
                 log_group: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 security_groups: Optional[Sequence[_builtins.str]] = None,
                 subnet_id: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] allow_buckets: Requires replacement if changed.
        :param _builtins.bool arm64_enabled: Requires replacement if changed.
        :param _builtins.float ebs_boot_size: Requires replacement if changed.
        :param _builtins.str ec2_key_pair: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.bool fusion2_enabled: Requires replacement if changed.
        :param _builtins.bool gpu_enabled: Requires replacement if changed.
        :param _builtins.str image_id: Requires replacement if changed.
        :param _builtins.str instance_profile_arn: Requires replacement if changed.
        :param _builtins.str instance_type: Requires replacement if changed.
        :param _builtins.str log_group: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str region: Not Null; Requires replacement if changed.
        :param Sequence[_builtins.str] security_groups: Requires replacement if changed.
        :param _builtins.str subnet_id: Requires replacement if changed.
        :param _builtins.bool wave_enabled: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_profile_arn is not None:
            pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAwsCloudEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_profile_arn")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAwsCloudEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAzureBatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoPoolMode":
            suggest = "auto_pool_mode"
        elif key == "deleteJobsOnCompletion":
            suggest = "delete_jobs_on_completion"
        elif key == "deletePoolsOnCompletion":
            suggest = "delete_pools_on_completion"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headPool":
            suggest = "head_pool"
        elif key == "managedIdentityClientId":
            suggest = "managed_identity_client_id"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "tokenDuration":
            suggest = "token_duration"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigAzureBatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigAzureBatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigAzureBatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_pool_mode: Optional[_builtins.bool] = None,
                 delete_jobs_on_completion: Optional[_builtins.str] = None,
                 delete_pools_on_completion: Optional[_builtins.bool] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAzureBatchEnvironment']] = None,
                 forge: Optional['outputs.ComputeEnvComputeEnvConfigAzureBatchForge'] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_pool: Optional[_builtins.str] = None,
                 managed_identity_client_id: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 token_duration: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.bool auto_pool_mode: Requires replacement if changed.
        :param _builtins.str delete_jobs_on_completion: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param _builtins.bool delete_pools_on_completion: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigAzureBatchForgeArgs' forge: Not Null; Requires replacement if changed.
        :param _builtins.bool fusion2_enabled: Requires replacement if changed.
        :param _builtins.str head_pool: Requires replacement if changed.
        :param _builtins.str managed_identity_client_id: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str region: Not Null; Requires replacement if changed.
        :param _builtins.str token_duration: Requires replacement if changed.
        :param _builtins.bool wave_enabled: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if auto_pool_mode is not None:
            pulumi.set(__self__, "auto_pool_mode", auto_pool_mode)
        if delete_jobs_on_completion is not None:
            pulumi.set(__self__, "delete_jobs_on_completion", delete_jobs_on_completion)
        if delete_pools_on_completion is not None:
            pulumi.set(__self__, "delete_pools_on_completion", delete_pools_on_completion)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_pool is not None:
            pulumi.set(__self__, "head_pool", head_pool)
        if managed_identity_client_id is not None:
            pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if token_duration is not None:
            pulumi.set(__self__, "token_duration", token_duration)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="autoPoolMode")
    @_utilities.deprecated("""Deprecated""")
    def auto_pool_mode(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "auto_pool_mode")

    @_builtins.property
    @pulumi.getter(name="deleteJobsOnCompletion")
    def delete_jobs_on_completion(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "delete_jobs_on_completion")

    @_builtins.property
    @pulumi.getter(name="deletePoolsOnCompletion")
    def delete_pools_on_completion(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "delete_pools_on_completion")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigAzureBatchEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional['outputs.ComputeEnvComputeEnvConfigAzureBatchForge']:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headPool")
    def head_pool(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pool")

    @_builtins.property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "managed_identity_client_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tokenDuration")
    def token_duration(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "token_duration")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAzureBatchEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigAzureBatchForge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoScale":
            suggest = "auto_scale"
        elif key == "containerRegIds":
            suggest = "container_reg_ids"
        elif key == "disposeOnDeletion":
            suggest = "dispose_on_deletion"
        elif key == "vmCount":
            suggest = "vm_count"
        elif key == "vmType":
            suggest = "vm_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigAzureBatchForge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigAzureBatchForge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigAzureBatchForge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_scale: Optional[_builtins.bool] = None,
                 container_reg_ids: Optional[Sequence[_builtins.str]] = None,
                 dispose_on_deletion: Optional[_builtins.bool] = None,
                 vm_count: Optional[_builtins.float] = None,
                 vm_type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool auto_scale: Requires replacement if changed.
        :param Sequence[_builtins.str] container_reg_ids: Requires replacement if changed.
        :param _builtins.bool dispose_on_deletion: Requires replacement if changed.
        :param _builtins.float vm_count: Not Null; Requires replacement if changed.
        :param _builtins.str vm_type: Requires replacement if changed.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if container_reg_ids is not None:
            pulumi.set(__self__, "container_reg_ids", container_reg_ids)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "auto_scale")

    @_builtins.property
    @pulumi.getter(name="containerRegIds")
    def container_reg_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "container_reg_ids")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[_builtins.float]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "vm_count")

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "vm_type")


@pulumi.output_type
class ComputeEnvComputeEnvConfigEksPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "computeServiceAccount":
            suggest = "compute_service_account"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headPodSpec":
            suggest = "head_pod_spec"
        elif key == "headServiceAccount":
            suggest = "head_service_account"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "podCleanup":
            suggest = "pod_cleanup"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "servicePodSpec":
            suggest = "service_pod_spec"
        elif key == "sslCert":
            suggest = "ssl_cert"
        elif key == "storageClaimName":
            suggest = "storage_claim_name"
        elif key == "storageMountPath":
            suggest = "storage_mount_path"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigEksPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigEksPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigEksPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[_builtins.str] = None,
                 compute_service_account: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigEksPlatformEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_pod_spec: Optional[_builtins.str] = None,
                 head_service_account: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 pod_cleanup: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 server: Optional[_builtins.str] = None,
                 service_pod_spec: Optional[_builtins.str] = None,
                 ssl_cert: Optional[_builtins.str] = None,
                 storage_claim_name: Optional[_builtins.str] = None,
                 storage_mount_path: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_name: The AWS EKS cluster name. Not Null; Requires replacement if changed.
        :param _builtins.str compute_service_account: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.bool fusion2_enabled: Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param _builtins.str head_pod_spec: Requires replacement if changed.
        :param _builtins.str head_service_account: Not Null; Requires replacement if changed.
        :param _builtins.str namespace: Not Null; Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.str pod_cleanup: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str region: AWS region. Not Null; Requires replacement if changed.
        :param _builtins.str server: Not Null; Requires replacement if changed.
        :param _builtins.str service_pod_spec: Requires replacement if changed.
        :param _builtins.str ssl_cert: Not Null; Requires replacement if changed.
        :param _builtins.str storage_claim_name: Not Null; Requires replacement if changed.
        :param _builtins.str storage_mount_path: Requires replacement if changed.
        :param _builtins.bool wave_enabled: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[_builtins.str]:
        """
        The AWS EKS cluster name. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigEksPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        AWS region. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigEksPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigGkePlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "computeServiceAccount":
            suggest = "compute_service_account"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headPodSpec":
            suggest = "head_pod_spec"
        elif key == "headServiceAccount":
            suggest = "head_service_account"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "podCleanup":
            suggest = "pod_cleanup"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "servicePodSpec":
            suggest = "service_pod_spec"
        elif key == "sslCert":
            suggest = "ssl_cert"
        elif key == "storageClaimName":
            suggest = "storage_claim_name"
        elif key == "storageMountPath":
            suggest = "storage_mount_path"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigGkePlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigGkePlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigGkePlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[_builtins.str] = None,
                 compute_service_account: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigGkePlatformEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_pod_spec: Optional[_builtins.str] = None,
                 head_service_account: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 pod_cleanup: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 server: Optional[_builtins.str] = None,
                 service_pod_spec: Optional[_builtins.str] = None,
                 ssl_cert: Optional[_builtins.str] = None,
                 storage_claim_name: Optional[_builtins.str] = None,
                 storage_mount_path: Optional[_builtins.str] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_name: The GKE cluster name. Not Null; Requires replacement if changed.
        :param _builtins.str compute_service_account: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.bool fusion2_enabled: Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param _builtins.str head_pod_spec: Requires replacement if changed.
        :param _builtins.str head_service_account: Not Null; Requires replacement if changed.
        :param _builtins.str namespace: Not Null; Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.str pod_cleanup: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str region: The GKE cluster region - or - zone. Not Null; Requires replacement if changed.
        :param _builtins.str server: Not Null; Requires replacement if changed.
        :param _builtins.str service_pod_spec: Requires replacement if changed.
        :param _builtins.str ssl_cert: Not Null; Requires replacement if changed.
        :param _builtins.str storage_claim_name: Not Null; Requires replacement if changed.
        :param _builtins.str storage_mount_path: Requires replacement if changed.
        :param _builtins.bool wave_enabled: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[_builtins.str]:
        """
        The GKE cluster name. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigGkePlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        The GKE cluster region - or - zone. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigGkePlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigGoogleBatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSizeGb":
            suggest = "boot_disk_size_gb"
        elif key == "computeJobsInstanceTemplate":
            suggest = "compute_jobs_instance_template"
        elif key == "copyImage":
            suggest = "copy_image"
        elif key == "cpuPlatform":
            suggest = "cpu_platform"
        elif key == "debugMode":
            suggest = "debug_mode"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobInstanceTemplate":
            suggest = "head_job_instance_template"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nfsMount":
            suggest = "nfs_mount"
        elif key == "nfsTarget":
            suggest = "nfs_target"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "sshDaemon":
            suggest = "ssh_daemon"
        elif key == "sshImage":
            suggest = "ssh_image"
        elif key == "usePrivateAddress":
            suggest = "use_private_address"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigGoogleBatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigGoogleBatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigGoogleBatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[_builtins.float] = None,
                 compute_jobs_instance_template: Optional[_builtins.str] = None,
                 copy_image: Optional[_builtins.str] = None,
                 cpu_platform: Optional[_builtins.str] = None,
                 debug_mode: Optional[_builtins.float] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigGoogleBatchEnvironment']] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_instance_template: Optional[_builtins.str] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 location: Optional[_builtins.str] = None,
                 machine_type: Optional[_builtins.str] = None,
                 network: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nfs_mount: Optional[_builtins.str] = None,
                 nfs_target: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 service_account: Optional[_builtins.str] = None,
                 spot: Optional[_builtins.bool] = None,
                 ssh_daemon: Optional[_builtins.bool] = None,
                 ssh_image: Optional[_builtins.str] = None,
                 subnetwork: Optional[_builtins.str] = None,
                 use_private_address: Optional[_builtins.bool] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.float boot_disk_size_gb: Requires replacement if changed.
        :param _builtins.str compute_jobs_instance_template: Requires replacement if changed.
        :param _builtins.str copy_image: Requires replacement if changed.
        :param _builtins.str cpu_platform: Requires replacement if changed.
        :param _builtins.float debug_mode: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.bool fusion2_enabled: Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.str head_job_instance_template: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param Mapping[str, _builtins.str] labels: Requires replacement if changed.
        :param _builtins.str location: Requires replacement if changed.
        :param _builtins.str machine_type: Requires replacement if changed.
        :param _builtins.str network: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.str nfs_mount: Requires replacement if changed.
        :param _builtins.str nfs_target: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str project_id: Requires replacement if changed.
        :param _builtins.str service_account: Requires replacement if changed.
        :param _builtins.bool spot: Requires replacement if changed.
        :param _builtins.bool ssh_daemon: Requires replacement if changed.
        :param _builtins.str ssh_image: Requires replacement if changed.
        :param _builtins.str subnetwork: Requires replacement if changed.
        :param _builtins.bool use_private_address: Requires replacement if changed.
        :param _builtins.bool wave_enabled: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if compute_jobs_instance_template is not None:
            pulumi.set(__self__, "compute_jobs_instance_template", compute_jobs_instance_template)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if cpu_platform is not None:
            pulumi.set(__self__, "cpu_platform", cpu_platform)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_instance_template is not None:
            pulumi.set(__self__, "head_job_instance_template", head_job_instance_template)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if spot is not None:
            pulumi.set(__self__, "spot", spot)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="computeJobsInstanceTemplate")
    def compute_jobs_instance_template(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_jobs_instance_template")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="cpuPlatform")
    def cpu_platform(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cpu_platform")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigGoogleBatchEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobInstanceTemplate")
    def head_job_instance_template(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_instance_template")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_account")

    @_builtins.property
    @pulumi.getter
    def spot(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "spot")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter
    def subnetwork(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnetwork")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigGoogleBatchEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigGoogleLifesciences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSizeGb":
            suggest = "boot_disk_size_gb"
        elif key == "copyImage":
            suggest = "copy_image"
        elif key == "debugMode":
            suggest = "debug_mode"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nfsMount":
            suggest = "nfs_mount"
        elif key == "nfsTarget":
            suggest = "nfs_target"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "sshDaemon":
            suggest = "ssh_daemon"
        elif key == "sshImage":
            suggest = "ssh_image"
        elif key == "usePrivateAddress":
            suggest = "use_private_address"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigGoogleLifesciences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigGoogleLifesciences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigGoogleLifesciences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk_size_gb: Optional[_builtins.float] = None,
                 copy_image: Optional[_builtins.str] = None,
                 debug_mode: Optional[_builtins.float] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironment']] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 location: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nfs_mount: Optional[_builtins.str] = None,
                 nfs_target: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 preemptible: Optional[_builtins.bool] = None,
                 project_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 ssh_daemon: Optional[_builtins.bool] = None,
                 ssh_image: Optional[_builtins.str] = None,
                 use_private_address: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None,
                 zones: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.float boot_disk_size_gb: Requires replacement if changed.
        :param _builtins.str copy_image: Requires replacement if changed.
        :param _builtins.float debug_mode: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param Mapping[str, _builtins.str] labels: Requires replacement if changed.
        :param _builtins.str location: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.str nfs_mount: Requires replacement if changed.
        :param _builtins.str nfs_target: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.bool preemptible: Requires replacement if changed.
        :param _builtins.str project_id: Requires replacement if changed.
        :param _builtins.str region: Requires replacement if changed.
        :param _builtins.bool ssh_daemon: Requires replacement if changed.
        :param _builtins.str ssh_image: Requires replacement if changed.
        :param _builtins.bool use_private_address: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        :param Sequence[_builtins.str] zones: Requires replacement if changed.
        """
        if boot_disk_size_gb is not None:
            pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        if copy_image is not None:
            pulumi.set(__self__, "copy_image", copy_image)
        if debug_mode is not None:
            pulumi.set(__self__, "debug_mode", debug_mode)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nfs_mount is not None:
            pulumi.set(__self__, "nfs_mount", nfs_mount)
        if nfs_target is not None:
            pulumi.set(__self__, "nfs_target", nfs_target)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ssh_daemon is not None:
            pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        if ssh_image is not None:
            pulumi.set(__self__, "ssh_image", ssh_image)
        if use_private_address is not None:
            pulumi.set(__self__, "use_private_address", use_private_address)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def preemptible(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "preemptible")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class ComputeEnvComputeEnvConfigGoogleLifesciencesEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigK8sPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeServiceAccount":
            suggest = "compute_service_account"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headPodSpec":
            suggest = "head_pod_spec"
        elif key == "headServiceAccount":
            suggest = "head_service_account"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "podCleanup":
            suggest = "pod_cleanup"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "servicePodSpec":
            suggest = "service_pod_spec"
        elif key == "sslCert":
            suggest = "ssl_cert"
        elif key == "storageClaimName":
            suggest = "storage_claim_name"
        elif key == "storageMountPath":
            suggest = "storage_mount_path"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigK8sPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigK8sPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigK8sPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_service_account: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigK8sPlatformEnvironment']] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_pod_spec: Optional[_builtins.str] = None,
                 head_service_account: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 pod_cleanup: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 server: Optional[_builtins.str] = None,
                 service_pod_spec: Optional[_builtins.str] = None,
                 ssl_cert: Optional[_builtins.str] = None,
                 storage_claim_name: Optional[_builtins.str] = None,
                 storage_mount_path: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str compute_service_account: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param _builtins.str head_pod_spec: Requires replacement if changed.
        :param _builtins.str head_service_account: Not Null; Requires replacement if changed.
        :param _builtins.str namespace: Not Null; Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.str pod_cleanup: must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str server: Not Null; Requires replacement if changed.
        :param _builtins.str service_pod_spec: Requires replacement if changed.
        :param _builtins.str ssl_cert: Not Null; Requires replacement if changed.
        :param _builtins.str storage_claim_name: Not Null; Requires replacement if changed.
        :param _builtins.str storage_mount_path: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if compute_service_account is not None:
            pulumi.set(__self__, "compute_service_account", compute_service_account)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_pod_spec is not None:
            pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        if head_service_account is not None:
            pulumi.set(__self__, "head_service_account", head_service_account)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if pod_cleanup is not None:
            pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_pod_spec is not None:
            pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if storage_claim_name is not None:
            pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        if storage_mount_path is not None:
            pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigK8sPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> Optional[_builtins.str]:
        """
        must be one of ["on_success", "always", "never"]; Requires replacement if changed.
        """
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigK8sPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigLsfPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "perJobMemLimit":
            suggest = "per_job_mem_limit"
        elif key == "perTaskReserve":
            suggest = "per_task_reserve"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "unitForLimits":
            suggest = "unit_for_limits"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigLsfPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigLsfPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigLsfPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigLsfPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 per_job_mem_limit: Optional[_builtins.bool] = None,
                 per_task_reserve: Optional[_builtins.bool] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 unit_for_limits: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str compute_queue: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.str head_job_options: Requires replacement if changed.
        :param _builtins.str head_queue: Requires replacement if changed.
        :param _builtins.str host_name: Requires replacement if changed.
        :param _builtins.str launch_dir: Requires replacement if changed.
        :param _builtins.float max_queue_size: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.bool per_job_mem_limit: Requires replacement if changed.
        :param _builtins.bool per_task_reserve: Requires replacement if changed.
        :param _builtins.float port: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.bool propagate_head_job_options: Requires replacement if changed.
        :param _builtins.str unit_for_limits: Requires replacement if changed.
        :param _builtins.str user_name: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if per_job_mem_limit is not None:
            pulumi.set(__self__, "per_job_mem_limit", per_job_mem_limit)
        if per_task_reserve is not None:
            pulumi.set(__self__, "per_task_reserve", per_task_reserve)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if unit_for_limits is not None:
            pulumi.set(__self__, "unit_for_limits", unit_for_limits)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigLsfPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="perJobMemLimit")
    def per_job_mem_limit(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "per_job_mem_limit")

    @_builtins.property
    @pulumi.getter(name="perTaskReserve")
    def per_task_reserve(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "per_task_reserve")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="unitForLimits")
    def unit_for_limits(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "unit_for_limits")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigLsfPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigMoabPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigMoabPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigMoabPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigMoabPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigMoabPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str compute_queue: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.str head_job_options: Requires replacement if changed.
        :param _builtins.str head_queue: Requires replacement if changed.
        :param _builtins.str host_name: Requires replacement if changed.
        :param _builtins.str launch_dir: Requires replacement if changed.
        :param _builtins.float max_queue_size: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.float port: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.bool propagate_head_job_options: Requires replacement if changed.
        :param _builtins.str user_name: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigMoabPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigMoabPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigSeqeracomputePlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cliPath":
            suggest = "cli_path"
        elif key == "computeJobRole":
            suggest = "compute_job_role"
        elif key == "computeQueue":
            suggest = "compute_queue"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "dragenQueue":
            suggest = "dragen_queue"
        elif key == "executionRole":
            suggest = "execution_role"
        elif key == "fusion2Enabled":
            suggest = "fusion2_enabled"
        elif key == "fusionSnapshots":
            suggest = "fusion_snapshots"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "headJobRole":
            suggest = "head_job_role"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "logGroup":
            suggest = "log_group"
        elif key == "lustreId":
            suggest = "lustre_id"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "nvnmeStorageEnabled":
            suggest = "nvnme_storage_enabled"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "waveEnabled":
            suggest = "wave_enabled"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigSeqeracomputePlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigSeqeracomputePlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigSeqeracomputePlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cli_path: Optional[_builtins.str] = None,
                 compute_job_role: Optional[_builtins.str] = None,
                 compute_queue: Optional[_builtins.str] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 dragen_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironment']] = None,
                 execution_role: Optional[_builtins.str] = None,
                 forge: Optional['outputs.ComputeEnvComputeEnvConfigSeqeracomputePlatformForge'] = None,
                 fusion2_enabled: Optional[_builtins.bool] = None,
                 fusion_snapshots: Optional[_builtins.bool] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 head_job_role: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 log_group: Optional[_builtins.str] = None,
                 lustre_id: Optional[_builtins.str] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 nvnme_storage_enabled: Optional[_builtins.bool] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 storage_type: Optional[_builtins.str] = None,
                 volumes: Optional[Sequence[_builtins.str]] = None,
                 wave_enabled: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str cli_path: Requires replacement if changed.
        :param _builtins.str compute_job_role: Requires replacement if changed.
        :param _builtins.str compute_queue: Requires replacement if changed.
        :param _builtins.str dragen_instance_type: Requires replacement if changed.
        :param _builtins.str dragen_queue: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.str execution_role: Requires replacement if changed.
        :param 'ComputeEnvComputeEnvConfigSeqeracomputePlatformForgeArgs' forge: Not Null; Requires replacement if changed.
        :param _builtins.bool fusion2_enabled: Requires replacement if changed.
        :param _builtins.bool fusion_snapshots: Requires replacement if changed.
        :param _builtins.float head_job_cpus: Requires replacement if changed.
        :param _builtins.float head_job_memory_mb: Requires replacement if changed.
        :param _builtins.str head_job_role: Requires replacement if changed.
        :param _builtins.str head_queue: Requires replacement if changed.
        :param _builtins.str log_group: Requires replacement if changed.
        :param _builtins.str lustre_id: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.bool nvnme_storage_enabled: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.str region: Not Null; Requires replacement if changed.
        :param _builtins.str storage_type: Requires replacement if changed.
        :param Sequence[_builtins.str] volumes: Requires replacement if changed.
        :param _builtins.bool wave_enabled: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Requires replacement if changed.
        """
        if cli_path is not None:
            pulumi.set(__self__, "cli_path", cli_path)
        if compute_job_role is not None:
            pulumi.set(__self__, "compute_job_role", compute_job_role)
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if dragen_queue is not None:
            pulumi.set(__self__, "dragen_queue", dragen_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if forge is not None:
            pulumi.set(__self__, "forge", forge)
        if fusion2_enabled is not None:
            pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        if fusion_snapshots is not None:
            pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if head_job_role is not None:
            pulumi.set(__self__, "head_job_role", head_job_role)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)
        if lustre_id is not None:
            pulumi.set(__self__, "lustre_id", lustre_id)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if nvnme_storage_enabled is not None:
            pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if wave_enabled is not None:
            pulumi.set(__self__, "wave_enabled", wave_enabled)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> Optional['outputs.ComputeEnvComputeEnvConfigSeqeracomputePlatformForge']:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigSeqeracomputePlatformForge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocStrategy":
            suggest = "alloc_strategy"
        elif key == "allowBuckets":
            suggest = "allow_buckets"
        elif key == "arm64Enabled":
            suggest = "arm64_enabled"
        elif key == "bidPercentage":
            suggest = "bid_percentage"
        elif key == "disposeOnDeletion":
            suggest = "dispose_on_deletion"
        elif key == "dragenAmiId":
            suggest = "dragen_ami_id"
        elif key == "dragenEnabled":
            suggest = "dragen_enabled"
        elif key == "dragenInstanceType":
            suggest = "dragen_instance_type"
        elif key == "ebsAutoScale":
            suggest = "ebs_auto_scale"
        elif key == "ebsBlockSize":
            suggest = "ebs_block_size"
        elif key == "ebsBootSize":
            suggest = "ebs_boot_size"
        elif key == "ec2KeyPair":
            suggest = "ec2_key_pair"
        elif key == "ecsConfig":
            suggest = "ecs_config"
        elif key == "efsCreate":
            suggest = "efs_create"
        elif key == "efsId":
            suggest = "efs_id"
        elif key == "efsMount":
            suggest = "efs_mount"
        elif key == "fargateHeadEnabled":
            suggest = "fargate_head_enabled"
        elif key == "fsxMount":
            suggest = "fsx_mount"
        elif key == "fsxName":
            suggest = "fsx_name"
        elif key == "fsxSize":
            suggest = "fsx_size"
        elif key == "fusionEnabled":
            suggest = "fusion_enabled"
        elif key == "gpuEnabled":
            suggest = "gpu_enabled"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceTypes":
            suggest = "instance_types"
        elif key == "maxCpus":
            suggest = "max_cpus"
        elif key == "minCpus":
            suggest = "min_cpus"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigSeqeracomputePlatformForge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigSeqeracomputePlatformForge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigSeqeracomputePlatformForge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alloc_strategy: Optional[_builtins.str] = None,
                 allow_buckets: Optional[Sequence[_builtins.str]] = None,
                 arm64_enabled: Optional[_builtins.bool] = None,
                 bid_percentage: Optional[_builtins.float] = None,
                 dispose_on_deletion: Optional[_builtins.bool] = None,
                 dragen_ami_id: Optional[_builtins.str] = None,
                 dragen_enabled: Optional[_builtins.bool] = None,
                 dragen_instance_type: Optional[_builtins.str] = None,
                 ebs_auto_scale: Optional[_builtins.bool] = None,
                 ebs_block_size: Optional[_builtins.float] = None,
                 ebs_boot_size: Optional[_builtins.float] = None,
                 ec2_key_pair: Optional[_builtins.str] = None,
                 ecs_config: Optional[_builtins.str] = None,
                 efs_create: Optional[_builtins.bool] = None,
                 efs_id: Optional[_builtins.str] = None,
                 efs_mount: Optional[_builtins.str] = None,
                 fargate_head_enabled: Optional[_builtins.bool] = None,
                 fsx_mount: Optional[_builtins.str] = None,
                 fsx_name: Optional[_builtins.str] = None,
                 fsx_size: Optional[_builtins.float] = None,
                 fusion_enabled: Optional[_builtins.bool] = None,
                 gpu_enabled: Optional[_builtins.bool] = None,
                 image_id: Optional[_builtins.str] = None,
                 instance_types: Optional[Sequence[_builtins.str]] = None,
                 max_cpus: Optional[_builtins.float] = None,
                 min_cpus: Optional[_builtins.float] = None,
                 security_groups: Optional[Sequence[_builtins.str]] = None,
                 subnets: Optional[Sequence[_builtins.str]] = None,
                 type: Optional[_builtins.str] = None,
                 vpc_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str alloc_strategy: must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        :param Sequence[_builtins.str] allow_buckets: Requires replacement if changed.
        :param _builtins.bool arm64_enabled: Requires replacement if changed.
        :param _builtins.float bid_percentage: Requires replacement if changed.
        :param _builtins.bool dispose_on_deletion: Requires replacement if changed.
        :param _builtins.str dragen_ami_id: Requires replacement if changed.
        :param _builtins.bool dragen_enabled: Requires replacement if changed.
        :param _builtins.str dragen_instance_type: Requires replacement if changed.
        :param _builtins.bool ebs_auto_scale: Requires replacement if changed.
        :param _builtins.float ebs_block_size: Requires replacement if changed.
        :param _builtins.float ebs_boot_size: Requires replacement if changed.
        :param _builtins.str ec2_key_pair: Requires replacement if changed.
        :param _builtins.str ecs_config: Requires replacement if changed.
        :param _builtins.bool efs_create: Requires replacement if changed.
        :param _builtins.str efs_id: Requires replacement if changed.
        :param _builtins.str efs_mount: Requires replacement if changed.
        :param _builtins.bool fargate_head_enabled: Requires replacement if changed.
        :param _builtins.str fsx_mount: Requires replacement if changed.
        :param _builtins.str fsx_name: Requires replacement if changed.
        :param _builtins.float fsx_size: Requires replacement if changed.
        :param _builtins.bool fusion_enabled: Requires replacement if changed.
        :param _builtins.bool gpu_enabled: Requires replacement if changed.
        :param _builtins.str image_id: Requires replacement if changed.
        :param Sequence[_builtins.str] instance_types: Requires replacement if changed.
        :param _builtins.float max_cpus: Not Null; Requires replacement if changed.
        :param _builtins.float min_cpus: Not Null; Requires replacement if changed.
        :param Sequence[_builtins.str] security_groups: Requires replacement if changed.
        :param Sequence[_builtins.str] subnets: Requires replacement if changed.
        :param _builtins.str type: Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        :param _builtins.str vpc_id: Requires replacement if changed.
        """
        if alloc_strategy is not None:
            pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        if allow_buckets is not None:
            pulumi.set(__self__, "allow_buckets", allow_buckets)
        if arm64_enabled is not None:
            pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if dispose_on_deletion is not None:
            pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        if dragen_ami_id is not None:
            pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        if dragen_enabled is not None:
            pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        if dragen_instance_type is not None:
            pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        if ebs_auto_scale is not None:
            pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        if ebs_block_size is not None:
            pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        if ebs_boot_size is not None:
            pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if ecs_config is not None:
            pulumi.set(__self__, "ecs_config", ecs_config)
        if efs_create is not None:
            pulumi.set(__self__, "efs_create", efs_create)
        if efs_id is not None:
            pulumi.set(__self__, "efs_id", efs_id)
        if efs_mount is not None:
            pulumi.set(__self__, "efs_mount", efs_mount)
        if fargate_head_enabled is not None:
            pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        if fsx_mount is not None:
            pulumi.set(__self__, "fsx_mount", fsx_mount)
        if fsx_name is not None:
            pulumi.set(__self__, "fsx_name", fsx_name)
        if fsx_size is not None:
            pulumi.set(__self__, "fsx_size", fsx_size)
        if fusion_enabled is not None:
            pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        if gpu_enabled is not None:
            pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if max_cpus is not None:
            pulumi.set(__self__, "max_cpus", max_cpus)
        if min_cpus is not None:
            pulumi.set(__self__, "min_cpus", min_cpus)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> Optional[_builtins.str]:
        """
        must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.
        """
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> Optional[_builtins.float]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> Optional[_builtins.float]:
        """
        Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ComputeEnvComputeEnvConfigSlurmPlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigSlurmPlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigSlurmPlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigSlurmPlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigSlurmPlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str compute_queue: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.str head_job_options: Requires replacement if changed.
        :param _builtins.str head_queue: Requires replacement if changed.
        :param _builtins.str host_name: Requires replacement if changed.
        :param _builtins.str launch_dir: Requires replacement if changed.
        :param _builtins.float max_queue_size: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.float port: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.bool propagate_head_job_options: Requires replacement if changed.
        :param _builtins.str user_name: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigSlurmPlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigSlurmPlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvConfigUgePlatform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQueue":
            suggest = "compute_queue"
        elif key == "headJobOptions":
            suggest = "head_job_options"
        elif key == "headQueue":
            suggest = "head_queue"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "nextflowConfig":
            suggest = "nextflow_config"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "propagateHeadJobOptions":
            suggest = "propagate_head_job_options"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvConfigUgePlatform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvConfigUgePlatform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvConfigUgePlatform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_queue: Optional[_builtins.str] = None,
                 environments: Optional[Sequence['outputs.ComputeEnvComputeEnvConfigUgePlatformEnvironment']] = None,
                 head_job_options: Optional[_builtins.str] = None,
                 head_queue: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 max_queue_size: Optional[_builtins.float] = None,
                 nextflow_config: Optional[_builtins.str] = None,
                 port: Optional[_builtins.float] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 propagate_head_job_options: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str compute_queue: Requires replacement if changed.
        :param Sequence['ComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment. Requires replacement if changed.
        :param _builtins.str head_job_options: Requires replacement if changed.
        :param _builtins.str head_queue: Requires replacement if changed.
        :param _builtins.str host_name: Requires replacement if changed.
        :param _builtins.str launch_dir: Requires replacement if changed.
        :param _builtins.float max_queue_size: Requires replacement if changed.
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters. Requires replacement if changed.
        :param _builtins.float port: Requires replacement if changed.
        :param _builtins.str post_run_script: Shell script to execute after workflow completes. Requires replacement if changed.
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts. Requires replacement if changed.
        :param _builtins.bool propagate_head_job_options: Requires replacement if changed.
        :param _builtins.str user_name: Requires replacement if changed.
        :param _builtins.str work_dir: Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        if compute_queue is not None:
            pulumi.set(__self__, "compute_queue", compute_queue)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if head_job_options is not None:
            pulumi.set(__self__, "head_job_options", head_job_options)
        if head_queue is not None:
            pulumi.set(__self__, "head_queue", head_queue)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if max_queue_size is not None:
            pulumi.set(__self__, "max_queue_size", max_queue_size)
        if nextflow_config is not None:
            pulumi.set(__self__, "nextflow_config", nextflow_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if propagate_head_job_options is not None:
            pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence['outputs.ComputeEnvComputeEnvConfigUgePlatformEnvironment']]:
        """
        Array of environment variables for the compute environment. Requires replacement if changed.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> Optional[_builtins.str]:
        """
        Nextflow configuration settings and parameters. Requires replacement if changed.
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute after workflow completes. Requires replacement if changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Shell script to execute before workflow starts. Requires replacement if changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        """
        Working directory path for workflow execution. Not Null; Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ComputeEnvComputeEnvConfigUgePlatformEnvironment(dict):
    def __init__(__self__, *,
                 compute: Optional[_builtins.bool] = None,
                 head: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.bool compute: Requires replacement if changed.
        :param _builtins.bool head: Requires replacement if changed.
        :param _builtins.str name: Requires replacement if changed.
        :param _builtins.str value: Requires replacement if changed.
        """
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if head is not None:
            pulumi.set(__self__, "head", head)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> Optional[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ComputeEnvComputeEnvLabel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnvComputeEnvLabel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnvComputeEnvLabel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnvComputeEnvLabel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 is_default: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 resource: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CredentialKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureEntra":
            suggest = "azure_entra"
        elif key == "containerReg":
            suggest = "container_reg"
        elif key == "twAgent":
            suggest = "tw_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws: Optional['outputs.CredentialKeysAws'] = None,
                 azure: Optional['outputs.CredentialKeysAzure'] = None,
                 azure_entra: Optional['outputs.CredentialKeysAzureEntra'] = None,
                 azurerepos: Optional['outputs.CredentialKeysAzurerepos'] = None,
                 bitbucket: Optional['outputs.CredentialKeysBitbucket'] = None,
                 codecommit: Optional['outputs.CredentialKeysCodecommit'] = None,
                 container_reg: Optional['outputs.CredentialKeysContainerReg'] = None,
                 gitea: Optional['outputs.CredentialKeysGitea'] = None,
                 github: Optional['outputs.CredentialKeysGithub'] = None,
                 gitlab: Optional['outputs.CredentialKeysGitlab'] = None,
                 google: Optional['outputs.CredentialKeysGoogle'] = None,
                 k8s: Optional['outputs.CredentialKeysK8s'] = None,
                 seqeracompute: Optional['outputs.CredentialKeysSeqeracompute'] = None,
                 ssh: Optional['outputs.CredentialKeysSsh'] = None,
                 tw_agent: Optional['outputs.CredentialKeysTwAgent'] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if azure_entra is not None:
            pulumi.set(__self__, "azure_entra", azure_entra)
        if azurerepos is not None:
            pulumi.set(__self__, "azurerepos", azurerepos)
        if bitbucket is not None:
            pulumi.set(__self__, "bitbucket", bitbucket)
        if codecommit is not None:
            pulumi.set(__self__, "codecommit", codecommit)
        if container_reg is not None:
            pulumi.set(__self__, "container_reg", container_reg)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if google is not None:
            pulumi.set(__self__, "google", google)
        if k8s is not None:
            pulumi.set(__self__, "k8s", k8s)
        if seqeracompute is not None:
            pulumi.set(__self__, "seqeracompute", seqeracompute)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if tw_agent is not None:
            pulumi.set(__self__, "tw_agent", tw_agent)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> Optional['outputs.CredentialKeysAws']:
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter
    def azure(self) -> Optional['outputs.CredentialKeysAzure']:
        return pulumi.get(self, "azure")

    @_builtins.property
    @pulumi.getter(name="azureEntra")
    def azure_entra(self) -> Optional['outputs.CredentialKeysAzureEntra']:
        return pulumi.get(self, "azure_entra")

    @_builtins.property
    @pulumi.getter
    def azurerepos(self) -> Optional['outputs.CredentialKeysAzurerepos']:
        return pulumi.get(self, "azurerepos")

    @_builtins.property
    @pulumi.getter
    def bitbucket(self) -> Optional['outputs.CredentialKeysBitbucket']:
        return pulumi.get(self, "bitbucket")

    @_builtins.property
    @pulumi.getter
    def codecommit(self) -> Optional['outputs.CredentialKeysCodecommit']:
        return pulumi.get(self, "codecommit")

    @_builtins.property
    @pulumi.getter(name="containerReg")
    def container_reg(self) -> Optional['outputs.CredentialKeysContainerReg']:
        return pulumi.get(self, "container_reg")

    @_builtins.property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.CredentialKeysGitea']:
        return pulumi.get(self, "gitea")

    @_builtins.property
    @pulumi.getter
    def github(self) -> Optional['outputs.CredentialKeysGithub']:
        return pulumi.get(self, "github")

    @_builtins.property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.CredentialKeysGitlab']:
        return pulumi.get(self, "gitlab")

    @_builtins.property
    @pulumi.getter
    def google(self) -> Optional['outputs.CredentialKeysGoogle']:
        return pulumi.get(self, "google")

    @_builtins.property
    @pulumi.getter
    def k8s(self) -> Optional['outputs.CredentialKeysK8s']:
        return pulumi.get(self, "k8s")

    @_builtins.property
    @pulumi.getter
    def seqeracompute(self) -> Optional['outputs.CredentialKeysSeqeracompute']:
        return pulumi.get(self, "seqeracompute")

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.CredentialKeysSsh']:
        return pulumi.get(self, "ssh")

    @_builtins.property
    @pulumi.getter(name="twAgent")
    def tw_agent(self) -> Optional['outputs.CredentialKeysTwAgent']:
        return pulumi.get(self, "tw_agent")


@pulumi.output_type
class CredentialKeysAws(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "assumeRoleArn":
            suggest = "assume_role_arn"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysAws. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysAws.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysAws.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: Optional[_builtins.str] = None,
                 assume_role_arn: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "assume_role_arn")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class CredentialKeysAzure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchKey":
            suggest = "batch_key"
        elif key == "batchName":
            suggest = "batch_name"
        elif key == "storageKey":
            suggest = "storage_key"
        elif key == "storageName":
            suggest = "storage_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysAzure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysAzure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysAzure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_key: Optional[_builtins.str] = None,
                 batch_name: Optional[_builtins.str] = None,
                 storage_key: Optional[_builtins.str] = None,
                 storage_name: Optional[_builtins.str] = None):
        if batch_key is not None:
            pulumi.set(__self__, "batch_key", batch_key)
        if batch_name is not None:
            pulumi.set(__self__, "batch_name", batch_name)
        if storage_key is not None:
            pulumi.set(__self__, "storage_key", storage_key)
        if storage_name is not None:
            pulumi.set(__self__, "storage_name", storage_name)

    @_builtins.property
    @pulumi.getter(name="batchKey")
    def batch_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "batch_key")

    @_builtins.property
    @pulumi.getter(name="batchName")
    def batch_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "batch_name")

    @_builtins.property
    @pulumi.getter(name="storageKey")
    def storage_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_key")

    @_builtins.property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_name")


@pulumi.output_type
class CredentialKeysAzureEntra(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchKey":
            suggest = "batch_key"
        elif key == "batchName":
            suggest = "batch_name"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "storageKey":
            suggest = "storage_key"
        elif key == "storageName":
            suggest = "storage_name"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysAzureEntra. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysAzureEntra.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysAzureEntra.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_key: Optional[_builtins.str] = None,
                 batch_name: Optional[_builtins.str] = None,
                 client_id: Optional[_builtins.str] = None,
                 client_secret: Optional[_builtins.str] = None,
                 storage_key: Optional[_builtins.str] = None,
                 storage_name: Optional[_builtins.str] = None,
                 tenant_id: Optional[_builtins.str] = None):
        if batch_key is not None:
            pulumi.set(__self__, "batch_key", batch_key)
        if batch_name is not None:
            pulumi.set(__self__, "batch_name", batch_name)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if storage_key is not None:
            pulumi.set(__self__, "storage_key", storage_key)
        if storage_name is not None:
            pulumi.set(__self__, "storage_name", storage_name)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="batchKey")
    def batch_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "batch_key")

    @_builtins.property
    @pulumi.getter(name="batchName")
    def batch_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "batch_name")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "client_secret")

    @_builtins.property
    @pulumi.getter(name="storageKey")
    def storage_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_key")

    @_builtins.property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "storage_name")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class CredentialKeysAzurerepos(dict):
    def __init__(__self__, *,
                 password: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class CredentialKeysBitbucket(dict):
    def __init__(__self__, *,
                 password: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class CredentialKeysCodecommit(dict):
    def __init__(__self__, *,
                 password: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class CredentialKeysContainerReg(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysContainerReg. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysContainerReg.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysContainerReg.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[_builtins.str] = None,
                 registry: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def registry(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "registry")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class CredentialKeysGitea(dict):
    def __init__(__self__, *,
                 password: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class CredentialKeysGithub(dict):
    def __init__(__self__, *,
                 password: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class CredentialKeysGitlab(dict):
    def __init__(__self__, *,
                 password: Optional[_builtins.str] = None,
                 token: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "token")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class CredentialKeysGoogle(dict):
    def __init__(__self__, *,
                 data: Optional[_builtins.str] = None):
        if data is not None:
            pulumi.set(__self__, "data", data)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "data")


@pulumi.output_type
class CredentialKeysK8s(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysK8s. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysK8s.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysK8s.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate: Optional[_builtins.str] = None,
                 private_key: Optional[_builtins.str] = None,
                 token: Optional[_builtins.str] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "token")


@pulumi.output_type
class CredentialKeysSeqeracompute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "assumeRoleArn":
            suggest = "assume_role_arn"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysSeqeracompute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysSeqeracompute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysSeqeracompute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: Optional[_builtins.str] = None,
                 assume_role_arn: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "assume_role_arn")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class CredentialKeysSsh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 passphrase: Optional[_builtins.str] = None,
                 private_key: Optional[_builtins.str] = None):
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_key")


@pulumi.output_type
class CredentialKeysTwAgent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialKeysTwAgent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialKeysTwAgent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialKeysTwAgent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: Optional[_builtins.str] = None,
                 shared: Optional[_builtins.bool] = None,
                 work_dir: Optional[_builtins.str] = None):
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class DataLinkCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "providerType":
            suggest = "provider_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataLinkCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataLinkCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataLinkCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 provider_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[_builtins.str]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        return pulumi.get(self, "provider_type")


@pulumi.output_type
class LabelsLabel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LabelsLabel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LabelsLabel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LabelsLabel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 is_default: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 resource: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PipelineComputeEnv(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 platform: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class PipelineLabel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineLabel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineLabel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineLabel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 is_default: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 resource: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PipelineLaunch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeEnvId":
            suggest = "compute_env_id"
        elif key == "workDir":
            suggest = "work_dir"
        elif key == "configProfiles":
            suggest = "config_profiles"
        elif key == "configText":
            suggest = "config_text"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "entryName":
            suggest = "entry_name"
        elif key == "headJobCpus":
            suggest = "head_job_cpus"
        elif key == "headJobMemoryMb":
            suggest = "head_job_memory_mb"
        elif key == "labelIds":
            suggest = "label_ids"
        elif key == "launchContainer":
            suggest = "launch_container"
        elif key == "mainScript":
            suggest = "main_script"
        elif key == "optimizationId":
            suggest = "optimization_id"
        elif key == "optimizationTargets":
            suggest = "optimization_targets"
        elif key == "paramsText":
            suggest = "params_text"
        elif key == "postRunScript":
            suggest = "post_run_script"
        elif key == "preRunScript":
            suggest = "pre_run_script"
        elif key == "pullLatest":
            suggest = "pull_latest"
        elif key == "runName":
            suggest = "run_name"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sessionId":
            suggest = "session_id"
        elif key == "stubRun":
            suggest = "stub_run"
        elif key == "towerConfig":
            suggest = "tower_config"
        elif key == "userSecrets":
            suggest = "user_secrets"
        elif key == "workspaceSecrets":
            suggest = "workspace_secrets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineLaunch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineLaunch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineLaunch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_env_id: _builtins.str,
                 pipeline: _builtins.str,
                 work_dir: _builtins.str,
                 config_profiles: Optional[Sequence[_builtins.str]] = None,
                 config_text: Optional[_builtins.str] = None,
                 date_created: Optional[_builtins.str] = None,
                 entry_name: Optional[_builtins.str] = None,
                 head_job_cpus: Optional[_builtins.float] = None,
                 head_job_memory_mb: Optional[_builtins.float] = None,
                 label_ids: Optional[Sequence[_builtins.float]] = None,
                 launch_container: Optional[_builtins.str] = None,
                 main_script: Optional[_builtins.str] = None,
                 optimization_id: Optional[_builtins.str] = None,
                 optimization_targets: Optional[_builtins.str] = None,
                 params_text: Optional[_builtins.str] = None,
                 post_run_script: Optional[_builtins.str] = None,
                 pre_run_script: Optional[_builtins.str] = None,
                 pull_latest: Optional[_builtins.bool] = None,
                 resume: Optional[_builtins.bool] = None,
                 revision: Optional[_builtins.str] = None,
                 run_name: Optional[_builtins.str] = None,
                 schema_name: Optional[_builtins.str] = None,
                 session_id: Optional[_builtins.str] = None,
                 stub_run: Optional[_builtins.bool] = None,
                 tower_config: Optional[_builtins.str] = None,
                 user_secrets: Optional[Sequence[_builtins.str]] = None,
                 workspace_secrets: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        :param _builtins.str pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "pipeline", pipeline)
        pulumi.set(__self__, "work_dir", work_dir)
        if config_profiles is not None:
            pulumi.set(__self__, "config_profiles", config_profiles)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if launch_container is not None:
            pulumi.set(__self__, "launch_container", launch_container)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if optimization_id is not None:
            pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_targets is not None:
            pulumi.set(__self__, "optimization_targets", optimization_targets)
        if params_text is not None:
            pulumi.set(__self__, "params_text", params_text)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if pull_latest is not None:
            pulumi.set(__self__, "pull_latest", pull_latest)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if stub_run is not None:
            pulumi.set(__self__, "stub_run", stub_run)
        if tower_config is not None:
            pulumi.set(__self__, "tower_config", tower_config)
        if user_secrets is not None:
            pulumi.set(__self__, "user_secrets", user_secrets)
        if workspace_secrets is not None:
            pulumi.set(__self__, "workspace_secrets", workspace_secrets)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> _builtins.str:
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> _builtins.str:
        return pulumi.get(self, "pipeline")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "config_profiles")

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "config_text")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "entry_name")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "label_ids")

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_container")

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "main_script")

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "optimization_id")

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "optimization_targets")

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "params_text")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[_builtins.str]:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[_builtins.str]:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "pull_latest")

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "resume")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "run_name")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "stub_run")

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tower_config")

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "user_secrets")

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "workspace_secrets")


@pulumi.output_type
class StudiosActiveConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastActive":
            suggest = "last_active"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosActiveConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosActiveConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosActiveConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avatar: Optional[_builtins.str] = None,
                 email: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 last_active: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_active is not None:
            pulumi.set(__self__, "last_active", last_active)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def avatar(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "avatar")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastActive")
    def last_active(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_active")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class StudiosComputeEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialsId":
            suggest = "credentials_id"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosComputeEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosComputeEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosComputeEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials_id: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 platform: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class StudiosConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "condaEnvironment":
            suggest = "conda_environment"
        elif key == "lifespanHours":
            suggest = "lifespan_hours"
        elif key == "mountDatas":
            suggest = "mount_datas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conda_environment: Optional[_builtins.str] = None,
                 cpu: Optional[_builtins.float] = None,
                 gpu: Optional[_builtins.float] = None,
                 lifespan_hours: Optional[_builtins.float] = None,
                 memory: Optional[_builtins.float] = None,
                 mount_datas: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str conda_environment: Requires replacement if changed.
        :param _builtins.float cpu: Requires replacement if changed.
        :param _builtins.float gpu: Requires replacement if changed.
        :param _builtins.float lifespan_hours: Requires replacement if changed.
        :param _builtins.float memory: Requires replacement if changed.
        :param Sequence[_builtins.str] mount_datas: Requires replacement if changed.
        """
        if conda_environment is not None:
            pulumi.set(__self__, "conda_environment", conda_environment)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if lifespan_hours is not None:
            pulumi.set(__self__, "lifespan_hours", lifespan_hours)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if mount_datas is not None:
            pulumi.set(__self__, "mount_datas", mount_datas)

    @_builtins.property
    @pulumi.getter(name="condaEnvironment")
    def conda_environment(self) -> Optional[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "conda_environment")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def gpu(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "gpu")

    @_builtins.property
    @pulumi.getter(name="lifespanHours")
    def lifespan_hours(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "lifespan_hours")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.float]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="mountDatas")
    def mount_datas(self) -> Optional[Sequence[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "mount_datas")


@pulumi.output_type
class StudiosLabel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosLabel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosLabel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosLabel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 is_default: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 resource: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StudiosMountedDataLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLinkId":
            suggest = "data_link_id"
        elif key == "providerType":
            suggest = "provider_type"
        elif key == "publicAccessible":
            suggest = "public_accessible"
        elif key == "resourceRef":
            suggest = "resource_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosMountedDataLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosMountedDataLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosMountedDataLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: Optional[Sequence['outputs.StudiosMountedDataLinkCredential']] = None,
                 data_link_id: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 hidden: Optional[_builtins.bool] = None,
                 message: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 provider_type: Optional[_builtins.str] = None,
                 public_accessible: Optional[_builtins.bool] = None,
                 region: Optional[_builtins.str] = None,
                 resource_ref: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param Sequence['StudiosMountedDataLinkCredentialArgs'] credentials: Array of credentials required to access the data link
        :param _builtins.str data_link_id: Unique identifier for the data link
        :param _builtins.str description: Description of the data link's purpose and contents
        :param _builtins.str name: Display name for the data link connection
        :param _builtins.str provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        :param _builtins.str region: Geographic region where the data link is hosted
        :param _builtins.str resource_ref: Reference identifier for the external resource
        :param _builtins.str status: must be one of ["VALID", "INVALID"]
        :param _builtins.str type: must be "bucket"
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if data_link_id is not None:
            pulumi.set(__self__, "data_link_id", data_link_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if public_accessible is not None:
            pulumi.set(__self__, "public_accessible", public_accessible)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_ref is not None:
            pulumi.set(__self__, "resource_ref", resource_ref)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.StudiosMountedDataLinkCredential']]:
        """
        Array of credentials required to access the data link
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="dataLinkId")
    def data_link_id(self) -> Optional[_builtins.str]:
        """
        Unique identifier for the data link
        """
        return pulumi.get(self, "data_link_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description of the data link's purpose and contents
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "hidden")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Display name for the data link connection
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[_builtins.str]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="publicAccessible")
    def public_accessible(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "public_accessible")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Geographic region where the data link is hosted
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> Optional[_builtins.str]:
        """
        Reference identifier for the external resource
        """
        return pulumi.get(self, "resource_ref")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        must be one of ["VALID", "INVALID"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        must be "bucket"
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class StudiosMountedDataLinkCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "providerType":
            suggest = "provider_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosMountedDataLinkCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosMountedDataLinkCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosMountedDataLinkCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 provider_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[_builtins.str]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]
        """
        return pulumi.get(self, "provider_type")


@pulumi.output_type
class StudiosParentCheckpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkpointId":
            suggest = "checkpoint_id"
        elif key == "checkpointName":
            suggest = "checkpoint_name"
        elif key == "sessionId":
            suggest = "session_id"
        elif key == "studioName":
            suggest = "studio_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosParentCheckpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosParentCheckpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosParentCheckpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 checkpoint_id: Optional[_builtins.float] = None,
                 checkpoint_name: Optional[_builtins.str] = None,
                 session_id: Optional[_builtins.str] = None,
                 studio_name: Optional[_builtins.str] = None):
        if checkpoint_id is not None:
            pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        if checkpoint_name is not None:
            pulumi.set(__self__, "checkpoint_name", checkpoint_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if studio_name is not None:
            pulumi.set(__self__, "studio_name", studio_name)

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="checkpointName")
    def checkpoint_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "checkpoint_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="studioName")
    def studio_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "studio_name")


@pulumi.output_type
class StudiosProgress(dict):
    def __init__(__self__, *,
                 message: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 warnings: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str status: must be one of ["pending", "in-progress", "succeeded", "errored"]
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        must be one of ["pending", "in-progress", "succeeded", "errored"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def warnings(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "warnings")


@pulumi.output_type
class StudiosStatusInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdate":
            suggest = "last_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosStatusInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosStatusInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosStatusInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_update: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str status: must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]
        """
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_update")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class StudiosTemplate(dict):
    def __init__(__self__, *,
                 icon: Optional[_builtins.str] = None,
                 repository: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 tool: Optional[_builtins.str] = None):
        """
        :param _builtins.str status: must be one of ["recommended", "deprecated", "experimental", "unsupported"]
        """
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tool is not None:
            pulumi.set(__self__, "tool", tool)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        must be one of ["recommended", "deprecated", "experimental", "unsupported"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tool(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tool")


@pulumi.output_type
class StudiosUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StudiosUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StudiosUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StudiosUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avatar: Optional[_builtins.str] = None,
                 email: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 user_name: Optional[_builtins.str] = None):
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def avatar(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "avatar")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TokensToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "lastUsed":
            suggest = "last_used"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TokensToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TokensToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TokensToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic_auth: Optional[_builtins.str] = None,
                 date_created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 last_used: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str basic_auth: Deprecated basic authentication string
        :param _builtins.str date_created: Timestamp when the token was created
        :param _builtins.float id: Unique numeric identifier for the access token (nullable)
        :param _builtins.str last_used: Timestamp when the token was last used for authentication
        :param _builtins.str name: Display name for the token (1-50 characters)
        """
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="basicAuth")
    @_utilities.deprecated("""Deprecated""")
    def basic_auth(self) -> Optional[_builtins.str]:
        """
        Deprecated basic authentication string
        """
        return pulumi.get(self, "basic_auth")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Timestamp when the token was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        """
        Unique numeric identifier for the access token (nullable)
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[_builtins.str]:
        """
        Timestamp when the token was last used for authentication
        """
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Display name for the token (1-50 characters)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WorkflowsJobInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exitCode":
            suggest = "exit_code"
        elif key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsJobInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsJobInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsJobInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exit_code: Optional[_builtins.float] = None,
                 id: Optional[_builtins.float] = None,
                 message: Optional[_builtins.str] = None,
                 operation_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        if exit_code is not None:
            pulumi.set(__self__, "exit_code", exit_code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "exit_code")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operation_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WorkflowsLabel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateCreated":
            suggest = "date_created"
        elif key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsLabel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsLabel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsLabel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.float] = None,
                 is_default: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 resource: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.float]:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.bool]:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkflowsPlatform(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WorkflowsProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "processesProgresses":
            suggest = "processes_progresses"
        elif key == "totalProcesses":
            suggest = "total_processes"
        elif key == "workflowProgress":
            suggest = "workflow_progress"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 processes_progresses: Optional[Sequence['outputs.WorkflowsProgressProcessesProgress']] = None,
                 total_processes: Optional[_builtins.float] = None,
                 workflow_progress: Optional['outputs.WorkflowsProgressWorkflowProgress'] = None):
        if processes_progresses is not None:
            pulumi.set(__self__, "processes_progresses", processes_progresses)
        if total_processes is not None:
            pulumi.set(__self__, "total_processes", total_processes)
        if workflow_progress is not None:
            pulumi.set(__self__, "workflow_progress", workflow_progress)

    @_builtins.property
    @pulumi.getter(name="processesProgresses")
    def processes_progresses(self) -> Optional[Sequence['outputs.WorkflowsProgressProcessesProgress']]:
        return pulumi.get(self, "processes_progresses")

    @_builtins.property
    @pulumi.getter(name="totalProcesses")
    def total_processes(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "total_processes")

    @_builtins.property
    @pulumi.getter(name="workflowProgress")
    def workflow_progress(self) -> Optional['outputs.WorkflowsProgressWorkflowProgress']:
        return pulumi.get(self, "workflow_progress")


@pulumi.output_type
class WorkflowsProgressProcessesProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuEfficiency":
            suggest = "cpu_efficiency"
        elif key == "cpuLoad":
            suggest = "cpu_load"
        elif key == "cpuTime":
            suggest = "cpu_time"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "invCtxSwitch":
            suggest = "inv_ctx_switch"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "loadCpus":
            suggest = "load_cpus"
        elif key == "loadMemory":
            suggest = "load_memory"
        elif key == "loadTasks":
            suggest = "load_tasks"
        elif key == "memoryEfficiency":
            suggest = "memory_efficiency"
        elif key == "memoryReq":
            suggest = "memory_req"
        elif key == "memoryRss":
            suggest = "memory_rss"
        elif key == "peakCpus":
            suggest = "peak_cpus"
        elif key == "peakMemory":
            suggest = "peak_memory"
        elif key == "peakTasks":
            suggest = "peak_tasks"
        elif key == "readBytes":
            suggest = "read_bytes"
        elif key == "volCtxSwitch":
            suggest = "vol_ctx_switch"
        elif key == "writeBytes":
            suggest = "write_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsProgressProcessesProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsProgressProcessesProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsProgressProcessesProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aborted: Optional[_builtins.float] = None,
                 cached: Optional[_builtins.float] = None,
                 cpu_efficiency: Optional[_builtins.float] = None,
                 cpu_load: Optional[_builtins.float] = None,
                 cpu_time: Optional[_builtins.float] = None,
                 cpus: Optional[_builtins.float] = None,
                 date_created: Optional[_builtins.str] = None,
                 failed: Optional[_builtins.float] = None,
                 inv_ctx_switch: Optional[_builtins.float] = None,
                 last_updated: Optional[_builtins.str] = None,
                 load_cpus: Optional[_builtins.float] = None,
                 load_memory: Optional[_builtins.float] = None,
                 load_tasks: Optional[_builtins.float] = None,
                 memory_efficiency: Optional[_builtins.float] = None,
                 memory_req: Optional[_builtins.float] = None,
                 memory_rss: Optional[_builtins.float] = None,
                 peak_cpus: Optional[_builtins.float] = None,
                 peak_memory: Optional[_builtins.float] = None,
                 peak_tasks: Optional[_builtins.float] = None,
                 pending: Optional[_builtins.float] = None,
                 process: Optional[_builtins.str] = None,
                 read_bytes: Optional[_builtins.float] = None,
                 running: Optional[_builtins.float] = None,
                 submitted: Optional[_builtins.float] = None,
                 succeeded: Optional[_builtins.float] = None,
                 vol_ctx_switch: Optional[_builtins.float] = None,
                 write_bytes: Optional[_builtins.float] = None):
        if aborted is not None:
            pulumi.set(__self__, "aborted", aborted)
        if cached is not None:
            pulumi.set(__self__, "cached", cached)
        if cpu_efficiency is not None:
            pulumi.set(__self__, "cpu_efficiency", cpu_efficiency)
        if cpu_load is not None:
            pulumi.set(__self__, "cpu_load", cpu_load)
        if cpu_time is not None:
            pulumi.set(__self__, "cpu_time", cpu_time)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if inv_ctx_switch is not None:
            pulumi.set(__self__, "inv_ctx_switch", inv_ctx_switch)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if load_cpus is not None:
            pulumi.set(__self__, "load_cpus", load_cpus)
        if load_memory is not None:
            pulumi.set(__self__, "load_memory", load_memory)
        if load_tasks is not None:
            pulumi.set(__self__, "load_tasks", load_tasks)
        if memory_efficiency is not None:
            pulumi.set(__self__, "memory_efficiency", memory_efficiency)
        if memory_req is not None:
            pulumi.set(__self__, "memory_req", memory_req)
        if memory_rss is not None:
            pulumi.set(__self__, "memory_rss", memory_rss)
        if peak_cpus is not None:
            pulumi.set(__self__, "peak_cpus", peak_cpus)
        if peak_memory is not None:
            pulumi.set(__self__, "peak_memory", peak_memory)
        if peak_tasks is not None:
            pulumi.set(__self__, "peak_tasks", peak_tasks)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if process is not None:
            pulumi.set(__self__, "process", process)
        if read_bytes is not None:
            pulumi.set(__self__, "read_bytes", read_bytes)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if submitted is not None:
            pulumi.set(__self__, "submitted", submitted)
        if succeeded is not None:
            pulumi.set(__self__, "succeeded", succeeded)
        if vol_ctx_switch is not None:
            pulumi.set(__self__, "vol_ctx_switch", vol_ctx_switch)
        if write_bytes is not None:
            pulumi.set(__self__, "write_bytes", write_bytes)

    @_builtins.property
    @pulumi.getter
    def aborted(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "aborted")

    @_builtins.property
    @pulumi.getter
    def cached(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cached")

    @_builtins.property
    @pulumi.getter(name="cpuEfficiency")
    def cpu_efficiency(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpu_efficiency")

    @_builtins.property
    @pulumi.getter(name="cpuLoad")
    @_utilities.deprecated("""Deprecated""")
    def cpu_load(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpu_load")

    @_builtins.property
    @pulumi.getter(name="cpuTime")
    @_utilities.deprecated("""Deprecated""")
    def cpu_time(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpu_time")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpus")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def failed(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "failed")

    @_builtins.property
    @pulumi.getter(name="invCtxSwitch")
    @_utilities.deprecated("""Deprecated""")
    def inv_ctx_switch(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "inv_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="loadCpus")
    def load_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "load_cpus")

    @_builtins.property
    @pulumi.getter(name="loadMemory")
    def load_memory(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "load_memory")

    @_builtins.property
    @pulumi.getter(name="loadTasks")
    @_utilities.deprecated("""Deprecated""")
    def load_tasks(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "load_tasks")

    @_builtins.property
    @pulumi.getter(name="memoryEfficiency")
    def memory_efficiency(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "memory_efficiency")

    @_builtins.property
    @pulumi.getter(name="memoryReq")
    @_utilities.deprecated("""Deprecated""")
    def memory_req(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "memory_req")

    @_builtins.property
    @pulumi.getter(name="memoryRss")
    @_utilities.deprecated("""Deprecated""")
    def memory_rss(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "memory_rss")

    @_builtins.property
    @pulumi.getter(name="peakCpus")
    def peak_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "peak_cpus")

    @_builtins.property
    @pulumi.getter(name="peakMemory")
    def peak_memory(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "peak_memory")

    @_builtins.property
    @pulumi.getter(name="peakTasks")
    def peak_tasks(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "peak_tasks")

    @_builtins.property
    @pulumi.getter
    def pending(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "pending")

    @_builtins.property
    @pulumi.getter
    def process(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "process")

    @_builtins.property
    @pulumi.getter(name="readBytes")
    @_utilities.deprecated("""Deprecated""")
    def read_bytes(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "read_bytes")

    @_builtins.property
    @pulumi.getter
    def running(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "running")

    @_builtins.property
    @pulumi.getter
    def submitted(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "submitted")

    @_builtins.property
    @pulumi.getter
    def succeeded(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "succeeded")

    @_builtins.property
    @pulumi.getter(name="volCtxSwitch")
    @_utilities.deprecated("""Deprecated""")
    def vol_ctx_switch(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "vol_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="writeBytes")
    @_utilities.deprecated("""Deprecated""")
    def write_bytes(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "write_bytes")


@pulumi.output_type
class WorkflowsProgressWorkflowProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuEfficiency":
            suggest = "cpu_efficiency"
        elif key == "cpuLoad":
            suggest = "cpu_load"
        elif key == "cpuTime":
            suggest = "cpu_time"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "invCtxSwitch":
            suggest = "inv_ctx_switch"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "loadCpus":
            suggest = "load_cpus"
        elif key == "loadMemory":
            suggest = "load_memory"
        elif key == "loadTasks":
            suggest = "load_tasks"
        elif key == "memoryEfficiency":
            suggest = "memory_efficiency"
        elif key == "memoryReq":
            suggest = "memory_req"
        elif key == "memoryRss":
            suggest = "memory_rss"
        elif key == "peakCpus":
            suggest = "peak_cpus"
        elif key == "peakMemory":
            suggest = "peak_memory"
        elif key == "peakTasks":
            suggest = "peak_tasks"
        elif key == "readBytes":
            suggest = "read_bytes"
        elif key == "volCtxSwitch":
            suggest = "vol_ctx_switch"
        elif key == "writeBytes":
            suggest = "write_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsProgressWorkflowProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsProgressWorkflowProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsProgressWorkflowProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aborted: Optional[_builtins.float] = None,
                 cached: Optional[_builtins.float] = None,
                 cost: Optional[_builtins.float] = None,
                 cpu_efficiency: Optional[_builtins.float] = None,
                 cpu_load: Optional[_builtins.float] = None,
                 cpu_time: Optional[_builtins.float] = None,
                 cpus: Optional[_builtins.float] = None,
                 date_created: Optional[_builtins.str] = None,
                 executors: Optional[Sequence[_builtins.str]] = None,
                 failed: Optional[_builtins.float] = None,
                 inv_ctx_switch: Optional[_builtins.float] = None,
                 last_updated: Optional[_builtins.str] = None,
                 load_cpus: Optional[_builtins.float] = None,
                 load_memory: Optional[_builtins.float] = None,
                 load_tasks: Optional[_builtins.float] = None,
                 memory_efficiency: Optional[_builtins.float] = None,
                 memory_req: Optional[_builtins.float] = None,
                 memory_rss: Optional[_builtins.float] = None,
                 peak_cpus: Optional[_builtins.float] = None,
                 peak_memory: Optional[_builtins.float] = None,
                 peak_tasks: Optional[_builtins.float] = None,
                 pending: Optional[_builtins.float] = None,
                 read_bytes: Optional[_builtins.float] = None,
                 running: Optional[_builtins.float] = None,
                 submitted: Optional[_builtins.float] = None,
                 succeeded: Optional[_builtins.float] = None,
                 vol_ctx_switch: Optional[_builtins.float] = None,
                 write_bytes: Optional[_builtins.float] = None):
        if aborted is not None:
            pulumi.set(__self__, "aborted", aborted)
        if cached is not None:
            pulumi.set(__self__, "cached", cached)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cpu_efficiency is not None:
            pulumi.set(__self__, "cpu_efficiency", cpu_efficiency)
        if cpu_load is not None:
            pulumi.set(__self__, "cpu_load", cpu_load)
        if cpu_time is not None:
            pulumi.set(__self__, "cpu_time", cpu_time)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if executors is not None:
            pulumi.set(__self__, "executors", executors)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if inv_ctx_switch is not None:
            pulumi.set(__self__, "inv_ctx_switch", inv_ctx_switch)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if load_cpus is not None:
            pulumi.set(__self__, "load_cpus", load_cpus)
        if load_memory is not None:
            pulumi.set(__self__, "load_memory", load_memory)
        if load_tasks is not None:
            pulumi.set(__self__, "load_tasks", load_tasks)
        if memory_efficiency is not None:
            pulumi.set(__self__, "memory_efficiency", memory_efficiency)
        if memory_req is not None:
            pulumi.set(__self__, "memory_req", memory_req)
        if memory_rss is not None:
            pulumi.set(__self__, "memory_rss", memory_rss)
        if peak_cpus is not None:
            pulumi.set(__self__, "peak_cpus", peak_cpus)
        if peak_memory is not None:
            pulumi.set(__self__, "peak_memory", peak_memory)
        if peak_tasks is not None:
            pulumi.set(__self__, "peak_tasks", peak_tasks)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if read_bytes is not None:
            pulumi.set(__self__, "read_bytes", read_bytes)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if submitted is not None:
            pulumi.set(__self__, "submitted", submitted)
        if succeeded is not None:
            pulumi.set(__self__, "succeeded", succeeded)
        if vol_ctx_switch is not None:
            pulumi.set(__self__, "vol_ctx_switch", vol_ctx_switch)
        if write_bytes is not None:
            pulumi.set(__self__, "write_bytes", write_bytes)

    @_builtins.property
    @pulumi.getter
    def aborted(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "aborted")

    @_builtins.property
    @pulumi.getter
    def cached(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cached")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="cpuEfficiency")
    def cpu_efficiency(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpu_efficiency")

    @_builtins.property
    @pulumi.getter(name="cpuLoad")
    def cpu_load(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpu_load")

    @_builtins.property
    @pulumi.getter(name="cpuTime")
    def cpu_time(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpu_time")

    @_builtins.property
    @pulumi.getter
    def cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cpus")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def executors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "executors")

    @_builtins.property
    @pulumi.getter
    def failed(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "failed")

    @_builtins.property
    @pulumi.getter(name="invCtxSwitch")
    def inv_ctx_switch(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "inv_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="loadCpus")
    def load_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "load_cpus")

    @_builtins.property
    @pulumi.getter(name="loadMemory")
    def load_memory(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "load_memory")

    @_builtins.property
    @pulumi.getter(name="loadTasks")
    def load_tasks(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "load_tasks")

    @_builtins.property
    @pulumi.getter(name="memoryEfficiency")
    def memory_efficiency(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "memory_efficiency")

    @_builtins.property
    @pulumi.getter(name="memoryReq")
    def memory_req(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "memory_req")

    @_builtins.property
    @pulumi.getter(name="memoryRss")
    def memory_rss(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "memory_rss")

    @_builtins.property
    @pulumi.getter(name="peakCpus")
    def peak_cpus(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "peak_cpus")

    @_builtins.property
    @pulumi.getter(name="peakMemory")
    def peak_memory(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "peak_memory")

    @_builtins.property
    @pulumi.getter(name="peakTasks")
    def peak_tasks(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "peak_tasks")

    @_builtins.property
    @pulumi.getter
    def pending(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "pending")

    @_builtins.property
    @pulumi.getter(name="readBytes")
    def read_bytes(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "read_bytes")

    @_builtins.property
    @pulumi.getter
    def running(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "running")

    @_builtins.property
    @pulumi.getter
    def submitted(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "submitted")

    @_builtins.property
    @pulumi.getter
    def succeeded(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "succeeded")

    @_builtins.property
    @pulumi.getter(name="volCtxSwitch")
    def vol_ctx_switch(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "vol_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="writeBytes")
    def write_bytes(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "write_bytes")


@pulumi.output_type
class WorkflowsWorkflow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLine":
            suggest = "command_line"
        elif key == "commitId":
            suggest = "commit_id"
        elif key == "configFiles":
            suggest = "config_files"
        elif key == "configText":
            suggest = "config_text"
        elif key == "containerEngine":
            suggest = "container_engine"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "errorReport":
            suggest = "error_report"
        elif key == "exitStatus":
            suggest = "exit_status"
        elif key == "homeDir":
            suggest = "home_dir"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "launchDir":
            suggest = "launch_dir"
        elif key == "launchId":
            suggest = "launch_id"
        elif key == "logFile":
            suggest = "log_file"
        elif key == "operationId":
            suggest = "operation_id"
        elif key == "outFile":
            suggest = "out_file"
        elif key == "ownerId":
            suggest = "owner_id"
        elif key == "projectDir":
            suggest = "project_dir"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "requiresAttention":
            suggest = "requires_attention"
        elif key == "runName":
            suggest = "run_name"
        elif key == "scriptFile":
            suggest = "script_file"
        elif key == "scriptId":
            suggest = "script_id"
        elif key == "scriptName":
            suggest = "script_name"
        elif key == "sessionId":
            suggest = "session_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsWorkflow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsWorkflow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsWorkflow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line: Optional[_builtins.str] = None,
                 commit_id: Optional[_builtins.str] = None,
                 complete: Optional[_builtins.str] = None,
                 config_files: Optional[Sequence[_builtins.str]] = None,
                 config_text: Optional[_builtins.str] = None,
                 container: Optional[_builtins.str] = None,
                 container_engine: Optional[_builtins.str] = None,
                 date_created: Optional[_builtins.str] = None,
                 deleted: Optional[_builtins.bool] = None,
                 duration: Optional[_builtins.float] = None,
                 error_message: Optional[_builtins.str] = None,
                 error_report: Optional[_builtins.str] = None,
                 exit_status: Optional[_builtins.float] = None,
                 home_dir: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 last_updated: Optional[_builtins.str] = None,
                 launch_dir: Optional[_builtins.str] = None,
                 launch_id: Optional[_builtins.str] = None,
                 log_file: Optional[_builtins.str] = None,
                 manifest: Optional['outputs.WorkflowsWorkflowManifest'] = None,
                 nextflow: Optional['outputs.WorkflowsWorkflowNextflow'] = None,
                 operation_id: Optional[_builtins.str] = None,
                 out_file: Optional[_builtins.str] = None,
                 owner_id: Optional[_builtins.float] = None,
                 params: Optional[Mapping[str, _builtins.str]] = None,
                 profile: Optional[_builtins.str] = None,
                 project_dir: Optional[_builtins.str] = None,
                 project_name: Optional[_builtins.str] = None,
                 repository: Optional[_builtins.str] = None,
                 requires_attention: Optional[_builtins.bool] = None,
                 resume: Optional[_builtins.bool] = None,
                 revision: Optional[_builtins.str] = None,
                 run_name: Optional[_builtins.str] = None,
                 script_file: Optional[_builtins.str] = None,
                 script_id: Optional[_builtins.str] = None,
                 script_name: Optional[_builtins.str] = None,
                 session_id: Optional[_builtins.str] = None,
                 start: Optional[_builtins.str] = None,
                 stats: Optional['outputs.WorkflowsWorkflowStats'] = None,
                 status: Optional[_builtins.str] = None,
                 submit: Optional[_builtins.str] = None,
                 success: Optional[_builtins.bool] = None,
                 user_name: Optional[_builtins.str] = None,
                 work_dir: Optional[_builtins.str] = None):
        """
        :param _builtins.str status: must be one of ["SUBMITTED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "UNKNOWN"]
        """
        if command_line is not None:
            pulumi.set(__self__, "command_line", command_line)
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if complete is not None:
            pulumi.set(__self__, "complete", complete)
        if config_files is not None:
            pulumi.set(__self__, "config_files", config_files)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if container_engine is not None:
            pulumi.set(__self__, "container_engine", container_engine)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_report is not None:
            pulumi.set(__self__, "error_report", error_report)
        if exit_status is not None:
            pulumi.set(__self__, "exit_status", exit_status)
        if home_dir is not None:
            pulumi.set(__self__, "home_dir", home_dir)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if launch_dir is not None:
            pulumi.set(__self__, "launch_dir", launch_dir)
        if launch_id is not None:
            pulumi.set(__self__, "launch_id", launch_id)
        if log_file is not None:
            pulumi.set(__self__, "log_file", log_file)
        if manifest is not None:
            pulumi.set(__self__, "manifest", manifest)
        if nextflow is not None:
            pulumi.set(__self__, "nextflow", nextflow)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if out_file is not None:
            pulumi.set(__self__, "out_file", out_file)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if project_dir is not None:
            pulumi.set(__self__, "project_dir", project_dir)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if requires_attention is not None:
            pulumi.set(__self__, "requires_attention", requires_attention)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if script_file is not None:
            pulumi.set(__self__, "script_file", script_file)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if script_name is not None:
            pulumi.set(__self__, "script_name", script_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if stats is not None:
            pulumi.set(__self__, "stats", stats)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)
        if success is not None:
            pulumi.set(__self__, "success", success)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "command_line")

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "commit_id")

    @_builtins.property
    @pulumi.getter
    def complete(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "complete")

    @_builtins.property
    @pulumi.getter(name="configFiles")
    def config_files(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "config_files")

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "config_text")

    @_builtins.property
    @pulumi.getter
    def container(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter(name="containerEngine")
    def container_engine(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "container_engine")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="errorReport")
    def error_report(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "error_report")

    @_builtins.property
    @pulumi.getter(name="exitStatus")
    def exit_status(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "exit_status")

    @_builtins.property
    @pulumi.getter(name="homeDir")
    def home_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "home_dir")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="launchId")
    def launch_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "launch_id")

    @_builtins.property
    @pulumi.getter(name="logFile")
    def log_file(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "log_file")

    @_builtins.property
    @pulumi.getter
    def manifest(self) -> Optional['outputs.WorkflowsWorkflowManifest']:
        return pulumi.get(self, "manifest")

    @_builtins.property
    @pulumi.getter
    def nextflow(self) -> Optional['outputs.WorkflowsWorkflowNextflow']:
        return pulumi.get(self, "nextflow")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operation_id")

    @_builtins.property
    @pulumi.getter(name="outFile")
    def out_file(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "out_file")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="projectDir")
    def project_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project_dir")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="requiresAttention")
    def requires_attention(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "requires_attention")

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "resume")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "run_name")

    @_builtins.property
    @pulumi.getter(name="scriptFile")
    def script_file(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "script_file")

    @_builtins.property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "script_id")

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "script_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter
    def start(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start")

    @_builtins.property
    @pulumi.getter
    def stats(self) -> Optional['outputs.WorkflowsWorkflowStats']:
        return pulumi.get(self, "stats")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        must be one of ["SUBMITTED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "UNKNOWN"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def submit(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "submit")

    @_builtins.property
    @pulumi.getter
    def success(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "success")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class WorkflowsWorkflowManifest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "homePage":
            suggest = "home_page"
        elif key == "mainScript":
            suggest = "main_script"
        elif key == "nextflowVersion":
            suggest = "nextflow_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsWorkflowManifest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsWorkflowManifest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsWorkflowManifest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[_builtins.str] = None,
                 default_branch: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 gitmodules: Optional[_builtins.str] = None,
                 home_page: Optional[_builtins.str] = None,
                 icon: Optional[_builtins.str] = None,
                 main_script: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 nextflow_version: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gitmodules is not None:
            pulumi.set(__self__, "gitmodules", gitmodules)
        if home_page is not None:
            pulumi.set(__self__, "home_page", home_page)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nextflow_version is not None:
            pulumi.set(__self__, "nextflow_version", nextflow_version)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def author(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "author")

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "default_branch")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def gitmodules(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gitmodules")

    @_builtins.property
    @pulumi.getter(name="homePage")
    def home_page(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "home_page")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "main_script")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextflowVersion")
    def nextflow_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "nextflow_version")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class WorkflowsWorkflowNextflow(dict):
    def __init__(__self__, *,
                 build: Optional[_builtins.str] = None,
                 timestamp: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        if build is not None:
            pulumi.set(__self__, "build", build)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def build(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class WorkflowsWorkflowStats(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cachedCount":
            suggest = "cached_count"
        elif key == "cachedCountFmt":
            suggest = "cached_count_fmt"
        elif key == "cachedDuration":
            suggest = "cached_duration"
        elif key == "cachedPct":
            suggest = "cached_pct"
        elif key == "computeTimeFmt":
            suggest = "compute_time_fmt"
        elif key == "failedCount":
            suggest = "failed_count"
        elif key == "failedCountFmt":
            suggest = "failed_count_fmt"
        elif key == "failedDuration":
            suggest = "failed_duration"
        elif key == "failedPct":
            suggest = "failed_pct"
        elif key == "ignoredCount":
            suggest = "ignored_count"
        elif key == "ignoredCountFmt":
            suggest = "ignored_count_fmt"
        elif key == "ignoredPct":
            suggest = "ignored_pct"
        elif key == "succeedCount":
            suggest = "succeed_count"
        elif key == "succeedCountFmt":
            suggest = "succeed_count_fmt"
        elif key == "succeedDuration":
            suggest = "succeed_duration"
        elif key == "succeedPct":
            suggest = "succeed_pct"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowsWorkflowStats. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowsWorkflowStats.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowsWorkflowStats.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cached_count: Optional[_builtins.float] = None,
                 cached_count_fmt: Optional[_builtins.str] = None,
                 cached_duration: Optional[_builtins.float] = None,
                 cached_pct: Optional[_builtins.float] = None,
                 compute_time_fmt: Optional[_builtins.str] = None,
                 failed_count: Optional[_builtins.float] = None,
                 failed_count_fmt: Optional[_builtins.str] = None,
                 failed_duration: Optional[_builtins.float] = None,
                 failed_pct: Optional[_builtins.float] = None,
                 ignored_count: Optional[_builtins.float] = None,
                 ignored_count_fmt: Optional[_builtins.str] = None,
                 ignored_pct: Optional[_builtins.float] = None,
                 succeed_count: Optional[_builtins.float] = None,
                 succeed_count_fmt: Optional[_builtins.str] = None,
                 succeed_duration: Optional[_builtins.float] = None,
                 succeed_pct: Optional[_builtins.float] = None):
        if cached_count is not None:
            pulumi.set(__self__, "cached_count", cached_count)
        if cached_count_fmt is not None:
            pulumi.set(__self__, "cached_count_fmt", cached_count_fmt)
        if cached_duration is not None:
            pulumi.set(__self__, "cached_duration", cached_duration)
        if cached_pct is not None:
            pulumi.set(__self__, "cached_pct", cached_pct)
        if compute_time_fmt is not None:
            pulumi.set(__self__, "compute_time_fmt", compute_time_fmt)
        if failed_count is not None:
            pulumi.set(__self__, "failed_count", failed_count)
        if failed_count_fmt is not None:
            pulumi.set(__self__, "failed_count_fmt", failed_count_fmt)
        if failed_duration is not None:
            pulumi.set(__self__, "failed_duration", failed_duration)
        if failed_pct is not None:
            pulumi.set(__self__, "failed_pct", failed_pct)
        if ignored_count is not None:
            pulumi.set(__self__, "ignored_count", ignored_count)
        if ignored_count_fmt is not None:
            pulumi.set(__self__, "ignored_count_fmt", ignored_count_fmt)
        if ignored_pct is not None:
            pulumi.set(__self__, "ignored_pct", ignored_pct)
        if succeed_count is not None:
            pulumi.set(__self__, "succeed_count", succeed_count)
        if succeed_count_fmt is not None:
            pulumi.set(__self__, "succeed_count_fmt", succeed_count_fmt)
        if succeed_duration is not None:
            pulumi.set(__self__, "succeed_duration", succeed_duration)
        if succeed_pct is not None:
            pulumi.set(__self__, "succeed_pct", succeed_pct)

    @_builtins.property
    @pulumi.getter(name="cachedCount")
    def cached_count(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cached_count")

    @_builtins.property
    @pulumi.getter(name="cachedCountFmt")
    def cached_count_fmt(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cached_count_fmt")

    @_builtins.property
    @pulumi.getter(name="cachedDuration")
    def cached_duration(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cached_duration")

    @_builtins.property
    @pulumi.getter(name="cachedPct")
    def cached_pct(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "cached_pct")

    @_builtins.property
    @pulumi.getter(name="computeTimeFmt")
    def compute_time_fmt(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "compute_time_fmt")

    @_builtins.property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "failed_count")

    @_builtins.property
    @pulumi.getter(name="failedCountFmt")
    def failed_count_fmt(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "failed_count_fmt")

    @_builtins.property
    @pulumi.getter(name="failedDuration")
    def failed_duration(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "failed_duration")

    @_builtins.property
    @pulumi.getter(name="failedPct")
    def failed_pct(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "failed_pct")

    @_builtins.property
    @pulumi.getter(name="ignoredCount")
    def ignored_count(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "ignored_count")

    @_builtins.property
    @pulumi.getter(name="ignoredCountFmt")
    def ignored_count_fmt(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ignored_count_fmt")

    @_builtins.property
    @pulumi.getter(name="ignoredPct")
    def ignored_pct(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "ignored_pct")

    @_builtins.property
    @pulumi.getter(name="succeedCount")
    def succeed_count(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "succeed_count")

    @_builtins.property
    @pulumi.getter(name="succeedCountFmt")
    def succeed_count_fmt(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "succeed_count_fmt")

    @_builtins.property
    @pulumi.getter(name="succeedDuration")
    def succeed_duration(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "succeed_duration")

    @_builtins.property
    @pulumi.getter(name="succeedPct")
    def succeed_pct(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "succeed_pct")


@pulumi.output_type
class GetActionConfigResult(dict):
    def __init__(__self__, *,
                 github: 'outputs.GetActionConfigGithubResult',
                 tower: 'outputs.GetActionConfigTowerResult'):
        pulumi.set(__self__, "github", github)
        pulumi.set(__self__, "tower", tower)

    @_builtins.property
    @pulumi.getter
    def github(self) -> 'outputs.GetActionConfigGithubResult':
        return pulumi.get(self, "github")

    @_builtins.property
    @pulumi.getter
    def tower(self) -> 'outputs.GetActionConfigTowerResult':
        return pulumi.get(self, "tower")


@pulumi.output_type
class GetActionConfigGithubResult(dict):
    def __init__(__self__, *,
                 discriminator: _builtins.str,
                 events: Sequence[_builtins.str]):
        pulumi.set(__self__, "discriminator", discriminator)
        pulumi.set(__self__, "events", events)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> _builtins.str:
        return pulumi.get(self, "discriminator")

    @_builtins.property
    @pulumi.getter
    def events(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "events")


@pulumi.output_type
class GetActionConfigTowerResult(dict):
    def __init__(__self__, *,
                 discriminator: _builtins.str):
        pulumi.set(__self__, "discriminator", discriminator)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> _builtins.str:
        return pulumi.get(self, "discriminator")


@pulumi.output_type
class GetActionEventResult(dict):
    def __init__(__self__, *,
                 github: 'outputs.GetActionEventGithubResult',
                 tower: 'outputs.GetActionEventTowerResult'):
        pulumi.set(__self__, "github", github)
        pulumi.set(__self__, "tower", tower)

    @_builtins.property
    @pulumi.getter
    def github(self) -> 'outputs.GetActionEventGithubResult':
        return pulumi.get(self, "github")

    @_builtins.property
    @pulumi.getter
    def tower(self) -> 'outputs.GetActionEventTowerResult':
        return pulumi.get(self, "tower")


@pulumi.output_type
class GetActionEventGithubResult(dict):
    def __init__(__self__, *,
                 commit_id: _builtins.str,
                 commit_message: _builtins.str,
                 discriminator: _builtins.str,
                 pusher_email: _builtins.str,
                 pusher_name: _builtins.str,
                 ref: _builtins.str,
                 timestamp: _builtins.str):
        pulumi.set(__self__, "commit_id", commit_id)
        pulumi.set(__self__, "commit_message", commit_message)
        pulumi.set(__self__, "discriminator", discriminator)
        pulumi.set(__self__, "pusher_email", pusher_email)
        pulumi.set(__self__, "pusher_name", pusher_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "timestamp", timestamp)

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> _builtins.str:
        return pulumi.get(self, "commit_id")

    @_builtins.property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> _builtins.str:
        return pulumi.get(self, "commit_message")

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> _builtins.str:
        return pulumi.get(self, "discriminator")

    @_builtins.property
    @pulumi.getter(name="pusherEmail")
    def pusher_email(self) -> _builtins.str:
        return pulumi.get(self, "pusher_email")

    @_builtins.property
    @pulumi.getter(name="pusherName")
    def pusher_name(self) -> _builtins.str:
        return pulumi.get(self, "pusher_name")

    @_builtins.property
    @pulumi.getter
    def ref(self) -> _builtins.str:
        return pulumi.get(self, "ref")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.str:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetActionEventTowerResult(dict):
    def __init__(__self__, *,
                 discriminator: _builtins.str,
                 timestamp: _builtins.str,
                 workflow_id: _builtins.str):
        pulumi.set(__self__, "discriminator", discriminator)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "workflow_id", workflow_id)

    @_builtins.property
    @pulumi.getter
    def discriminator(self) -> _builtins.str:
        return pulumi.get(self, "discriminator")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.str:
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> _builtins.str:
        return pulumi.get(self, "workflow_id")


@pulumi.output_type
class GetActionLabelResult(dict):
    def __init__(__self__, *,
                 date_created: _builtins.str,
                 id: _builtins.float,
                 is_default: _builtins.bool,
                 name: _builtins.str,
                 resource: _builtins.bool,
                 value: _builtins.str):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.bool:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchResult(dict):
    def __init__(__self__, *,
                 compute_env: 'outputs.GetActionLaunchComputeEnvResult',
                 config_profiles: Sequence[_builtins.str],
                 config_text: _builtins.str,
                 date_created: _builtins.str,
                 entry_name: _builtins.str,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 id: _builtins.str,
                 last_updated: _builtins.str,
                 launch_container: _builtins.str,
                 main_script: _builtins.str,
                 optimization_id: _builtins.str,
                 optimization_targets: _builtins.str,
                 params_text: _builtins.str,
                 pipeline: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 pull_latest: _builtins.bool,
                 resume: _builtins.bool,
                 resume_launch_id: _builtins.str,
                 revision: _builtins.str,
                 run_name: _builtins.str,
                 schema_name: _builtins.str,
                 session_id: _builtins.str,
                 stub_run: _builtins.bool,
                 tower_config: _builtins.str,
                 user_secrets: Sequence[_builtins.str],
                 work_dir: _builtins.str,
                 workspace_secrets: Sequence[_builtins.str]):
        """
        :param _builtins.str post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        :param _builtins.str pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        pulumi.set(__self__, "compute_env", compute_env)
        pulumi.set(__self__, "config_profiles", config_profiles)
        pulumi.set(__self__, "config_text", config_text)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "entry_name", entry_name)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "launch_container", launch_container)
        pulumi.set(__self__, "main_script", main_script)
        pulumi.set(__self__, "optimization_id", optimization_id)
        pulumi.set(__self__, "optimization_targets", optimization_targets)
        pulumi.set(__self__, "params_text", params_text)
        pulumi.set(__self__, "pipeline", pipeline)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "pull_latest", pull_latest)
        pulumi.set(__self__, "resume", resume)
        pulumi.set(__self__, "resume_launch_id", resume_launch_id)
        pulumi.set(__self__, "revision", revision)
        pulumi.set(__self__, "run_name", run_name)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "session_id", session_id)
        pulumi.set(__self__, "stub_run", stub_run)
        pulumi.set(__self__, "tower_config", tower_config)
        pulumi.set(__self__, "user_secrets", user_secrets)
        pulumi.set(__self__, "work_dir", work_dir)
        pulumi.set(__self__, "workspace_secrets", workspace_secrets)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> 'outputs.GetActionLaunchComputeEnvResult':
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "config_profiles")

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> _builtins.str:
        return pulumi.get(self, "config_text")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> _builtins.str:
        return pulumi.get(self, "entry_name")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> _builtins.str:
        return pulumi.get(self, "launch_container")

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> _builtins.str:
        return pulumi.get(self, "main_script")

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> _builtins.str:
        return pulumi.get(self, "optimization_id")

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> _builtins.str:
        return pulumi.get(self, "optimization_targets")

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> _builtins.str:
        return pulumi.get(self, "params_text")

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> _builtins.str:
        return pulumi.get(self, "pipeline")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> _builtins.bool:
        return pulumi.get(self, "pull_latest")

    @_builtins.property
    @pulumi.getter
    def resume(self) -> _builtins.bool:
        return pulumi.get(self, "resume")

    @_builtins.property
    @pulumi.getter(name="resumeLaunchId")
    def resume_launch_id(self) -> _builtins.str:
        return pulumi.get(self, "resume_launch_id")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> _builtins.str:
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> _builtins.str:
        return pulumi.get(self, "run_name")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> _builtins.str:
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> _builtins.bool:
        return pulumi.get(self, "stub_run")

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> _builtins.str:
        return pulumi.get(self, "tower_config")

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_secrets")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "workspace_secrets")


@pulumi.output_type
class GetActionLaunchComputeEnvResult(dict):
    def __init__(__self__, *,
                 compute_env_id: _builtins.str,
                 config: 'outputs.GetActionLaunchComputeEnvConfigResult',
                 credentials_id: _builtins.str,
                 date_created: _builtins.str,
                 deleted: _builtins.bool,
                 description: _builtins.str,
                 last_updated: _builtins.str,
                 last_used: _builtins.str,
                 message: _builtins.str,
                 name: _builtins.str,
                 org_id: _builtins.float,
                 platform: _builtins.str,
                 primary: _builtins.bool,
                 status: _builtins.str,
                 workspace_id: _builtins.float):
        """
        :param 'GetActionLaunchComputeEnvConfigArgs' config: Configuration settings for compute environments including work directories,
               pre/post run scripts, and environment-specific parameters.
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "last_used", last_used)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> _builtins.str:
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter
    def config(self) -> 'outputs.GetActionLaunchComputeEnvConfigResult':
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> _builtins.str:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> _builtins.str:
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.float:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> _builtins.bool:
        return pulumi.get(self, "primary")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigResult(dict):
    def __init__(__self__, *,
                 altair_platform: 'outputs.GetActionLaunchComputeEnvConfigAltairPlatformResult',
                 aws_batch: 'outputs.GetActionLaunchComputeEnvConfigAwsBatchResult',
                 aws_cloud: 'outputs.GetActionLaunchComputeEnvConfigAwsCloudResult',
                 azure_batch: 'outputs.GetActionLaunchComputeEnvConfigAzureBatchResult',
                 eks_platform: 'outputs.GetActionLaunchComputeEnvConfigEksPlatformResult',
                 gke_platform: 'outputs.GetActionLaunchComputeEnvConfigGkePlatformResult',
                 google_batch: 'outputs.GetActionLaunchComputeEnvConfigGoogleBatchResult',
                 google_lifesciences: 'outputs.GetActionLaunchComputeEnvConfigGoogleLifesciencesResult',
                 k8s_platform: 'outputs.GetActionLaunchComputeEnvConfigK8sPlatformResult',
                 lsf_platform: 'outputs.GetActionLaunchComputeEnvConfigLsfPlatformResult',
                 moab_platform: 'outputs.GetActionLaunchComputeEnvConfigMoabPlatformResult',
                 seqeracompute_platform: 'outputs.GetActionLaunchComputeEnvConfigSeqeracomputePlatformResult',
                 slurm_platform: 'outputs.GetActionLaunchComputeEnvConfigSlurmPlatformResult',
                 uge_platform: 'outputs.GetActionLaunchComputeEnvConfigUgePlatformResult'):
        pulumi.set(__self__, "altair_platform", altair_platform)
        pulumi.set(__self__, "aws_batch", aws_batch)
        pulumi.set(__self__, "aws_cloud", aws_cloud)
        pulumi.set(__self__, "azure_batch", azure_batch)
        pulumi.set(__self__, "eks_platform", eks_platform)
        pulumi.set(__self__, "gke_platform", gke_platform)
        pulumi.set(__self__, "google_batch", google_batch)
        pulumi.set(__self__, "google_lifesciences", google_lifesciences)
        pulumi.set(__self__, "k8s_platform", k8s_platform)
        pulumi.set(__self__, "lsf_platform", lsf_platform)
        pulumi.set(__self__, "moab_platform", moab_platform)
        pulumi.set(__self__, "seqeracompute_platform", seqeracompute_platform)
        pulumi.set(__self__, "slurm_platform", slurm_platform)
        pulumi.set(__self__, "uge_platform", uge_platform)

    @_builtins.property
    @pulumi.getter(name="altairPlatform")
    def altair_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigAltairPlatformResult':
        return pulumi.get(self, "altair_platform")

    @_builtins.property
    @pulumi.getter(name="awsBatch")
    def aws_batch(self) -> 'outputs.GetActionLaunchComputeEnvConfigAwsBatchResult':
        return pulumi.get(self, "aws_batch")

    @_builtins.property
    @pulumi.getter(name="awsCloud")
    def aws_cloud(self) -> 'outputs.GetActionLaunchComputeEnvConfigAwsCloudResult':
        return pulumi.get(self, "aws_cloud")

    @_builtins.property
    @pulumi.getter(name="azureBatch")
    def azure_batch(self) -> 'outputs.GetActionLaunchComputeEnvConfigAzureBatchResult':
        return pulumi.get(self, "azure_batch")

    @_builtins.property
    @pulumi.getter(name="eksPlatform")
    def eks_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigEksPlatformResult':
        return pulumi.get(self, "eks_platform")

    @_builtins.property
    @pulumi.getter(name="gkePlatform")
    def gke_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigGkePlatformResult':
        return pulumi.get(self, "gke_platform")

    @_builtins.property
    @pulumi.getter(name="googleBatch")
    def google_batch(self) -> 'outputs.GetActionLaunchComputeEnvConfigGoogleBatchResult':
        return pulumi.get(self, "google_batch")

    @_builtins.property
    @pulumi.getter(name="googleLifesciences")
    def google_lifesciences(self) -> 'outputs.GetActionLaunchComputeEnvConfigGoogleLifesciencesResult':
        return pulumi.get(self, "google_lifesciences")

    @_builtins.property
    @pulumi.getter(name="k8sPlatform")
    def k8s_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigK8sPlatformResult':
        return pulumi.get(self, "k8s_platform")

    @_builtins.property
    @pulumi.getter(name="lsfPlatform")
    def lsf_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigLsfPlatformResult':
        return pulumi.get(self, "lsf_platform")

    @_builtins.property
    @pulumi.getter(name="moabPlatform")
    def moab_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigMoabPlatformResult':
        return pulumi.get(self, "moab_platform")

    @_builtins.property
    @pulumi.getter(name="seqeracomputePlatform")
    def seqeracompute_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigSeqeracomputePlatformResult':
        return pulumi.get(self, "seqeracompute_platform")

    @_builtins.property
    @pulumi.getter(name="slurmPlatform")
    def slurm_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigSlurmPlatformResult':
        return pulumi.get(self, "slurm_platform")

    @_builtins.property
    @pulumi.getter(name="ugePlatform")
    def uge_platform(self) -> 'outputs.GetActionLaunchComputeEnvConfigUgePlatformResult':
        return pulumi.get(self, "uge_platform")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAltairPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigAltairPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigAltairPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigAltairPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAltairPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAwsBatchResult(dict):
    def __init__(__self__, *,
                 cli_path: _builtins.str,
                 compute_job_role: _builtins.str,
                 compute_queue: _builtins.str,
                 dragen_instance_type: _builtins.str,
                 dragen_queue: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigAwsBatchEnvironmentResult'],
                 execution_role: _builtins.str,
                 forge: 'outputs.GetActionLaunchComputeEnvConfigAwsBatchForgeResult',
                 fusion2_enabled: _builtins.bool,
                 fusion_snapshots: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_job_role: _builtins.str,
                 head_queue: _builtins.str,
                 log_group: _builtins.str,
                 lustre_id: _builtins.str,
                 nextflow_config: _builtins.str,
                 nvnme_storage_enabled: _builtins.bool,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 storage_type: _builtins.str,
                 volumes: Sequence[_builtins.str],
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigAwsBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cli_path", cli_path)
        pulumi.set(__self__, "compute_job_role", compute_job_role)
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "dragen_queue", dragen_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "execution_role", execution_role)
        pulumi.set(__self__, "forge", forge)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_job_role", head_job_role)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "log_group", log_group)
        pulumi.set(__self__, "lustre_id", lustre_id)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> _builtins.str:
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> _builtins.str:
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> _builtins.str:
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigAwsBatchEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> _builtins.str:
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> 'outputs.GetActionLaunchComputeEnvConfigAwsBatchForgeResult':
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> _builtins.str:
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> _builtins.str:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> _builtins.str:
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> _builtins.str:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAwsBatchEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAwsBatchForgeResult(dict):
    def __init__(__self__, *,
                 alloc_strategy: _builtins.str,
                 allow_buckets: Sequence[_builtins.str],
                 arm64_enabled: _builtins.bool,
                 bid_percentage: _builtins.float,
                 dispose_on_deletion: _builtins.bool,
                 dragen_ami_id: _builtins.str,
                 dragen_enabled: _builtins.bool,
                 dragen_instance_type: _builtins.str,
                 ebs_auto_scale: _builtins.bool,
                 ebs_block_size: _builtins.float,
                 ebs_boot_size: _builtins.float,
                 ec2_key_pair: _builtins.str,
                 ecs_config: _builtins.str,
                 efs_create: _builtins.bool,
                 efs_id: _builtins.str,
                 efs_mount: _builtins.str,
                 fargate_head_enabled: _builtins.bool,
                 fsx_mount: _builtins.str,
                 fsx_name: _builtins.str,
                 fsx_size: _builtins.float,
                 fusion_enabled: _builtins.bool,
                 gpu_enabled: _builtins.bool,
                 image_id: _builtins.str,
                 instance_types: Sequence[_builtins.str],
                 max_cpus: _builtins.float,
                 min_cpus: _builtins.float,
                 security_groups: Sequence[_builtins.str],
                 subnets: Sequence[_builtins.str],
                 type: _builtins.str,
                 vpc_id: _builtins.str):
        pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        pulumi.set(__self__, "allow_buckets", allow_buckets)
        pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        pulumi.set(__self__, "bid_percentage", bid_percentage)
        pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        pulumi.set(__self__, "ecs_config", ecs_config)
        pulumi.set(__self__, "efs_create", efs_create)
        pulumi.set(__self__, "efs_id", efs_id)
        pulumi.set(__self__, "efs_mount", efs_mount)
        pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        pulumi.set(__self__, "fsx_mount", fsx_mount)
        pulumi.set(__self__, "fsx_name", fsx_name)
        pulumi.set(__self__, "fsx_size", fsx_size)
        pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "max_cpus", max_cpus)
        pulumi.set(__self__, "min_cpus", min_cpus)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> _builtins.str:
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> _builtins.float:
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> _builtins.bool:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> _builtins.str:
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> _builtins.bool:
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> _builtins.str:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> _builtins.str:
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> _builtins.bool:
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> _builtins.str:
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> _builtins.str:
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> _builtins.str:
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> _builtins.str:
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> _builtins.float:
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> _builtins.float:
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> _builtins.float:
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAwsCloudResult(dict):
    def __init__(__self__, *,
                 allow_buckets: Sequence[_builtins.str],
                 arm64_enabled: _builtins.bool,
                 ebs_boot_size: _builtins.float,
                 ec2_key_pair: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigAwsCloudEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 gpu_enabled: _builtins.bool,
                 image_id: _builtins.str,
                 instance_profile_arn: _builtins.str,
                 instance_type: _builtins.str,
                 log_group: _builtins.str,
                 nextflow_config: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 security_groups: Sequence[_builtins.str],
                 subnet_id: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigAwsCloudEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "allow_buckets", allow_buckets)
        pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "log_group", log_group)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> _builtins.str:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigAwsCloudEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> _builtins.str:
        return pulumi.get(self, "instance_profile_arn")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> _builtins.str:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAwsCloudEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAzureBatchResult(dict):
    def __init__(__self__, *,
                 auto_pool_mode: _builtins.bool,
                 delete_jobs_on_completion: _builtins.str,
                 delete_pools_on_completion: _builtins.bool,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigAzureBatchEnvironmentResult'],
                 forge: 'outputs.GetActionLaunchComputeEnvConfigAzureBatchForgeResult',
                 fusion2_enabled: _builtins.bool,
                 head_pool: _builtins.str,
                 managed_identity_client_id: _builtins.str,
                 nextflow_config: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 token_duration: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigAzureBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "auto_pool_mode", auto_pool_mode)
        pulumi.set(__self__, "delete_jobs_on_completion", delete_jobs_on_completion)
        pulumi.set(__self__, "delete_pools_on_completion", delete_pools_on_completion)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "forge", forge)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_pool", head_pool)
        pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_duration", token_duration)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="autoPoolMode")
    @_utilities.deprecated("""Deprecated""")
    def auto_pool_mode(self) -> _builtins.bool:
        return pulumi.get(self, "auto_pool_mode")

    @_builtins.property
    @pulumi.getter(name="deleteJobsOnCompletion")
    def delete_jobs_on_completion(self) -> _builtins.str:
        return pulumi.get(self, "delete_jobs_on_completion")

    @_builtins.property
    @pulumi.getter(name="deletePoolsOnCompletion")
    def delete_pools_on_completion(self) -> _builtins.bool:
        return pulumi.get(self, "delete_pools_on_completion")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigAzureBatchEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> 'outputs.GetActionLaunchComputeEnvConfigAzureBatchForgeResult':
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headPool")
    def head_pool(self) -> _builtins.str:
        return pulumi.get(self, "head_pool")

    @_builtins.property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> _builtins.str:
        return pulumi.get(self, "managed_identity_client_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tokenDuration")
    def token_duration(self) -> _builtins.str:
        return pulumi.get(self, "token_duration")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAzureBatchEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigAzureBatchForgeResult(dict):
    def __init__(__self__, *,
                 auto_scale: _builtins.bool,
                 container_reg_ids: Sequence[_builtins.str],
                 dispose_on_deletion: _builtins.bool,
                 vm_count: _builtins.float,
                 vm_type: _builtins.str):
        pulumi.set(__self__, "auto_scale", auto_scale)
        pulumi.set(__self__, "container_reg_ids", container_reg_ids)
        pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        pulumi.set(__self__, "vm_count", vm_count)
        pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> _builtins.bool:
        return pulumi.get(self, "auto_scale")

    @_builtins.property
    @pulumi.getter(name="containerRegIds")
    def container_reg_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "container_reg_ids")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> _builtins.bool:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> _builtins.float:
        return pulumi.get(self, "vm_count")

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> _builtins.str:
        return pulumi.get(self, "vm_type")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigEksPlatformResult(dict):
    def __init__(__self__, *,
                 cluster_name: _builtins.str,
                 compute_service_account: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigEksPlatformEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_pod_spec: _builtins.str,
                 head_service_account: _builtins.str,
                 namespace: _builtins.str,
                 nextflow_config: _builtins.str,
                 pod_cleanup: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 server: _builtins.str,
                 service_pod_spec: _builtins.str,
                 ssl_cert: _builtins.str,
                 storage_claim_name: _builtins.str,
                 storage_mount_path: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param _builtins.str cluster_name: The AWS EKS cluster name
        :param Sequence['GetActionLaunchComputeEnvConfigEksPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str region: AWS region
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "compute_service_account", compute_service_account)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        pulumi.set(__self__, "head_service_account", head_service_account)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The AWS EKS cluster name
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> _builtins.str:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigEksPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> _builtins.str:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> _builtins.str:
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        AWS region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> _builtins.str:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> _builtins.str:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigEksPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigGkePlatformResult(dict):
    def __init__(__self__, *,
                 cluster_name: _builtins.str,
                 compute_service_account: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigGkePlatformEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_pod_spec: _builtins.str,
                 head_service_account: _builtins.str,
                 namespace: _builtins.str,
                 nextflow_config: _builtins.str,
                 pod_cleanup: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 server: _builtins.str,
                 service_pod_spec: _builtins.str,
                 ssl_cert: _builtins.str,
                 storage_claim_name: _builtins.str,
                 storage_mount_path: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param _builtins.str cluster_name: The GKE cluster name
        :param Sequence['GetActionLaunchComputeEnvConfigGkePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str region: The GKE cluster region - or - zone
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "compute_service_account", compute_service_account)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        pulumi.set(__self__, "head_service_account", head_service_account)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The GKE cluster name
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> _builtins.str:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigGkePlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> _builtins.str:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> _builtins.str:
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The GKE cluster region - or - zone
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> _builtins.str:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> _builtins.str:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigGkePlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigGoogleBatchResult(dict):
    def __init__(__self__, *,
                 boot_disk_size_gb: _builtins.float,
                 compute_jobs_instance_template: _builtins.str,
                 copy_image: _builtins.str,
                 cpu_platform: _builtins.str,
                 debug_mode: _builtins.float,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigGoogleBatchEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_instance_template: _builtins.str,
                 head_job_memory_mb: _builtins.float,
                 labels: Mapping[str, _builtins.str],
                 location: _builtins.str,
                 machine_type: _builtins.str,
                 network: _builtins.str,
                 nextflow_config: _builtins.str,
                 nfs_mount: _builtins.str,
                 nfs_target: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 project_id: _builtins.str,
                 service_account: _builtins.str,
                 spot: _builtins.bool,
                 ssh_daemon: _builtins.bool,
                 ssh_image: _builtins.str,
                 subnetwork: _builtins.str,
                 use_private_address: _builtins.bool,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigGoogleBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        pulumi.set(__self__, "compute_jobs_instance_template", compute_jobs_instance_template)
        pulumi.set(__self__, "copy_image", copy_image)
        pulumi.set(__self__, "cpu_platform", cpu_platform)
        pulumi.set(__self__, "debug_mode", debug_mode)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_instance_template", head_job_instance_template)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nfs_mount", nfs_mount)
        pulumi.set(__self__, "nfs_target", nfs_target)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "spot", spot)
        pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        pulumi.set(__self__, "ssh_image", ssh_image)
        pulumi.set(__self__, "subnetwork", subnetwork)
        pulumi.set(__self__, "use_private_address", use_private_address)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> _builtins.float:
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="computeJobsInstanceTemplate")
    def compute_jobs_instance_template(self) -> _builtins.str:
        return pulumi.get(self, "compute_jobs_instance_template")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> _builtins.str:
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="cpuPlatform")
    def cpu_platform(self) -> _builtins.str:
        return pulumi.get(self, "cpu_platform")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> _builtins.float:
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigGoogleBatchEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobInstanceTemplate")
    def head_job_instance_template(self) -> _builtins.str:
        return pulumi.get(self, "head_job_instance_template")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> _builtins.str:
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def network(self) -> _builtins.str:
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> _builtins.str:
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> _builtins.str:
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> _builtins.str:
        return pulumi.get(self, "service_account")

    @_builtins.property
    @pulumi.getter
    def spot(self) -> _builtins.bool:
        return pulumi.get(self, "spot")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> _builtins.bool:
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> _builtins.str:
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter
    def subnetwork(self) -> _builtins.str:
        return pulumi.get(self, "subnetwork")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> _builtins.bool:
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigGoogleBatchEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigGoogleLifesciencesResult(dict):
    def __init__(__self__, *,
                 boot_disk_size_gb: _builtins.float,
                 copy_image: _builtins.str,
                 debug_mode: _builtins.float,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentResult'],
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 labels: Mapping[str, _builtins.str],
                 location: _builtins.str,
                 nextflow_config: _builtins.str,
                 nfs_mount: _builtins.str,
                 nfs_target: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 preemptible: _builtins.bool,
                 project_id: _builtins.str,
                 region: _builtins.str,
                 ssh_daemon: _builtins.bool,
                 ssh_image: _builtins.str,
                 use_private_address: _builtins.bool,
                 work_dir: _builtins.str,
                 zones: Sequence[_builtins.str]):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        pulumi.set(__self__, "copy_image", copy_image)
        pulumi.set(__self__, "debug_mode", debug_mode)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nfs_mount", nfs_mount)
        pulumi.set(__self__, "nfs_target", nfs_target)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "preemptible", preemptible)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        pulumi.set(__self__, "ssh_image", ssh_image)
        pulumi.set(__self__, "use_private_address", use_private_address)
        pulumi.set(__self__, "work_dir", work_dir)
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> _builtins.float:
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> _builtins.str:
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> _builtins.float:
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> _builtins.str:
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> _builtins.str:
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def preemptible(self) -> _builtins.bool:
        return pulumi.get(self, "preemptible")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> _builtins.bool:
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> _builtins.str:
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> _builtins.bool:
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigGoogleLifesciencesEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigK8sPlatformResult(dict):
    def __init__(__self__, *,
                 compute_service_account: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigK8sPlatformEnvironmentResult'],
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_pod_spec: _builtins.str,
                 head_service_account: _builtins.str,
                 namespace: _builtins.str,
                 nextflow_config: _builtins.str,
                 pod_cleanup: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 server: _builtins.str,
                 service_pod_spec: _builtins.str,
                 ssl_cert: _builtins.str,
                 storage_claim_name: _builtins.str,
                 storage_mount_path: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigK8sPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_service_account", compute_service_account)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        pulumi.set(__self__, "head_service_account", head_service_account)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> _builtins.str:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigK8sPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> _builtins.str:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> _builtins.str:
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> _builtins.str:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> _builtins.str:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigK8sPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigLsfPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigLsfPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 per_job_mem_limit: _builtins.bool,
                 per_task_reserve: _builtins.bool,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 unit_for_limits: _builtins.str,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigLsfPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "per_job_mem_limit", per_job_mem_limit)
        pulumi.set(__self__, "per_task_reserve", per_task_reserve)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "unit_for_limits", unit_for_limits)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigLsfPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="perJobMemLimit")
    def per_job_mem_limit(self) -> _builtins.bool:
        return pulumi.get(self, "per_job_mem_limit")

    @_builtins.property
    @pulumi.getter(name="perTaskReserve")
    def per_task_reserve(self) -> _builtins.bool:
        return pulumi.get(self, "per_task_reserve")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="unitForLimits")
    def unit_for_limits(self) -> _builtins.str:
        return pulumi.get(self, "unit_for_limits")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigLsfPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigMoabPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigMoabPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigMoabPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigMoabPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigMoabPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigSeqeracomputePlatformResult(dict):
    def __init__(__self__, *,
                 cli_path: _builtins.str,
                 compute_job_role: _builtins.str,
                 compute_queue: _builtins.str,
                 dragen_instance_type: _builtins.str,
                 dragen_queue: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentResult'],
                 execution_role: _builtins.str,
                 forge: 'outputs.GetActionLaunchComputeEnvConfigSeqeracomputePlatformForgeResult',
                 fusion2_enabled: _builtins.bool,
                 fusion_snapshots: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_job_role: _builtins.str,
                 head_queue: _builtins.str,
                 log_group: _builtins.str,
                 lustre_id: _builtins.str,
                 nextflow_config: _builtins.str,
                 nvnme_storage_enabled: _builtins.bool,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 storage_type: _builtins.str,
                 volumes: Sequence[_builtins.str],
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cli_path", cli_path)
        pulumi.set(__self__, "compute_job_role", compute_job_role)
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "dragen_queue", dragen_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "execution_role", execution_role)
        pulumi.set(__self__, "forge", forge)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_job_role", head_job_role)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "log_group", log_group)
        pulumi.set(__self__, "lustre_id", lustre_id)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> _builtins.str:
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> _builtins.str:
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> _builtins.str:
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> _builtins.str:
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> 'outputs.GetActionLaunchComputeEnvConfigSeqeracomputePlatformForgeResult':
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> _builtins.str:
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> _builtins.str:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> _builtins.str:
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> _builtins.str:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigSeqeracomputePlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigSeqeracomputePlatformForgeResult(dict):
    def __init__(__self__, *,
                 alloc_strategy: _builtins.str,
                 allow_buckets: Sequence[_builtins.str],
                 arm64_enabled: _builtins.bool,
                 bid_percentage: _builtins.float,
                 dispose_on_deletion: _builtins.bool,
                 dragen_ami_id: _builtins.str,
                 dragen_enabled: _builtins.bool,
                 dragen_instance_type: _builtins.str,
                 ebs_auto_scale: _builtins.bool,
                 ebs_block_size: _builtins.float,
                 ebs_boot_size: _builtins.float,
                 ec2_key_pair: _builtins.str,
                 ecs_config: _builtins.str,
                 efs_create: _builtins.bool,
                 efs_id: _builtins.str,
                 efs_mount: _builtins.str,
                 fargate_head_enabled: _builtins.bool,
                 fsx_mount: _builtins.str,
                 fsx_name: _builtins.str,
                 fsx_size: _builtins.float,
                 fusion_enabled: _builtins.bool,
                 gpu_enabled: _builtins.bool,
                 image_id: _builtins.str,
                 instance_types: Sequence[_builtins.str],
                 max_cpus: _builtins.float,
                 min_cpus: _builtins.float,
                 security_groups: Sequence[_builtins.str],
                 subnets: Sequence[_builtins.str],
                 type: _builtins.str,
                 vpc_id: _builtins.str):
        pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        pulumi.set(__self__, "allow_buckets", allow_buckets)
        pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        pulumi.set(__self__, "bid_percentage", bid_percentage)
        pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        pulumi.set(__self__, "ecs_config", ecs_config)
        pulumi.set(__self__, "efs_create", efs_create)
        pulumi.set(__self__, "efs_id", efs_id)
        pulumi.set(__self__, "efs_mount", efs_mount)
        pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        pulumi.set(__self__, "fsx_mount", fsx_mount)
        pulumi.set(__self__, "fsx_name", fsx_name)
        pulumi.set(__self__, "fsx_size", fsx_size)
        pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "max_cpus", max_cpus)
        pulumi.set(__self__, "min_cpus", min_cpus)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> _builtins.str:
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> _builtins.float:
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> _builtins.bool:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> _builtins.str:
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> _builtins.bool:
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> _builtins.str:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> _builtins.str:
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> _builtins.bool:
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> _builtins.str:
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> _builtins.str:
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> _builtins.str:
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> _builtins.str:
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> _builtins.float:
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> _builtins.float:
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> _builtins.float:
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigSlurmPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigSlurmPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigSlurmPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigSlurmPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigSlurmPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigUgePlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetActionLaunchComputeEnvConfigUgePlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetActionLaunchComputeEnvConfigUgePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetActionLaunchComputeEnvConfigUgePlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetActionLaunchComputeEnvConfigUgePlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvResult(dict):
    def __init__(__self__, *,
                 compute_env_id: _builtins.str,
                 config: 'outputs.GetComputeEnvComputeEnvConfigResult',
                 credentials_id: _builtins.str,
                 date_created: _builtins.str,
                 deleted: _builtins.bool,
                 description: _builtins.str,
                 labels: Sequence['outputs.GetComputeEnvComputeEnvLabelResult'],
                 last_updated: _builtins.str,
                 last_used: _builtins.str,
                 managed_identity_id: _builtins.str,
                 message: _builtins.str,
                 name: _builtins.str,
                 org_id: _builtins.float,
                 platform: _builtins.str,
                 primary: _builtins.bool,
                 status: _builtins.str,
                 workspace_id: _builtins.float):
        """
        :param 'GetComputeEnvComputeEnvConfigArgs' config: Configuration settings for compute environments including work directories,
               pre/post run scripts, and environment-specific parameters.
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "last_used", last_used)
        pulumi.set(__self__, "managed_identity_id", managed_identity_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> _builtins.str:
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter
    def config(self) -> 'outputs.GetComputeEnvComputeEnvConfigResult':
        """
        Configuration settings for compute environments including work directories,
        pre/post run scripts, and environment-specific parameters.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> _builtins.str:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetComputeEnvComputeEnvLabelResult']:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> _builtins.str:
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> _builtins.str:
        return pulumi.get(self, "managed_identity_id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.float:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> _builtins.bool:
        return pulumi.get(self, "primary")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigResult(dict):
    def __init__(__self__, *,
                 altair_platform: 'outputs.GetComputeEnvComputeEnvConfigAltairPlatformResult',
                 aws_batch: 'outputs.GetComputeEnvComputeEnvConfigAwsBatchResult',
                 aws_cloud: 'outputs.GetComputeEnvComputeEnvConfigAwsCloudResult',
                 azure_batch: 'outputs.GetComputeEnvComputeEnvConfigAzureBatchResult',
                 eks_platform: 'outputs.GetComputeEnvComputeEnvConfigEksPlatformResult',
                 gke_platform: 'outputs.GetComputeEnvComputeEnvConfigGkePlatformResult',
                 google_batch: 'outputs.GetComputeEnvComputeEnvConfigGoogleBatchResult',
                 google_lifesciences: 'outputs.GetComputeEnvComputeEnvConfigGoogleLifesciencesResult',
                 k8s_platform: 'outputs.GetComputeEnvComputeEnvConfigK8sPlatformResult',
                 lsf_platform: 'outputs.GetComputeEnvComputeEnvConfigLsfPlatformResult',
                 moab_platform: 'outputs.GetComputeEnvComputeEnvConfigMoabPlatformResult',
                 seqeracompute_platform: 'outputs.GetComputeEnvComputeEnvConfigSeqeracomputePlatformResult',
                 slurm_platform: 'outputs.GetComputeEnvComputeEnvConfigSlurmPlatformResult',
                 uge_platform: 'outputs.GetComputeEnvComputeEnvConfigUgePlatformResult'):
        pulumi.set(__self__, "altair_platform", altair_platform)
        pulumi.set(__self__, "aws_batch", aws_batch)
        pulumi.set(__self__, "aws_cloud", aws_cloud)
        pulumi.set(__self__, "azure_batch", azure_batch)
        pulumi.set(__self__, "eks_platform", eks_platform)
        pulumi.set(__self__, "gke_platform", gke_platform)
        pulumi.set(__self__, "google_batch", google_batch)
        pulumi.set(__self__, "google_lifesciences", google_lifesciences)
        pulumi.set(__self__, "k8s_platform", k8s_platform)
        pulumi.set(__self__, "lsf_platform", lsf_platform)
        pulumi.set(__self__, "moab_platform", moab_platform)
        pulumi.set(__self__, "seqeracompute_platform", seqeracompute_platform)
        pulumi.set(__self__, "slurm_platform", slurm_platform)
        pulumi.set(__self__, "uge_platform", uge_platform)

    @_builtins.property
    @pulumi.getter(name="altairPlatform")
    def altair_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigAltairPlatformResult':
        return pulumi.get(self, "altair_platform")

    @_builtins.property
    @pulumi.getter(name="awsBatch")
    def aws_batch(self) -> 'outputs.GetComputeEnvComputeEnvConfigAwsBatchResult':
        return pulumi.get(self, "aws_batch")

    @_builtins.property
    @pulumi.getter(name="awsCloud")
    def aws_cloud(self) -> 'outputs.GetComputeEnvComputeEnvConfigAwsCloudResult':
        return pulumi.get(self, "aws_cloud")

    @_builtins.property
    @pulumi.getter(name="azureBatch")
    def azure_batch(self) -> 'outputs.GetComputeEnvComputeEnvConfigAzureBatchResult':
        return pulumi.get(self, "azure_batch")

    @_builtins.property
    @pulumi.getter(name="eksPlatform")
    def eks_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigEksPlatformResult':
        return pulumi.get(self, "eks_platform")

    @_builtins.property
    @pulumi.getter(name="gkePlatform")
    def gke_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigGkePlatformResult':
        return pulumi.get(self, "gke_platform")

    @_builtins.property
    @pulumi.getter(name="googleBatch")
    def google_batch(self) -> 'outputs.GetComputeEnvComputeEnvConfigGoogleBatchResult':
        return pulumi.get(self, "google_batch")

    @_builtins.property
    @pulumi.getter(name="googleLifesciences")
    def google_lifesciences(self) -> 'outputs.GetComputeEnvComputeEnvConfigGoogleLifesciencesResult':
        return pulumi.get(self, "google_lifesciences")

    @_builtins.property
    @pulumi.getter(name="k8sPlatform")
    def k8s_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigK8sPlatformResult':
        return pulumi.get(self, "k8s_platform")

    @_builtins.property
    @pulumi.getter(name="lsfPlatform")
    def lsf_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigLsfPlatformResult':
        return pulumi.get(self, "lsf_platform")

    @_builtins.property
    @pulumi.getter(name="moabPlatform")
    def moab_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigMoabPlatformResult':
        return pulumi.get(self, "moab_platform")

    @_builtins.property
    @pulumi.getter(name="seqeracomputePlatform")
    def seqeracompute_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigSeqeracomputePlatformResult':
        return pulumi.get(self, "seqeracompute_platform")

    @_builtins.property
    @pulumi.getter(name="slurmPlatform")
    def slurm_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigSlurmPlatformResult':
        return pulumi.get(self, "slurm_platform")

    @_builtins.property
    @pulumi.getter(name="ugePlatform")
    def uge_platform(self) -> 'outputs.GetComputeEnvComputeEnvConfigUgePlatformResult':
        return pulumi.get(self, "uge_platform")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAltairPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigAltairPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigAltairPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigAltairPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAltairPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAwsBatchResult(dict):
    def __init__(__self__, *,
                 cli_path: _builtins.str,
                 compute_job_role: _builtins.str,
                 compute_queue: _builtins.str,
                 dragen_instance_type: _builtins.str,
                 dragen_queue: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigAwsBatchEnvironmentResult'],
                 execution_role: _builtins.str,
                 forge: 'outputs.GetComputeEnvComputeEnvConfigAwsBatchForgeResult',
                 fusion2_enabled: _builtins.bool,
                 fusion_snapshots: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_job_role: _builtins.str,
                 head_queue: _builtins.str,
                 log_group: _builtins.str,
                 lustre_id: _builtins.str,
                 nextflow_config: _builtins.str,
                 nvnme_storage_enabled: _builtins.bool,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 storage_type: _builtins.str,
                 volumes: Sequence[_builtins.str],
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigAwsBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cli_path", cli_path)
        pulumi.set(__self__, "compute_job_role", compute_job_role)
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "dragen_queue", dragen_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "execution_role", execution_role)
        pulumi.set(__self__, "forge", forge)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_job_role", head_job_role)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "log_group", log_group)
        pulumi.set(__self__, "lustre_id", lustre_id)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> _builtins.str:
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> _builtins.str:
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> _builtins.str:
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigAwsBatchEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> _builtins.str:
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> 'outputs.GetComputeEnvComputeEnvConfigAwsBatchForgeResult':
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> _builtins.str:
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> _builtins.str:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> _builtins.str:
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> _builtins.str:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAwsBatchEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAwsBatchForgeResult(dict):
    def __init__(__self__, *,
                 alloc_strategy: _builtins.str,
                 allow_buckets: Sequence[_builtins.str],
                 arm64_enabled: _builtins.bool,
                 bid_percentage: _builtins.float,
                 dispose_on_deletion: _builtins.bool,
                 dragen_ami_id: _builtins.str,
                 dragen_enabled: _builtins.bool,
                 dragen_instance_type: _builtins.str,
                 ebs_auto_scale: _builtins.bool,
                 ebs_block_size: _builtins.float,
                 ebs_boot_size: _builtins.float,
                 ec2_key_pair: _builtins.str,
                 ecs_config: _builtins.str,
                 efs_create: _builtins.bool,
                 efs_id: _builtins.str,
                 efs_mount: _builtins.str,
                 fargate_head_enabled: _builtins.bool,
                 fsx_mount: _builtins.str,
                 fsx_name: _builtins.str,
                 fsx_size: _builtins.float,
                 fusion_enabled: _builtins.bool,
                 gpu_enabled: _builtins.bool,
                 image_id: _builtins.str,
                 instance_types: Sequence[_builtins.str],
                 max_cpus: _builtins.float,
                 min_cpus: _builtins.float,
                 security_groups: Sequence[_builtins.str],
                 subnets: Sequence[_builtins.str],
                 type: _builtins.str,
                 vpc_id: _builtins.str):
        pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        pulumi.set(__self__, "allow_buckets", allow_buckets)
        pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        pulumi.set(__self__, "bid_percentage", bid_percentage)
        pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        pulumi.set(__self__, "ecs_config", ecs_config)
        pulumi.set(__self__, "efs_create", efs_create)
        pulumi.set(__self__, "efs_id", efs_id)
        pulumi.set(__self__, "efs_mount", efs_mount)
        pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        pulumi.set(__self__, "fsx_mount", fsx_mount)
        pulumi.set(__self__, "fsx_name", fsx_name)
        pulumi.set(__self__, "fsx_size", fsx_size)
        pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "max_cpus", max_cpus)
        pulumi.set(__self__, "min_cpus", min_cpus)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> _builtins.str:
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> _builtins.float:
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> _builtins.bool:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> _builtins.str:
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> _builtins.bool:
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> _builtins.str:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> _builtins.str:
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> _builtins.bool:
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> _builtins.str:
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> _builtins.str:
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> _builtins.str:
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> _builtins.str:
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> _builtins.float:
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> _builtins.float:
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> _builtins.float:
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAwsCloudResult(dict):
    def __init__(__self__, *,
                 allow_buckets: Sequence[_builtins.str],
                 arm64_enabled: _builtins.bool,
                 ebs_boot_size: _builtins.float,
                 ec2_key_pair: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigAwsCloudEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 gpu_enabled: _builtins.bool,
                 image_id: _builtins.str,
                 instance_profile_arn: _builtins.str,
                 instance_type: _builtins.str,
                 log_group: _builtins.str,
                 nextflow_config: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 security_groups: Sequence[_builtins.str],
                 subnet_id: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigAwsCloudEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "allow_buckets", allow_buckets)
        pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "log_group", log_group)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> _builtins.str:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigAwsCloudEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> _builtins.str:
        return pulumi.get(self, "instance_profile_arn")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> _builtins.str:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAwsCloudEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAzureBatchResult(dict):
    def __init__(__self__, *,
                 auto_pool_mode: _builtins.bool,
                 delete_jobs_on_completion: _builtins.str,
                 delete_pools_on_completion: _builtins.bool,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigAzureBatchEnvironmentResult'],
                 forge: 'outputs.GetComputeEnvComputeEnvConfigAzureBatchForgeResult',
                 fusion2_enabled: _builtins.bool,
                 head_pool: _builtins.str,
                 managed_identity_client_id: _builtins.str,
                 nextflow_config: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 token_duration: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigAzureBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "auto_pool_mode", auto_pool_mode)
        pulumi.set(__self__, "delete_jobs_on_completion", delete_jobs_on_completion)
        pulumi.set(__self__, "delete_pools_on_completion", delete_pools_on_completion)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "forge", forge)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_pool", head_pool)
        pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_duration", token_duration)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="autoPoolMode")
    @_utilities.deprecated("""Deprecated""")
    def auto_pool_mode(self) -> _builtins.bool:
        return pulumi.get(self, "auto_pool_mode")

    @_builtins.property
    @pulumi.getter(name="deleteJobsOnCompletion")
    def delete_jobs_on_completion(self) -> _builtins.str:
        return pulumi.get(self, "delete_jobs_on_completion")

    @_builtins.property
    @pulumi.getter(name="deletePoolsOnCompletion")
    def delete_pools_on_completion(self) -> _builtins.bool:
        return pulumi.get(self, "delete_pools_on_completion")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigAzureBatchEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> 'outputs.GetComputeEnvComputeEnvConfigAzureBatchForgeResult':
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headPool")
    def head_pool(self) -> _builtins.str:
        return pulumi.get(self, "head_pool")

    @_builtins.property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> _builtins.str:
        return pulumi.get(self, "managed_identity_client_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tokenDuration")
    def token_duration(self) -> _builtins.str:
        return pulumi.get(self, "token_duration")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAzureBatchEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigAzureBatchForgeResult(dict):
    def __init__(__self__, *,
                 auto_scale: _builtins.bool,
                 container_reg_ids: Sequence[_builtins.str],
                 dispose_on_deletion: _builtins.bool,
                 vm_count: _builtins.float,
                 vm_type: _builtins.str):
        pulumi.set(__self__, "auto_scale", auto_scale)
        pulumi.set(__self__, "container_reg_ids", container_reg_ids)
        pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        pulumi.set(__self__, "vm_count", vm_count)
        pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> _builtins.bool:
        return pulumi.get(self, "auto_scale")

    @_builtins.property
    @pulumi.getter(name="containerRegIds")
    def container_reg_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "container_reg_ids")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> _builtins.bool:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> _builtins.float:
        return pulumi.get(self, "vm_count")

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> _builtins.str:
        return pulumi.get(self, "vm_type")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigEksPlatformResult(dict):
    def __init__(__self__, *,
                 cluster_name: _builtins.str,
                 compute_service_account: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigEksPlatformEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_pod_spec: _builtins.str,
                 head_service_account: _builtins.str,
                 namespace: _builtins.str,
                 nextflow_config: _builtins.str,
                 pod_cleanup: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 server: _builtins.str,
                 service_pod_spec: _builtins.str,
                 ssl_cert: _builtins.str,
                 storage_claim_name: _builtins.str,
                 storage_mount_path: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param _builtins.str cluster_name: The AWS EKS cluster name
        :param Sequence['GetComputeEnvComputeEnvConfigEksPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str region: AWS region
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "compute_service_account", compute_service_account)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        pulumi.set(__self__, "head_service_account", head_service_account)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The AWS EKS cluster name
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> _builtins.str:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigEksPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> _builtins.str:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> _builtins.str:
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        AWS region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> _builtins.str:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> _builtins.str:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigEksPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigGkePlatformResult(dict):
    def __init__(__self__, *,
                 cluster_name: _builtins.str,
                 compute_service_account: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigGkePlatformEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_pod_spec: _builtins.str,
                 head_service_account: _builtins.str,
                 namespace: _builtins.str,
                 nextflow_config: _builtins.str,
                 pod_cleanup: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 server: _builtins.str,
                 service_pod_spec: _builtins.str,
                 ssl_cert: _builtins.str,
                 storage_claim_name: _builtins.str,
                 storage_mount_path: _builtins.str,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param _builtins.str cluster_name: The GKE cluster name
        :param Sequence['GetComputeEnvComputeEnvConfigGkePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str region: The GKE cluster region - or - zone
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "compute_service_account", compute_service_account)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        pulumi.set(__self__, "head_service_account", head_service_account)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The GKE cluster name
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> _builtins.str:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigGkePlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> _builtins.str:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> _builtins.str:
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The GKE cluster region - or - zone
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> _builtins.str:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> _builtins.str:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigGkePlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigGoogleBatchResult(dict):
    def __init__(__self__, *,
                 boot_disk_size_gb: _builtins.float,
                 compute_jobs_instance_template: _builtins.str,
                 copy_image: _builtins.str,
                 cpu_platform: _builtins.str,
                 debug_mode: _builtins.float,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigGoogleBatchEnvironmentResult'],
                 fusion2_enabled: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_instance_template: _builtins.str,
                 head_job_memory_mb: _builtins.float,
                 labels: Mapping[str, _builtins.str],
                 location: _builtins.str,
                 machine_type: _builtins.str,
                 network: _builtins.str,
                 nextflow_config: _builtins.str,
                 nfs_mount: _builtins.str,
                 nfs_target: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 project_id: _builtins.str,
                 service_account: _builtins.str,
                 spot: _builtins.bool,
                 ssh_daemon: _builtins.bool,
                 ssh_image: _builtins.str,
                 subnetwork: _builtins.str,
                 use_private_address: _builtins.bool,
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigGoogleBatchEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        pulumi.set(__self__, "compute_jobs_instance_template", compute_jobs_instance_template)
        pulumi.set(__self__, "copy_image", copy_image)
        pulumi.set(__self__, "cpu_platform", cpu_platform)
        pulumi.set(__self__, "debug_mode", debug_mode)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_instance_template", head_job_instance_template)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nfs_mount", nfs_mount)
        pulumi.set(__self__, "nfs_target", nfs_target)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "spot", spot)
        pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        pulumi.set(__self__, "ssh_image", ssh_image)
        pulumi.set(__self__, "subnetwork", subnetwork)
        pulumi.set(__self__, "use_private_address", use_private_address)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> _builtins.float:
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="computeJobsInstanceTemplate")
    def compute_jobs_instance_template(self) -> _builtins.str:
        return pulumi.get(self, "compute_jobs_instance_template")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> _builtins.str:
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="cpuPlatform")
    def cpu_platform(self) -> _builtins.str:
        return pulumi.get(self, "cpu_platform")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> _builtins.float:
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigGoogleBatchEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobInstanceTemplate")
    def head_job_instance_template(self) -> _builtins.str:
        return pulumi.get(self, "head_job_instance_template")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> _builtins.str:
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def network(self) -> _builtins.str:
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> _builtins.str:
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> _builtins.str:
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> _builtins.str:
        return pulumi.get(self, "service_account")

    @_builtins.property
    @pulumi.getter
    def spot(self) -> _builtins.bool:
        return pulumi.get(self, "spot")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> _builtins.bool:
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> _builtins.str:
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter
    def subnetwork(self) -> _builtins.str:
        return pulumi.get(self, "subnetwork")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> _builtins.bool:
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigGoogleBatchEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigGoogleLifesciencesResult(dict):
    def __init__(__self__, *,
                 boot_disk_size_gb: _builtins.float,
                 copy_image: _builtins.str,
                 debug_mode: _builtins.float,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentResult'],
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 labels: Mapping[str, _builtins.str],
                 location: _builtins.str,
                 nextflow_config: _builtins.str,
                 nfs_mount: _builtins.str,
                 nfs_target: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 preemptible: _builtins.bool,
                 project_id: _builtins.str,
                 region: _builtins.str,
                 ssh_daemon: _builtins.bool,
                 ssh_image: _builtins.str,
                 use_private_address: _builtins.bool,
                 work_dir: _builtins.str,
                 zones: Sequence[_builtins.str]):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "boot_disk_size_gb", boot_disk_size_gb)
        pulumi.set(__self__, "copy_image", copy_image)
        pulumi.set(__self__, "debug_mode", debug_mode)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nfs_mount", nfs_mount)
        pulumi.set(__self__, "nfs_target", nfs_target)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "preemptible", preemptible)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "ssh_daemon", ssh_daemon)
        pulumi.set(__self__, "ssh_image", ssh_image)
        pulumi.set(__self__, "use_private_address", use_private_address)
        pulumi.set(__self__, "work_dir", work_dir)
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="bootDiskSizeGb")
    def boot_disk_size_gb(self) -> _builtins.float:
        return pulumi.get(self, "boot_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="copyImage")
    def copy_image(self) -> _builtins.str:
        return pulumi.get(self, "copy_image")

    @_builtins.property
    @pulumi.getter(name="debugMode")
    def debug_mode(self) -> _builtins.float:
        return pulumi.get(self, "debug_mode")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nfsMount")
    def nfs_mount(self) -> _builtins.str:
        return pulumi.get(self, "nfs_mount")

    @_builtins.property
    @pulumi.getter(name="nfsTarget")
    def nfs_target(self) -> _builtins.str:
        return pulumi.get(self, "nfs_target")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def preemptible(self) -> _builtins.bool:
        return pulumi.get(self, "preemptible")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshDaemon")
    def ssh_daemon(self) -> _builtins.bool:
        return pulumi.get(self, "ssh_daemon")

    @_builtins.property
    @pulumi.getter(name="sshImage")
    def ssh_image(self) -> _builtins.str:
        return pulumi.get(self, "ssh_image")

    @_builtins.property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> _builtins.bool:
        return pulumi.get(self, "use_private_address")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigGoogleLifesciencesEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigK8sPlatformResult(dict):
    def __init__(__self__, *,
                 compute_service_account: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigK8sPlatformEnvironmentResult'],
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_pod_spec: _builtins.str,
                 head_service_account: _builtins.str,
                 namespace: _builtins.str,
                 nextflow_config: _builtins.str,
                 pod_cleanup: _builtins.str,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 server: _builtins.str,
                 service_pod_spec: _builtins.str,
                 ssl_cert: _builtins.str,
                 storage_claim_name: _builtins.str,
                 storage_mount_path: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigK8sPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_service_account", compute_service_account)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_pod_spec", head_pod_spec)
        pulumi.set(__self__, "head_service_account", head_service_account)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "pod_cleanup", pod_cleanup)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "service_pod_spec", service_pod_spec)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "storage_claim_name", storage_claim_name)
        pulumi.set(__self__, "storage_mount_path", storage_mount_path)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeServiceAccount")
    def compute_service_account(self) -> _builtins.str:
        return pulumi.get(self, "compute_service_account")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigK8sPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headPodSpec")
    def head_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "head_pod_spec")

    @_builtins.property
    @pulumi.getter(name="headServiceAccount")
    def head_service_account(self) -> _builtins.str:
        return pulumi.get(self, "head_service_account")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="podCleanup")
    def pod_cleanup(self) -> _builtins.str:
        return pulumi.get(self, "pod_cleanup")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="servicePodSpec")
    def service_pod_spec(self) -> _builtins.str:
        return pulumi.get(self, "service_pod_spec")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> _builtins.str:
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="storageClaimName")
    def storage_claim_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_claim_name")

    @_builtins.property
    @pulumi.getter(name="storageMountPath")
    def storage_mount_path(self) -> _builtins.str:
        return pulumi.get(self, "storage_mount_path")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigK8sPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigLsfPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigLsfPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 per_job_mem_limit: _builtins.bool,
                 per_task_reserve: _builtins.bool,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 unit_for_limits: _builtins.str,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigLsfPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "per_job_mem_limit", per_job_mem_limit)
        pulumi.set(__self__, "per_task_reserve", per_task_reserve)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "unit_for_limits", unit_for_limits)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigLsfPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="perJobMemLimit")
    def per_job_mem_limit(self) -> _builtins.bool:
        return pulumi.get(self, "per_job_mem_limit")

    @_builtins.property
    @pulumi.getter(name="perTaskReserve")
    def per_task_reserve(self) -> _builtins.bool:
        return pulumi.get(self, "per_task_reserve")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="unitForLimits")
    def unit_for_limits(self) -> _builtins.str:
        return pulumi.get(self, "unit_for_limits")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigLsfPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigMoabPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigMoabPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigMoabPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigMoabPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigMoabPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigSeqeracomputePlatformResult(dict):
    def __init__(__self__, *,
                 cli_path: _builtins.str,
                 compute_job_role: _builtins.str,
                 compute_queue: _builtins.str,
                 dragen_instance_type: _builtins.str,
                 dragen_queue: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentResult'],
                 execution_role: _builtins.str,
                 forge: 'outputs.GetComputeEnvComputeEnvConfigSeqeracomputePlatformForgeResult',
                 fusion2_enabled: _builtins.bool,
                 fusion_snapshots: _builtins.bool,
                 head_job_cpus: _builtins.float,
                 head_job_memory_mb: _builtins.float,
                 head_job_role: _builtins.str,
                 head_queue: _builtins.str,
                 log_group: _builtins.str,
                 lustre_id: _builtins.str,
                 nextflow_config: _builtins.str,
                 nvnme_storage_enabled: _builtins.bool,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 region: _builtins.str,
                 storage_type: _builtins.str,
                 volumes: Sequence[_builtins.str],
                 wave_enabled: _builtins.bool,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "cli_path", cli_path)
        pulumi.set(__self__, "compute_job_role", compute_job_role)
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "dragen_queue", dragen_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "execution_role", execution_role)
        pulumi.set(__self__, "forge", forge)
        pulumi.set(__self__, "fusion2_enabled", fusion2_enabled)
        pulumi.set(__self__, "fusion_snapshots", fusion_snapshots)
        pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        pulumi.set(__self__, "head_job_role", head_job_role)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "log_group", log_group)
        pulumi.set(__self__, "lustre_id", lustre_id)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "nvnme_storage_enabled", nvnme_storage_enabled)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "wave_enabled", wave_enabled)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="cliPath")
    def cli_path(self) -> _builtins.str:
        return pulumi.get(self, "cli_path")

    @_builtins.property
    @pulumi.getter(name="computeJobRole")
    def compute_job_role(self) -> _builtins.str:
        return pulumi.get(self, "compute_job_role")

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="dragenQueue")
    def dragen_queue(self) -> _builtins.str:
        return pulumi.get(self, "dragen_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> _builtins.str:
        return pulumi.get(self, "execution_role")

    @_builtins.property
    @pulumi.getter
    def forge(self) -> 'outputs.GetComputeEnvComputeEnvConfigSeqeracomputePlatformForgeResult':
        return pulumi.get(self, "forge")

    @_builtins.property
    @pulumi.getter(name="fusion2Enabled")
    def fusion2_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion2_enabled")

    @_builtins.property
    @pulumi.getter(name="fusionSnapshots")
    def fusion_snapshots(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_snapshots")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> _builtins.float:
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> _builtins.float:
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="headJobRole")
    def head_job_role(self) -> _builtins.str:
        return pulumi.get(self, "head_job_role")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> _builtins.str:
        return pulumi.get(self, "log_group")

    @_builtins.property
    @pulumi.getter(name="lustreId")
    @_utilities.deprecated("""Deprecated""")
    def lustre_id(self) -> _builtins.str:
        return pulumi.get(self, "lustre_id")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter(name="nvnmeStorageEnabled")
    def nvnme_storage_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "nvnme_storage_enabled")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="storageType")
    @_utilities.deprecated("""Deprecated""")
    def storage_type(self) -> _builtins.str:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="waveEnabled")
    def wave_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "wave_enabled")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigSeqeracomputePlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigSeqeracomputePlatformForgeResult(dict):
    def __init__(__self__, *,
                 alloc_strategy: _builtins.str,
                 allow_buckets: Sequence[_builtins.str],
                 arm64_enabled: _builtins.bool,
                 bid_percentage: _builtins.float,
                 dispose_on_deletion: _builtins.bool,
                 dragen_ami_id: _builtins.str,
                 dragen_enabled: _builtins.bool,
                 dragen_instance_type: _builtins.str,
                 ebs_auto_scale: _builtins.bool,
                 ebs_block_size: _builtins.float,
                 ebs_boot_size: _builtins.float,
                 ec2_key_pair: _builtins.str,
                 ecs_config: _builtins.str,
                 efs_create: _builtins.bool,
                 efs_id: _builtins.str,
                 efs_mount: _builtins.str,
                 fargate_head_enabled: _builtins.bool,
                 fsx_mount: _builtins.str,
                 fsx_name: _builtins.str,
                 fsx_size: _builtins.float,
                 fusion_enabled: _builtins.bool,
                 gpu_enabled: _builtins.bool,
                 image_id: _builtins.str,
                 instance_types: Sequence[_builtins.str],
                 max_cpus: _builtins.float,
                 min_cpus: _builtins.float,
                 security_groups: Sequence[_builtins.str],
                 subnets: Sequence[_builtins.str],
                 type: _builtins.str,
                 vpc_id: _builtins.str):
        pulumi.set(__self__, "alloc_strategy", alloc_strategy)
        pulumi.set(__self__, "allow_buckets", allow_buckets)
        pulumi.set(__self__, "arm64_enabled", arm64_enabled)
        pulumi.set(__self__, "bid_percentage", bid_percentage)
        pulumi.set(__self__, "dispose_on_deletion", dispose_on_deletion)
        pulumi.set(__self__, "dragen_ami_id", dragen_ami_id)
        pulumi.set(__self__, "dragen_enabled", dragen_enabled)
        pulumi.set(__self__, "dragen_instance_type", dragen_instance_type)
        pulumi.set(__self__, "ebs_auto_scale", ebs_auto_scale)
        pulumi.set(__self__, "ebs_block_size", ebs_block_size)
        pulumi.set(__self__, "ebs_boot_size", ebs_boot_size)
        pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        pulumi.set(__self__, "ecs_config", ecs_config)
        pulumi.set(__self__, "efs_create", efs_create)
        pulumi.set(__self__, "efs_id", efs_id)
        pulumi.set(__self__, "efs_mount", efs_mount)
        pulumi.set(__self__, "fargate_head_enabled", fargate_head_enabled)
        pulumi.set(__self__, "fsx_mount", fsx_mount)
        pulumi.set(__self__, "fsx_name", fsx_name)
        pulumi.set(__self__, "fsx_size", fsx_size)
        pulumi.set(__self__, "fusion_enabled", fusion_enabled)
        pulumi.set(__self__, "gpu_enabled", gpu_enabled)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "max_cpus", max_cpus)
        pulumi.set(__self__, "min_cpus", min_cpus)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allocStrategy")
    def alloc_strategy(self) -> _builtins.str:
        return pulumi.get(self, "alloc_strategy")

    @_builtins.property
    @pulumi.getter(name="allowBuckets")
    def allow_buckets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allow_buckets")

    @_builtins.property
    @pulumi.getter(name="arm64Enabled")
    def arm64_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "arm64_enabled")

    @_builtins.property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> _builtins.float:
        return pulumi.get(self, "bid_percentage")

    @_builtins.property
    @pulumi.getter(name="disposeOnDeletion")
    def dispose_on_deletion(self) -> _builtins.bool:
        return pulumi.get(self, "dispose_on_deletion")

    @_builtins.property
    @pulumi.getter(name="dragenAmiId")
    def dragen_ami_id(self) -> _builtins.str:
        return pulumi.get(self, "dragen_ami_id")

    @_builtins.property
    @pulumi.getter(name="dragenEnabled")
    def dragen_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "dragen_enabled")

    @_builtins.property
    @pulumi.getter(name="dragenInstanceType")
    def dragen_instance_type(self) -> _builtins.str:
        return pulumi.get(self, "dragen_instance_type")

    @_builtins.property
    @pulumi.getter(name="ebsAutoScale")
    def ebs_auto_scale(self) -> _builtins.bool:
        return pulumi.get(self, "ebs_auto_scale")

    @_builtins.property
    @pulumi.getter(name="ebsBlockSize")
    def ebs_block_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_block_size")

    @_builtins.property
    @pulumi.getter(name="ebsBootSize")
    def ebs_boot_size(self) -> _builtins.float:
        return pulumi.get(self, "ebs_boot_size")

    @_builtins.property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> _builtins.str:
        return pulumi.get(self, "ec2_key_pair")

    @_builtins.property
    @pulumi.getter(name="ecsConfig")
    def ecs_config(self) -> _builtins.str:
        return pulumi.get(self, "ecs_config")

    @_builtins.property
    @pulumi.getter(name="efsCreate")
    def efs_create(self) -> _builtins.bool:
        return pulumi.get(self, "efs_create")

    @_builtins.property
    @pulumi.getter(name="efsId")
    def efs_id(self) -> _builtins.str:
        return pulumi.get(self, "efs_id")

    @_builtins.property
    @pulumi.getter(name="efsMount")
    def efs_mount(self) -> _builtins.str:
        return pulumi.get(self, "efs_mount")

    @_builtins.property
    @pulumi.getter(name="fargateHeadEnabled")
    def fargate_head_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fargate_head_enabled")

    @_builtins.property
    @pulumi.getter(name="fsxMount")
    def fsx_mount(self) -> _builtins.str:
        return pulumi.get(self, "fsx_mount")

    @_builtins.property
    @pulumi.getter(name="fsxName")
    def fsx_name(self) -> _builtins.str:
        return pulumi.get(self, "fsx_name")

    @_builtins.property
    @pulumi.getter(name="fsxSize")
    def fsx_size(self) -> _builtins.float:
        return pulumi.get(self, "fsx_size")

    @_builtins.property
    @pulumi.getter(name="fusionEnabled")
    def fusion_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fusion_enabled")

    @_builtins.property
    @pulumi.getter(name="gpuEnabled")
    def gpu_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "gpu_enabled")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter(name="maxCpus")
    def max_cpus(self) -> _builtins.float:
        return pulumi.get(self, "max_cpus")

    @_builtins.property
    @pulumi.getter(name="minCpus")
    def min_cpus(self) -> _builtins.float:
        return pulumi.get(self, "min_cpus")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigSlurmPlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigSlurmPlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigSlurmPlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigSlurmPlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigSlurmPlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigUgePlatformResult(dict):
    def __init__(__self__, *,
                 compute_queue: _builtins.str,
                 environments: Sequence['outputs.GetComputeEnvComputeEnvConfigUgePlatformEnvironmentResult'],
                 head_job_options: _builtins.str,
                 head_queue: _builtins.str,
                 host_name: _builtins.str,
                 launch_dir: _builtins.str,
                 max_queue_size: _builtins.float,
                 nextflow_config: _builtins.str,
                 port: _builtins.float,
                 post_run_script: _builtins.str,
                 pre_run_script: _builtins.str,
                 propagate_head_job_options: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        """
        :param Sequence['GetComputeEnvComputeEnvConfigUgePlatformEnvironmentArgs'] environments: Array of environment variables for the compute environment
        :param _builtins.str nextflow_config: Nextflow configuration settings and parameters
        :param _builtins.str post_run_script: Shell script to execute after workflow completes
        :param _builtins.str pre_run_script: Shell script to execute before workflow starts
        :param _builtins.str work_dir: Working directory path for workflow execution
        """
        pulumi.set(__self__, "compute_queue", compute_queue)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "head_job_options", head_job_options)
        pulumi.set(__self__, "head_queue", head_queue)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "max_queue_size", max_queue_size)
        pulumi.set(__self__, "nextflow_config", nextflow_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "post_run_script", post_run_script)
        pulumi.set(__self__, "pre_run_script", pre_run_script)
        pulumi.set(__self__, "propagate_head_job_options", propagate_head_job_options)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="computeQueue")
    def compute_queue(self) -> _builtins.str:
        return pulumi.get(self, "compute_queue")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetComputeEnvComputeEnvConfigUgePlatformEnvironmentResult']:
        """
        Array of environment variables for the compute environment
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="headJobOptions")
    def head_job_options(self) -> _builtins.str:
        return pulumi.get(self, "head_job_options")

    @_builtins.property
    @pulumi.getter(name="headQueue")
    def head_queue(self) -> _builtins.str:
        return pulumi.get(self, "head_queue")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> _builtins.float:
        return pulumi.get(self, "max_queue_size")

    @_builtins.property
    @pulumi.getter(name="nextflowConfig")
    def nextflow_config(self) -> _builtins.str:
        """
        Nextflow configuration settings and parameters
        """
        return pulumi.get(self, "nextflow_config")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> _builtins.str:
        """
        Shell script to execute after workflow completes
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> _builtins.str:
        """
        Shell script to execute before workflow starts
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter(name="propagateHeadJobOptions")
    def propagate_head_job_options(self) -> _builtins.bool:
        return pulumi.get(self, "propagate_head_job_options")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        """
        Working directory path for workflow execution
        """
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetComputeEnvComputeEnvConfigUgePlatformEnvironmentResult(dict):
    def __init__(__self__, *,
                 compute: _builtins.bool,
                 head: _builtins.bool,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "head", head)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def compute(self) -> _builtins.bool:
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter
    def head(self) -> _builtins.bool:
        return pulumi.get(self, "head")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetComputeEnvComputeEnvLabelResult(dict):
    def __init__(__self__, *,
                 date_created: _builtins.str,
                 id: _builtins.float,
                 is_default: _builtins.bool,
                 name: _builtins.str,
                 resource: _builtins.bool,
                 value: _builtins.str):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.bool:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCredentialKeysResult(dict):
    def __init__(__self__, *,
                 aws: 'outputs.GetCredentialKeysAwsResult',
                 azure: 'outputs.GetCredentialKeysAzureResult',
                 azure_entra: 'outputs.GetCredentialKeysAzureEntraResult',
                 azurerepos: 'outputs.GetCredentialKeysAzurereposResult',
                 bitbucket: 'outputs.GetCredentialKeysBitbucketResult',
                 codecommit: 'outputs.GetCredentialKeysCodecommitResult',
                 container_reg: 'outputs.GetCredentialKeysContainerRegResult',
                 gitea: 'outputs.GetCredentialKeysGiteaResult',
                 github: 'outputs.GetCredentialKeysGithubResult',
                 gitlab: 'outputs.GetCredentialKeysGitlabResult',
                 google: 'outputs.GetCredentialKeysGoogleResult',
                 k8s: 'outputs.GetCredentialKeysK8sResult',
                 seqeracompute: 'outputs.GetCredentialKeysSeqeracomputeResult',
                 ssh: 'outputs.GetCredentialKeysSshResult',
                 tw_agent: 'outputs.GetCredentialKeysTwAgentResult'):
        pulumi.set(__self__, "aws", aws)
        pulumi.set(__self__, "azure", azure)
        pulumi.set(__self__, "azure_entra", azure_entra)
        pulumi.set(__self__, "azurerepos", azurerepos)
        pulumi.set(__self__, "bitbucket", bitbucket)
        pulumi.set(__self__, "codecommit", codecommit)
        pulumi.set(__self__, "container_reg", container_reg)
        pulumi.set(__self__, "gitea", gitea)
        pulumi.set(__self__, "github", github)
        pulumi.set(__self__, "gitlab", gitlab)
        pulumi.set(__self__, "google", google)
        pulumi.set(__self__, "k8s", k8s)
        pulumi.set(__self__, "seqeracompute", seqeracompute)
        pulumi.set(__self__, "ssh", ssh)
        pulumi.set(__self__, "tw_agent", tw_agent)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> 'outputs.GetCredentialKeysAwsResult':
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter
    def azure(self) -> 'outputs.GetCredentialKeysAzureResult':
        return pulumi.get(self, "azure")

    @_builtins.property
    @pulumi.getter(name="azureEntra")
    def azure_entra(self) -> 'outputs.GetCredentialKeysAzureEntraResult':
        return pulumi.get(self, "azure_entra")

    @_builtins.property
    @pulumi.getter
    def azurerepos(self) -> 'outputs.GetCredentialKeysAzurereposResult':
        return pulumi.get(self, "azurerepos")

    @_builtins.property
    @pulumi.getter
    def bitbucket(self) -> 'outputs.GetCredentialKeysBitbucketResult':
        return pulumi.get(self, "bitbucket")

    @_builtins.property
    @pulumi.getter
    def codecommit(self) -> 'outputs.GetCredentialKeysCodecommitResult':
        return pulumi.get(self, "codecommit")

    @_builtins.property
    @pulumi.getter(name="containerReg")
    def container_reg(self) -> 'outputs.GetCredentialKeysContainerRegResult':
        return pulumi.get(self, "container_reg")

    @_builtins.property
    @pulumi.getter
    def gitea(self) -> 'outputs.GetCredentialKeysGiteaResult':
        return pulumi.get(self, "gitea")

    @_builtins.property
    @pulumi.getter
    def github(self) -> 'outputs.GetCredentialKeysGithubResult':
        return pulumi.get(self, "github")

    @_builtins.property
    @pulumi.getter
    def gitlab(self) -> 'outputs.GetCredentialKeysGitlabResult':
        return pulumi.get(self, "gitlab")

    @_builtins.property
    @pulumi.getter
    def google(self) -> 'outputs.GetCredentialKeysGoogleResult':
        return pulumi.get(self, "google")

    @_builtins.property
    @pulumi.getter
    def k8s(self) -> 'outputs.GetCredentialKeysK8sResult':
        return pulumi.get(self, "k8s")

    @_builtins.property
    @pulumi.getter
    def seqeracompute(self) -> 'outputs.GetCredentialKeysSeqeracomputeResult':
        return pulumi.get(self, "seqeracompute")

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> 'outputs.GetCredentialKeysSshResult':
        return pulumi.get(self, "ssh")

    @_builtins.property
    @pulumi.getter(name="twAgent")
    def tw_agent(self) -> 'outputs.GetCredentialKeysTwAgentResult':
        return pulumi.get(self, "tw_agent")


@pulumi.output_type
class GetCredentialKeysAwsResult(dict):
    def __init__(__self__, *,
                 access_key: _builtins.str,
                 assume_role_arn: _builtins.str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "assume_role_arn", assume_role_arn)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> _builtins.str:
        return pulumi.get(self, "assume_role_arn")


@pulumi.output_type
class GetCredentialKeysAzureResult(dict):
    def __init__(__self__, *,
                 batch_name: _builtins.str,
                 storage_name: _builtins.str):
        pulumi.set(__self__, "batch_name", batch_name)
        pulumi.set(__self__, "storage_name", storage_name)

    @_builtins.property
    @pulumi.getter(name="batchName")
    def batch_name(self) -> _builtins.str:
        return pulumi.get(self, "batch_name")

    @_builtins.property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_name")


@pulumi.output_type
class GetCredentialKeysAzureEntraResult(dict):
    def __init__(__self__, *,
                 batch_name: _builtins.str,
                 client_id: _builtins.str,
                 storage_name: _builtins.str,
                 tenant_id: _builtins.str):
        pulumi.set(__self__, "batch_name", batch_name)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "storage_name", storage_name)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="batchName")
    def batch_name(self) -> _builtins.str:
        return pulumi.get(self, "batch_name")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_name")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetCredentialKeysAzurereposResult(dict):
    def __init__(__self__, *,
                 username: _builtins.str):
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetCredentialKeysBitbucketResult(dict):
    def __init__(__self__, *,
                 username: _builtins.str):
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetCredentialKeysCodecommitResult(dict):
    def __init__(__self__, *,
                 username: _builtins.str):
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetCredentialKeysContainerRegResult(dict):
    def __init__(__self__, *,
                 registry: _builtins.str,
                 user_name: _builtins.str):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def registry(self) -> _builtins.str:
        return pulumi.get(self, "registry")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetCredentialKeysGiteaResult(dict):
    def __init__(__self__, *,
                 username: _builtins.str):
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetCredentialKeysGithubResult(dict):
    def __init__(__self__, *,
                 username: _builtins.str):
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetCredentialKeysGitlabResult(dict):
    def __init__(__self__, *,
                 username: _builtins.str):
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetCredentialKeysGoogleResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetCredentialKeysK8sResult(dict):
    def __init__(__self__, *,
                 certificate: _builtins.str):
        pulumi.set(__self__, "certificate", certificate)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> _builtins.str:
        return pulumi.get(self, "certificate")


@pulumi.output_type
class GetCredentialKeysSeqeracomputeResult(dict):
    def __init__(__self__, *,
                 access_key: _builtins.str,
                 assume_role_arn: _builtins.str):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "assume_role_arn", assume_role_arn)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> _builtins.str:
        return pulumi.get(self, "assume_role_arn")


@pulumi.output_type
class GetCredentialKeysSshResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetCredentialKeysTwAgentResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 shared: _builtins.bool,
                 work_dir: _builtins.str):
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "shared", shared)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> _builtins.bool:
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetDataLinkCredentialResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        return pulumi.get(self, "provider_type")


@pulumi.output_type
class GetDatasetDatasetResult(dict):
    def __init__(__self__, *,
                 date_created: _builtins.str,
                 deleted: _builtins.bool,
                 description: _builtins.str,
                 id: _builtins.str,
                 last_updated: _builtins.str,
                 media_type: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.bool deleted: Read-only flag indicating if the dataset has been deleted
        :param _builtins.str description: Detailed description of the dataset contents and purpose (max 1000 characters)
        :param _builtins.str id: Unique identifier for the dataset (max 22 characters)
        :param _builtins.str media_type: MIME type or media type of the dataset content (max 80 characters)
        :param _builtins.str name: Dataset name following naming conventions (1-100 characters)
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        """
        Read-only flag indicating if the dataset has been deleted
        """
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Detailed description of the dataset contents and purpose (max 1000 characters)
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Unique identifier for the dataset (max 22 characters)
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        MIME type or media type of the dataset content (max 80 characters)
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Dataset name following naming conventions (1-100 characters)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLabelsLabelResult(dict):
    def __init__(__self__, *,
                 date_created: _builtins.str,
                 id: _builtins.float,
                 is_default: _builtins.bool,
                 name: _builtins.str,
                 resource: _builtins.bool,
                 value: _builtins.str):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.bool:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPipelineComputeEnvResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 platform: _builtins.str,
                 region: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetPipelineLabelResult(dict):
    def __init__(__self__, *,
                 date_created: _builtins.str,
                 id: _builtins.float,
                 is_default: _builtins.bool,
                 name: _builtins.str,
                 resource: _builtins.bool,
                 value: _builtins.str):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.bool:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStudiosActiveConnectionResult(dict):
    def __init__(__self__, *,
                 avatar: _builtins.str,
                 email: _builtins.str,
                 id: _builtins.float,
                 last_active: _builtins.str,
                 user_name: _builtins.str):
        pulumi.set(__self__, "avatar", avatar)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_active", last_active)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def avatar(self) -> _builtins.str:
        return pulumi.get(self, "avatar")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastActive")
    def last_active(self) -> _builtins.str:
        return pulumi.get(self, "last_active")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetStudiosComputeEnvResult(dict):
    def __init__(__self__, *,
                 credentials_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 platform: _builtins.str,
                 region: _builtins.str,
                 work_dir: _builtins.str):
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> _builtins.str:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetStudiosConfigurationResult(dict):
    def __init__(__self__, *,
                 conda_environment: _builtins.str,
                 cpu: _builtins.float,
                 gpu: _builtins.float,
                 lifespan_hours: _builtins.float,
                 memory: _builtins.float,
                 mount_datas: Sequence[_builtins.str]):
        pulumi.set(__self__, "conda_environment", conda_environment)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "gpu", gpu)
        pulumi.set(__self__, "lifespan_hours", lifespan_hours)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "mount_datas", mount_datas)

    @_builtins.property
    @pulumi.getter(name="condaEnvironment")
    def conda_environment(self) -> _builtins.str:
        return pulumi.get(self, "conda_environment")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.float:
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def gpu(self) -> _builtins.float:
        return pulumi.get(self, "gpu")

    @_builtins.property
    @pulumi.getter(name="lifespanHours")
    def lifespan_hours(self) -> _builtins.float:
        return pulumi.get(self, "lifespan_hours")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="mountDatas")
    def mount_datas(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "mount_datas")


@pulumi.output_type
class GetStudiosLabelResult(dict):
    def __init__(__self__, *,
                 date_created: _builtins.str,
                 id: _builtins.float,
                 is_default: _builtins.bool,
                 name: _builtins.str,
                 resource: _builtins.bool,
                 value: _builtins.str):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.bool:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStudiosMountedDataLinkResult(dict):
    def __init__(__self__, *,
                 credentials: Sequence['outputs.GetStudiosMountedDataLinkCredentialResult'],
                 data_link_id: _builtins.str,
                 description: _builtins.str,
                 hidden: _builtins.bool,
                 message: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str,
                 public_accessible: _builtins.bool,
                 region: _builtins.str,
                 resource_ref: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetStudiosMountedDataLinkCredentialArgs'] credentials: Array of credentials required to access the data link
        :param _builtins.str data_link_id: Unique identifier for the data link
        :param _builtins.str description: Description of the data link's purpose and contents
        :param _builtins.str name: Display name for the data link connection
        :param _builtins.str region: Geographic region where the data link is hosted
        :param _builtins.str resource_ref: Reference identifier for the external resource
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "data_link_id", data_link_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "public_accessible", public_accessible)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_ref", resource_ref)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetStudiosMountedDataLinkCredentialResult']:
        """
        Array of credentials required to access the data link
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="dataLinkId")
    def data_link_id(self) -> _builtins.str:
        """
        Unique identifier for the data link
        """
        return pulumi.get(self, "data_link_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the data link's purpose and contents
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> _builtins.bool:
        return pulumi.get(self, "hidden")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Display name for the data link connection
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="publicAccessible")
    def public_accessible(self) -> _builtins.bool:
        return pulumi.get(self, "public_accessible")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Geographic region where the data link is hosted
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> _builtins.str:
        """
        Reference identifier for the external resource
        """
        return pulumi.get(self, "resource_ref")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetStudiosMountedDataLinkCredentialResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 provider_type: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provider_type", provider_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        return pulumi.get(self, "provider_type")


@pulumi.output_type
class GetStudiosParentCheckpointResult(dict):
    def __init__(__self__, *,
                 checkpoint_id: _builtins.float,
                 checkpoint_name: _builtins.str,
                 session_id: _builtins.str,
                 studio_name: _builtins.str):
        pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        pulumi.set(__self__, "checkpoint_name", checkpoint_name)
        pulumi.set(__self__, "session_id", session_id)
        pulumi.set(__self__, "studio_name", studio_name)

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> _builtins.float:
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="checkpointName")
    def checkpoint_name(self) -> _builtins.str:
        return pulumi.get(self, "checkpoint_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> _builtins.str:
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="studioName")
    def studio_name(self) -> _builtins.str:
        return pulumi.get(self, "studio_name")


@pulumi.output_type
class GetStudiosProgressResult(dict):
    def __init__(__self__, *,
                 message: _builtins.str,
                 status: _builtins.str,
                 warnings: Sequence[_builtins.str]):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "warnings", warnings)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def warnings(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "warnings")


@pulumi.output_type
class GetStudiosStatusInfoResult(dict):
    def __init__(__self__, *,
                 last_update: _builtins.str,
                 message: _builtins.str,
                 status: _builtins.str):
        pulumi.set(__self__, "last_update", last_update)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> _builtins.str:
        return pulumi.get(self, "last_update")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetStudiosTemplateResult(dict):
    def __init__(__self__, *,
                 icon: _builtins.str,
                 repository: _builtins.str,
                 status: _builtins.str,
                 tool: _builtins.str):
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tool", tool)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> _builtins.str:
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tool(self) -> _builtins.str:
        return pulumi.get(self, "tool")


@pulumi.output_type
class GetStudiosUserResult(dict):
    def __init__(__self__, *,
                 avatar: _builtins.str,
                 email: _builtins.str,
                 id: _builtins.float,
                 user_name: _builtins.str):
        pulumi.set(__self__, "avatar", avatar)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def avatar(self) -> _builtins.str:
        return pulumi.get(self, "avatar")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetUserWorkspacesOrgsAndWorkspaceResult(dict):
    def __init__(__self__, *,
                 org_id: _builtins.float,
                 org_logo_url: _builtins.str,
                 org_name: _builtins.str,
                 org_type: _builtins.str,
                 roles: Sequence[_builtins.str],
                 visibility: _builtins.str,
                 workspace_full_name: _builtins.str,
                 workspace_id: _builtins.float,
                 workspace_name: _builtins.str):
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "org_logo_url", org_logo_url)
        pulumi.set(__self__, "org_name", org_name)
        pulumi.set(__self__, "org_type", org_type)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "visibility", visibility)
        pulumi.set(__self__, "workspace_full_name", workspace_full_name)
        pulumi.set(__self__, "workspace_id", workspace_id)
        pulumi.set(__self__, "workspace_name", workspace_name)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.float:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="orgLogoUrl")
    def org_logo_url(self) -> _builtins.str:
        return pulumi.get(self, "org_logo_url")

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> _builtins.str:
        return pulumi.get(self, "org_name")

    @_builtins.property
    @pulumi.getter(name="orgType")
    def org_type(self) -> _builtins.str:
        return pulumi.get(self, "org_type")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> _builtins.str:
        return pulumi.get(self, "visibility")

    @_builtins.property
    @pulumi.getter(name="workspaceFullName")
    def workspace_full_name(self) -> _builtins.str:
        return pulumi.get(self, "workspace_full_name")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "workspace_id")

    @_builtins.property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> _builtins.str:
        return pulumi.get(self, "workspace_name")


@pulumi.output_type
class GetWorkflowsJobInfoResult(dict):
    def __init__(__self__, *,
                 exit_code: _builtins.float,
                 id: _builtins.float,
                 message: _builtins.str,
                 operation_id: _builtins.str,
                 status: _builtins.str):
        pulumi.set(__self__, "exit_code", exit_code)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "operation_id", operation_id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> _builtins.float:
        return pulumi.get(self, "exit_code")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> _builtins.str:
        return pulumi.get(self, "operation_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetWorkflowsLabelResult(dict):
    def __init__(__self__, *,
                 date_created: _builtins.str,
                 id: _builtins.float,
                 is_default: _builtins.bool,
                 name: _builtins.str,
                 resource: _builtins.bool,
                 value: _builtins.str):
        """
        :param _builtins.str date_created: Timestamp when the label was created
        :param _builtins.float id: Unique numeric identifier for the label
        :param _builtins.bool is_default: Flag indicating if this is a default system label
        :param _builtins.str name: Name or key of the label
        :param _builtins.bool resource: Flag indicating if this is a resource-level label
        :param _builtins.str value: Value associated with the label
        """
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        Timestamp when the label was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Unique numeric identifier for the label
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Flag indicating if this is a default system label
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name or key of the label
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.bool:
        """
        Flag indicating if this is a resource-level label
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value associated with the label
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWorkflowsPlatformResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkflowsProgressResult(dict):
    def __init__(__self__, *,
                 processes_progresses: Sequence['outputs.GetWorkflowsProgressProcessesProgressResult'],
                 total_processes: _builtins.float,
                 workflow_progress: 'outputs.GetWorkflowsProgressWorkflowProgressResult'):
        pulumi.set(__self__, "processes_progresses", processes_progresses)
        pulumi.set(__self__, "total_processes", total_processes)
        pulumi.set(__self__, "workflow_progress", workflow_progress)

    @_builtins.property
    @pulumi.getter(name="processesProgresses")
    def processes_progresses(self) -> Sequence['outputs.GetWorkflowsProgressProcessesProgressResult']:
        return pulumi.get(self, "processes_progresses")

    @_builtins.property
    @pulumi.getter(name="totalProcesses")
    def total_processes(self) -> _builtins.float:
        return pulumi.get(self, "total_processes")

    @_builtins.property
    @pulumi.getter(name="workflowProgress")
    def workflow_progress(self) -> 'outputs.GetWorkflowsProgressWorkflowProgressResult':
        return pulumi.get(self, "workflow_progress")


@pulumi.output_type
class GetWorkflowsProgressProcessesProgressResult(dict):
    def __init__(__self__, *,
                 aborted: _builtins.float,
                 cached: _builtins.float,
                 cpu_efficiency: _builtins.float,
                 cpu_load: _builtins.float,
                 cpu_time: _builtins.float,
                 cpus: _builtins.float,
                 date_created: _builtins.str,
                 failed: _builtins.float,
                 inv_ctx_switch: _builtins.float,
                 last_updated: _builtins.str,
                 load_cpus: _builtins.float,
                 load_memory: _builtins.float,
                 load_tasks: _builtins.float,
                 memory_efficiency: _builtins.float,
                 memory_req: _builtins.float,
                 memory_rss: _builtins.float,
                 peak_cpus: _builtins.float,
                 peak_memory: _builtins.float,
                 peak_tasks: _builtins.float,
                 pending: _builtins.float,
                 process: _builtins.str,
                 read_bytes: _builtins.float,
                 running: _builtins.float,
                 submitted: _builtins.float,
                 succeeded: _builtins.float,
                 vol_ctx_switch: _builtins.float,
                 write_bytes: _builtins.float):
        pulumi.set(__self__, "aborted", aborted)
        pulumi.set(__self__, "cached", cached)
        pulumi.set(__self__, "cpu_efficiency", cpu_efficiency)
        pulumi.set(__self__, "cpu_load", cpu_load)
        pulumi.set(__self__, "cpu_time", cpu_time)
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "failed", failed)
        pulumi.set(__self__, "inv_ctx_switch", inv_ctx_switch)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "load_cpus", load_cpus)
        pulumi.set(__self__, "load_memory", load_memory)
        pulumi.set(__self__, "load_tasks", load_tasks)
        pulumi.set(__self__, "memory_efficiency", memory_efficiency)
        pulumi.set(__self__, "memory_req", memory_req)
        pulumi.set(__self__, "memory_rss", memory_rss)
        pulumi.set(__self__, "peak_cpus", peak_cpus)
        pulumi.set(__self__, "peak_memory", peak_memory)
        pulumi.set(__self__, "peak_tasks", peak_tasks)
        pulumi.set(__self__, "pending", pending)
        pulumi.set(__self__, "process", process)
        pulumi.set(__self__, "read_bytes", read_bytes)
        pulumi.set(__self__, "running", running)
        pulumi.set(__self__, "submitted", submitted)
        pulumi.set(__self__, "succeeded", succeeded)
        pulumi.set(__self__, "vol_ctx_switch", vol_ctx_switch)
        pulumi.set(__self__, "write_bytes", write_bytes)

    @_builtins.property
    @pulumi.getter
    def aborted(self) -> _builtins.float:
        return pulumi.get(self, "aborted")

    @_builtins.property
    @pulumi.getter
    def cached(self) -> _builtins.float:
        return pulumi.get(self, "cached")

    @_builtins.property
    @pulumi.getter(name="cpuEfficiency")
    def cpu_efficiency(self) -> _builtins.float:
        return pulumi.get(self, "cpu_efficiency")

    @_builtins.property
    @pulumi.getter(name="cpuLoad")
    @_utilities.deprecated("""Deprecated""")
    def cpu_load(self) -> _builtins.float:
        return pulumi.get(self, "cpu_load")

    @_builtins.property
    @pulumi.getter(name="cpuTime")
    @_utilities.deprecated("""Deprecated""")
    def cpu_time(self) -> _builtins.float:
        return pulumi.get(self, "cpu_time")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def cpus(self) -> _builtins.float:
        return pulumi.get(self, "cpus")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def failed(self) -> _builtins.float:
        return pulumi.get(self, "failed")

    @_builtins.property
    @pulumi.getter(name="invCtxSwitch")
    @_utilities.deprecated("""Deprecated""")
    def inv_ctx_switch(self) -> _builtins.float:
        return pulumi.get(self, "inv_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="loadCpus")
    def load_cpus(self) -> _builtins.float:
        return pulumi.get(self, "load_cpus")

    @_builtins.property
    @pulumi.getter(name="loadMemory")
    def load_memory(self) -> _builtins.float:
        return pulumi.get(self, "load_memory")

    @_builtins.property
    @pulumi.getter(name="loadTasks")
    @_utilities.deprecated("""Deprecated""")
    def load_tasks(self) -> _builtins.float:
        return pulumi.get(self, "load_tasks")

    @_builtins.property
    @pulumi.getter(name="memoryEfficiency")
    def memory_efficiency(self) -> _builtins.float:
        return pulumi.get(self, "memory_efficiency")

    @_builtins.property
    @pulumi.getter(name="memoryReq")
    @_utilities.deprecated("""Deprecated""")
    def memory_req(self) -> _builtins.float:
        return pulumi.get(self, "memory_req")

    @_builtins.property
    @pulumi.getter(name="memoryRss")
    @_utilities.deprecated("""Deprecated""")
    def memory_rss(self) -> _builtins.float:
        return pulumi.get(self, "memory_rss")

    @_builtins.property
    @pulumi.getter(name="peakCpus")
    def peak_cpus(self) -> _builtins.float:
        return pulumi.get(self, "peak_cpus")

    @_builtins.property
    @pulumi.getter(name="peakMemory")
    def peak_memory(self) -> _builtins.float:
        return pulumi.get(self, "peak_memory")

    @_builtins.property
    @pulumi.getter(name="peakTasks")
    def peak_tasks(self) -> _builtins.float:
        return pulumi.get(self, "peak_tasks")

    @_builtins.property
    @pulumi.getter
    def pending(self) -> _builtins.float:
        return pulumi.get(self, "pending")

    @_builtins.property
    @pulumi.getter
    def process(self) -> _builtins.str:
        return pulumi.get(self, "process")

    @_builtins.property
    @pulumi.getter(name="readBytes")
    @_utilities.deprecated("""Deprecated""")
    def read_bytes(self) -> _builtins.float:
        return pulumi.get(self, "read_bytes")

    @_builtins.property
    @pulumi.getter
    def running(self) -> _builtins.float:
        return pulumi.get(self, "running")

    @_builtins.property
    @pulumi.getter
    def submitted(self) -> _builtins.float:
        return pulumi.get(self, "submitted")

    @_builtins.property
    @pulumi.getter
    def succeeded(self) -> _builtins.float:
        return pulumi.get(self, "succeeded")

    @_builtins.property
    @pulumi.getter(name="volCtxSwitch")
    @_utilities.deprecated("""Deprecated""")
    def vol_ctx_switch(self) -> _builtins.float:
        return pulumi.get(self, "vol_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="writeBytes")
    @_utilities.deprecated("""Deprecated""")
    def write_bytes(self) -> _builtins.float:
        return pulumi.get(self, "write_bytes")


@pulumi.output_type
class GetWorkflowsProgressWorkflowProgressResult(dict):
    def __init__(__self__, *,
                 aborted: _builtins.float,
                 cached: _builtins.float,
                 cost: _builtins.float,
                 cpu_efficiency: _builtins.float,
                 cpu_load: _builtins.float,
                 cpu_time: _builtins.float,
                 cpus: _builtins.float,
                 date_created: _builtins.str,
                 executors: Sequence[_builtins.str],
                 failed: _builtins.float,
                 inv_ctx_switch: _builtins.float,
                 last_updated: _builtins.str,
                 load_cpus: _builtins.float,
                 load_memory: _builtins.float,
                 load_tasks: _builtins.float,
                 memory_efficiency: _builtins.float,
                 memory_req: _builtins.float,
                 memory_rss: _builtins.float,
                 peak_cpus: _builtins.float,
                 peak_memory: _builtins.float,
                 peak_tasks: _builtins.float,
                 pending: _builtins.float,
                 read_bytes: _builtins.float,
                 running: _builtins.float,
                 submitted: _builtins.float,
                 succeeded: _builtins.float,
                 vol_ctx_switch: _builtins.float,
                 write_bytes: _builtins.float):
        pulumi.set(__self__, "aborted", aborted)
        pulumi.set(__self__, "cached", cached)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cpu_efficiency", cpu_efficiency)
        pulumi.set(__self__, "cpu_load", cpu_load)
        pulumi.set(__self__, "cpu_time", cpu_time)
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "executors", executors)
        pulumi.set(__self__, "failed", failed)
        pulumi.set(__self__, "inv_ctx_switch", inv_ctx_switch)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "load_cpus", load_cpus)
        pulumi.set(__self__, "load_memory", load_memory)
        pulumi.set(__self__, "load_tasks", load_tasks)
        pulumi.set(__self__, "memory_efficiency", memory_efficiency)
        pulumi.set(__self__, "memory_req", memory_req)
        pulumi.set(__self__, "memory_rss", memory_rss)
        pulumi.set(__self__, "peak_cpus", peak_cpus)
        pulumi.set(__self__, "peak_memory", peak_memory)
        pulumi.set(__self__, "peak_tasks", peak_tasks)
        pulumi.set(__self__, "pending", pending)
        pulumi.set(__self__, "read_bytes", read_bytes)
        pulumi.set(__self__, "running", running)
        pulumi.set(__self__, "submitted", submitted)
        pulumi.set(__self__, "succeeded", succeeded)
        pulumi.set(__self__, "vol_ctx_switch", vol_ctx_switch)
        pulumi.set(__self__, "write_bytes", write_bytes)

    @_builtins.property
    @pulumi.getter
    def aborted(self) -> _builtins.float:
        return pulumi.get(self, "aborted")

    @_builtins.property
    @pulumi.getter
    def cached(self) -> _builtins.float:
        return pulumi.get(self, "cached")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.float:
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="cpuEfficiency")
    def cpu_efficiency(self) -> _builtins.float:
        return pulumi.get(self, "cpu_efficiency")

    @_builtins.property
    @pulumi.getter(name="cpuLoad")
    def cpu_load(self) -> _builtins.float:
        return pulumi.get(self, "cpu_load")

    @_builtins.property
    @pulumi.getter(name="cpuTime")
    def cpu_time(self) -> _builtins.float:
        return pulumi.get(self, "cpu_time")

    @_builtins.property
    @pulumi.getter
    def cpus(self) -> _builtins.float:
        return pulumi.get(self, "cpus")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def executors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "executors")

    @_builtins.property
    @pulumi.getter
    def failed(self) -> _builtins.float:
        return pulumi.get(self, "failed")

    @_builtins.property
    @pulumi.getter(name="invCtxSwitch")
    def inv_ctx_switch(self) -> _builtins.float:
        return pulumi.get(self, "inv_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="loadCpus")
    def load_cpus(self) -> _builtins.float:
        return pulumi.get(self, "load_cpus")

    @_builtins.property
    @pulumi.getter(name="loadMemory")
    def load_memory(self) -> _builtins.float:
        return pulumi.get(self, "load_memory")

    @_builtins.property
    @pulumi.getter(name="loadTasks")
    def load_tasks(self) -> _builtins.float:
        return pulumi.get(self, "load_tasks")

    @_builtins.property
    @pulumi.getter(name="memoryEfficiency")
    def memory_efficiency(self) -> _builtins.float:
        return pulumi.get(self, "memory_efficiency")

    @_builtins.property
    @pulumi.getter(name="memoryReq")
    def memory_req(self) -> _builtins.float:
        return pulumi.get(self, "memory_req")

    @_builtins.property
    @pulumi.getter(name="memoryRss")
    def memory_rss(self) -> _builtins.float:
        return pulumi.get(self, "memory_rss")

    @_builtins.property
    @pulumi.getter(name="peakCpus")
    def peak_cpus(self) -> _builtins.float:
        return pulumi.get(self, "peak_cpus")

    @_builtins.property
    @pulumi.getter(name="peakMemory")
    def peak_memory(self) -> _builtins.float:
        return pulumi.get(self, "peak_memory")

    @_builtins.property
    @pulumi.getter(name="peakTasks")
    def peak_tasks(self) -> _builtins.float:
        return pulumi.get(self, "peak_tasks")

    @_builtins.property
    @pulumi.getter
    def pending(self) -> _builtins.float:
        return pulumi.get(self, "pending")

    @_builtins.property
    @pulumi.getter(name="readBytes")
    def read_bytes(self) -> _builtins.float:
        return pulumi.get(self, "read_bytes")

    @_builtins.property
    @pulumi.getter
    def running(self) -> _builtins.float:
        return pulumi.get(self, "running")

    @_builtins.property
    @pulumi.getter
    def submitted(self) -> _builtins.float:
        return pulumi.get(self, "submitted")

    @_builtins.property
    @pulumi.getter
    def succeeded(self) -> _builtins.float:
        return pulumi.get(self, "succeeded")

    @_builtins.property
    @pulumi.getter(name="volCtxSwitch")
    def vol_ctx_switch(self) -> _builtins.float:
        return pulumi.get(self, "vol_ctx_switch")

    @_builtins.property
    @pulumi.getter(name="writeBytes")
    def write_bytes(self) -> _builtins.float:
        return pulumi.get(self, "write_bytes")


@pulumi.output_type
class GetWorkflowsWorkflowResult(dict):
    def __init__(__self__, *,
                 command_line: _builtins.str,
                 commit_id: _builtins.str,
                 complete: _builtins.str,
                 config_files: Sequence[_builtins.str],
                 config_text: _builtins.str,
                 container: _builtins.str,
                 container_engine: _builtins.str,
                 date_created: _builtins.str,
                 deleted: _builtins.bool,
                 duration: _builtins.float,
                 error_message: _builtins.str,
                 error_report: _builtins.str,
                 exit_status: _builtins.float,
                 home_dir: _builtins.str,
                 id: _builtins.str,
                 last_updated: _builtins.str,
                 launch_dir: _builtins.str,
                 launch_id: _builtins.str,
                 log_file: _builtins.str,
                 manifest: 'outputs.GetWorkflowsWorkflowManifestResult',
                 nextflow: 'outputs.GetWorkflowsWorkflowNextflowResult',
                 operation_id: _builtins.str,
                 out_file: _builtins.str,
                 owner_id: _builtins.float,
                 params: Mapping[str, _builtins.str],
                 profile: _builtins.str,
                 project_dir: _builtins.str,
                 project_name: _builtins.str,
                 repository: _builtins.str,
                 requires_attention: _builtins.bool,
                 resume: _builtins.bool,
                 revision: _builtins.str,
                 run_name: _builtins.str,
                 script_file: _builtins.str,
                 script_id: _builtins.str,
                 script_name: _builtins.str,
                 session_id: _builtins.str,
                 start: _builtins.str,
                 stats: 'outputs.GetWorkflowsWorkflowStatsResult',
                 status: _builtins.str,
                 submit: _builtins.str,
                 success: _builtins.bool,
                 user_name: _builtins.str,
                 work_dir: _builtins.str):
        pulumi.set(__self__, "command_line", command_line)
        pulumi.set(__self__, "commit_id", commit_id)
        pulumi.set(__self__, "complete", complete)
        pulumi.set(__self__, "config_files", config_files)
        pulumi.set(__self__, "config_text", config_text)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "container_engine", container_engine)
        pulumi.set(__self__, "date_created", date_created)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "error_report", error_report)
        pulumi.set(__self__, "exit_status", exit_status)
        pulumi.set(__self__, "home_dir", home_dir)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "launch_dir", launch_dir)
        pulumi.set(__self__, "launch_id", launch_id)
        pulumi.set(__self__, "log_file", log_file)
        pulumi.set(__self__, "manifest", manifest)
        pulumi.set(__self__, "nextflow", nextflow)
        pulumi.set(__self__, "operation_id", operation_id)
        pulumi.set(__self__, "out_file", out_file)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "project_dir", project_dir)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "requires_attention", requires_attention)
        pulumi.set(__self__, "resume", resume)
        pulumi.set(__self__, "revision", revision)
        pulumi.set(__self__, "run_name", run_name)
        pulumi.set(__self__, "script_file", script_file)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "script_name", script_name)
        pulumi.set(__self__, "session_id", session_id)
        pulumi.set(__self__, "start", start)
        pulumi.set(__self__, "stats", stats)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "submit", submit)
        pulumi.set(__self__, "success", success)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "work_dir", work_dir)

    @_builtins.property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> _builtins.str:
        return pulumi.get(self, "command_line")

    @_builtins.property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> _builtins.str:
        return pulumi.get(self, "commit_id")

    @_builtins.property
    @pulumi.getter
    def complete(self) -> _builtins.str:
        return pulumi.get(self, "complete")

    @_builtins.property
    @pulumi.getter(name="configFiles")
    def config_files(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "config_files")

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> _builtins.str:
        return pulumi.get(self, "config_text")

    @_builtins.property
    @pulumi.getter
    def container(self) -> _builtins.str:
        return pulumi.get(self, "container")

    @_builtins.property
    @pulumi.getter(name="containerEngine")
    def container_engine(self) -> _builtins.str:
        return pulumi.get(self, "container_engine")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.float:
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="errorReport")
    def error_report(self) -> _builtins.str:
        return pulumi.get(self, "error_report")

    @_builtins.property
    @pulumi.getter(name="exitStatus")
    def exit_status(self) -> _builtins.float:
        return pulumi.get(self, "exit_status")

    @_builtins.property
    @pulumi.getter(name="homeDir")
    def home_dir(self) -> _builtins.str:
        return pulumi.get(self, "home_dir")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="launchDir")
    def launch_dir(self) -> _builtins.str:
        return pulumi.get(self, "launch_dir")

    @_builtins.property
    @pulumi.getter(name="launchId")
    def launch_id(self) -> _builtins.str:
        return pulumi.get(self, "launch_id")

    @_builtins.property
    @pulumi.getter(name="logFile")
    def log_file(self) -> _builtins.str:
        return pulumi.get(self, "log_file")

    @_builtins.property
    @pulumi.getter
    def manifest(self) -> 'outputs.GetWorkflowsWorkflowManifestResult':
        return pulumi.get(self, "manifest")

    @_builtins.property
    @pulumi.getter
    def nextflow(self) -> 'outputs.GetWorkflowsWorkflowNextflowResult':
        return pulumi.get(self, "nextflow")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> _builtins.str:
        return pulumi.get(self, "operation_id")

    @_builtins.property
    @pulumi.getter(name="outFile")
    def out_file(self) -> _builtins.str:
        return pulumi.get(self, "out_file")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> _builtins.float:
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter
    def params(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "params")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="projectDir")
    def project_dir(self) -> _builtins.str:
        return pulumi.get(self, "project_dir")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="requiresAttention")
    def requires_attention(self) -> _builtins.bool:
        return pulumi.get(self, "requires_attention")

    @_builtins.property
    @pulumi.getter
    def resume(self) -> _builtins.bool:
        return pulumi.get(self, "resume")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> _builtins.str:
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> _builtins.str:
        return pulumi.get(self, "run_name")

    @_builtins.property
    @pulumi.getter(name="scriptFile")
    def script_file(self) -> _builtins.str:
        return pulumi.get(self, "script_file")

    @_builtins.property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> _builtins.str:
        return pulumi.get(self, "script_id")

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> _builtins.str:
        return pulumi.get(self, "script_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> _builtins.str:
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter
    def start(self) -> _builtins.str:
        return pulumi.get(self, "start")

    @_builtins.property
    @pulumi.getter
    def stats(self) -> 'outputs.GetWorkflowsWorkflowStatsResult':
        return pulumi.get(self, "stats")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def submit(self) -> _builtins.str:
        return pulumi.get(self, "submit")

    @_builtins.property
    @pulumi.getter
    def success(self) -> _builtins.bool:
        return pulumi.get(self, "success")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> _builtins.str:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetWorkflowsWorkflowManifestResult(dict):
    def __init__(__self__, *,
                 author: _builtins.str,
                 default_branch: _builtins.str,
                 description: _builtins.str,
                 gitmodules: _builtins.str,
                 home_page: _builtins.str,
                 icon: _builtins.str,
                 main_script: _builtins.str,
                 name: _builtins.str,
                 nextflow_version: _builtins.str,
                 version: _builtins.str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gitmodules", gitmodules)
        pulumi.set(__self__, "home_page", home_page)
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "main_script", main_script)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nextflow_version", nextflow_version)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def author(self) -> _builtins.str:
        return pulumi.get(self, "author")

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> _builtins.str:
        return pulumi.get(self, "default_branch")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def gitmodules(self) -> _builtins.str:
        return pulumi.get(self, "gitmodules")

    @_builtins.property
    @pulumi.getter(name="homePage")
    def home_page(self) -> _builtins.str:
        return pulumi.get(self, "home_page")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> _builtins.str:
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> _builtins.str:
        return pulumi.get(self, "main_script")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextflowVersion")
    def nextflow_version(self) -> _builtins.str:
        return pulumi.get(self, "nextflow_version")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWorkflowsWorkflowNextflowResult(dict):
    def __init__(__self__, *,
                 build: _builtins.str,
                 timestamp: _builtins.str,
                 version: _builtins.str):
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def build(self) -> _builtins.str:
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.str:
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWorkflowsWorkflowStatsResult(dict):
    def __init__(__self__, *,
                 cached_count: _builtins.float,
                 cached_count_fmt: _builtins.str,
                 cached_duration: _builtins.float,
                 cached_pct: _builtins.float,
                 compute_time_fmt: _builtins.str,
                 failed_count: _builtins.float,
                 failed_count_fmt: _builtins.str,
                 failed_duration: _builtins.float,
                 failed_pct: _builtins.float,
                 ignored_count: _builtins.float,
                 ignored_count_fmt: _builtins.str,
                 ignored_pct: _builtins.float,
                 succeed_count: _builtins.float,
                 succeed_count_fmt: _builtins.str,
                 succeed_duration: _builtins.float,
                 succeed_pct: _builtins.float):
        pulumi.set(__self__, "cached_count", cached_count)
        pulumi.set(__self__, "cached_count_fmt", cached_count_fmt)
        pulumi.set(__self__, "cached_duration", cached_duration)
        pulumi.set(__self__, "cached_pct", cached_pct)
        pulumi.set(__self__, "compute_time_fmt", compute_time_fmt)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "failed_count_fmt", failed_count_fmt)
        pulumi.set(__self__, "failed_duration", failed_duration)
        pulumi.set(__self__, "failed_pct", failed_pct)
        pulumi.set(__self__, "ignored_count", ignored_count)
        pulumi.set(__self__, "ignored_count_fmt", ignored_count_fmt)
        pulumi.set(__self__, "ignored_pct", ignored_pct)
        pulumi.set(__self__, "succeed_count", succeed_count)
        pulumi.set(__self__, "succeed_count_fmt", succeed_count_fmt)
        pulumi.set(__self__, "succeed_duration", succeed_duration)
        pulumi.set(__self__, "succeed_pct", succeed_pct)

    @_builtins.property
    @pulumi.getter(name="cachedCount")
    def cached_count(self) -> _builtins.float:
        return pulumi.get(self, "cached_count")

    @_builtins.property
    @pulumi.getter(name="cachedCountFmt")
    def cached_count_fmt(self) -> _builtins.str:
        return pulumi.get(self, "cached_count_fmt")

    @_builtins.property
    @pulumi.getter(name="cachedDuration")
    def cached_duration(self) -> _builtins.float:
        return pulumi.get(self, "cached_duration")

    @_builtins.property
    @pulumi.getter(name="cachedPct")
    def cached_pct(self) -> _builtins.float:
        return pulumi.get(self, "cached_pct")

    @_builtins.property
    @pulumi.getter(name="computeTimeFmt")
    def compute_time_fmt(self) -> _builtins.str:
        return pulumi.get(self, "compute_time_fmt")

    @_builtins.property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> _builtins.float:
        return pulumi.get(self, "failed_count")

    @_builtins.property
    @pulumi.getter(name="failedCountFmt")
    def failed_count_fmt(self) -> _builtins.str:
        return pulumi.get(self, "failed_count_fmt")

    @_builtins.property
    @pulumi.getter(name="failedDuration")
    def failed_duration(self) -> _builtins.float:
        return pulumi.get(self, "failed_duration")

    @_builtins.property
    @pulumi.getter(name="failedPct")
    def failed_pct(self) -> _builtins.float:
        return pulumi.get(self, "failed_pct")

    @_builtins.property
    @pulumi.getter(name="ignoredCount")
    def ignored_count(self) -> _builtins.float:
        return pulumi.get(self, "ignored_count")

    @_builtins.property
    @pulumi.getter(name="ignoredCountFmt")
    def ignored_count_fmt(self) -> _builtins.str:
        return pulumi.get(self, "ignored_count_fmt")

    @_builtins.property
    @pulumi.getter(name="ignoredPct")
    def ignored_pct(self) -> _builtins.float:
        return pulumi.get(self, "ignored_pct")

    @_builtins.property
    @pulumi.getter(name="succeedCount")
    def succeed_count(self) -> _builtins.float:
        return pulumi.get(self, "succeed_count")

    @_builtins.property
    @pulumi.getter(name="succeedCountFmt")
    def succeed_count_fmt(self) -> _builtins.str:
        return pulumi.get(self, "succeed_count_fmt")

    @_builtins.property
    @pulumi.getter(name="succeedDuration")
    def succeed_duration(self) -> _builtins.float:
        return pulumi.get(self, "succeed_duration")

    @_builtins.property
    @pulumi.getter(name="succeedPct")
    def succeed_pct(self) -> _builtins.float:
        return pulumi.get(self, "succeed_pct")


@pulumi.output_type
class GetWorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 full_name: _builtins.str,
                 id: _builtins.float,
                 name: _builtins.str,
                 visibility: _builtins.str):
        """
        :param _builtins.str description: Detailed description of the workspace's purpose
        :param _builtins.str full_name: Complete display name for the workspace
        :param _builtins.float id: Unique numeric identifier for the workspace
        :param _builtins.str name: Short name or handle for the workspace
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Detailed description of the workspace's purpose
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fullName")
    def full_name(self) -> _builtins.str:
        """
        Complete display name for the workspace
        """
        return pulumi.get(self, "full_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Unique numeric identifier for the workspace
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Short name or handle for the workspace
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> _builtins.str:
        return pulumi.get(self, "visibility")


