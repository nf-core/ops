# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComputeEnvArgs', 'ComputeEnv']

@pulumi.input_type
class ComputeEnvArgs:
    def __init__(__self__, *,
                 compute_env: pulumi.Input['ComputeEnvComputeEnvArgs'],
                 workspace_id: pulumi.Input[_builtins.float],
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None):
        """
        The set of arguments for constructing a ComputeEnv resource.
        :param pulumi.Input['ComputeEnvComputeEnvArgs'] compute_env: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        """
        pulumi.set(__self__, "compute_env", compute_env)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> pulumi.Input['ComputeEnvComputeEnvArgs']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env")

    @compute_env.setter
    def compute_env(self, value: pulumi.Input['ComputeEnvComputeEnvArgs']):
        pulumi.set(self, "compute_env", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.float]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)


@pulumi.input_type
class _ComputeEnvState:
    def __init__(__self__, *,
                 compute_env: Optional[pulumi.Input['ComputeEnvComputeEnvArgs']] = None,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering ComputeEnv resources.
        :param pulumi.Input['ComputeEnvComputeEnvArgs'] compute_env: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_env_id: Compute environment string identifier
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        if compute_env is not None:
            pulumi.set(__self__, "compute_env", compute_env)
        if compute_env_id is not None:
            pulumi.set(__self__, "compute_env_id", compute_env_id)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> Optional[pulumi.Input['ComputeEnvComputeEnvArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env")

    @compute_env.setter
    def compute_env(self, value: Optional[pulumi.Input['ComputeEnvComputeEnvArgs']]):
        pulumi.set(self, "compute_env", value)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Compute environment string identifier
        """
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("seqera:index/computeEnv:ComputeEnv")
class ComputeEnv(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_env: Optional[pulumi.Input[Union['ComputeEnvComputeEnvArgs', 'ComputeEnvComputeEnvArgsDict']]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a ComputeEnv resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ComputeEnvComputeEnvArgs', 'ComputeEnvComputeEnvArgsDict']] compute_env: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeEnvArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeEnv resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeEnvArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeEnvArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_env: Optional[pulumi.Input[Union['ComputeEnvComputeEnvArgs', 'ComputeEnvComputeEnvArgsDict']]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeEnvArgs.__new__(ComputeEnvArgs)

            if compute_env is None and not opts.urn:
                raise TypeError("Missing required property 'compute_env'")
            __props__.__dict__["compute_env"] = compute_env
            __props__.__dict__["label_ids"] = label_ids
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["compute_env_id"] = None
        super(ComputeEnv, __self__).__init__(
            'seqera:index/computeEnv:ComputeEnv',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_env: Optional[pulumi.Input[Union['ComputeEnvComputeEnvArgs', 'ComputeEnvComputeEnvArgsDict']]] = None,
            compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
            label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'ComputeEnv':
        """
        Get an existing ComputeEnv resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ComputeEnvComputeEnvArgs', 'ComputeEnvComputeEnvArgsDict']] compute_env: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_env_id: Compute environment string identifier
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeEnvState.__new__(_ComputeEnvState)

        __props__.__dict__["compute_env"] = compute_env
        __props__.__dict__["compute_env_id"] = compute_env_id
        __props__.__dict__["label_ids"] = label_ids
        __props__.__dict__["workspace_id"] = workspace_id
        return ComputeEnv(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> pulumi.Output['outputs.ComputeEnvComputeEnv']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> pulumi.Output[_builtins.str]:
        """
        Compute environment string identifier
        """
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.float]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

