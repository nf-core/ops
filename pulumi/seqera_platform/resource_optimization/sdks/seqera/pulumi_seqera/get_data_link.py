# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDataLinkResult',
    'AwaitableGetDataLinkResult',
    'get_data_link',
    'get_data_link_output',
]

@pulumi.output_type
class GetDataLinkResult:
    """
    A collection of values returned by getDataLink.
    """
    def __init__(__self__, credentials=None, credentials_id=None, data_link_id=None, description=None, hidden=None, id=None, message=None, name=None, provider_type=None, public_accessible=None, region=None, resource_ref=None, status=None, type=None, workspace_id=None):
        if credentials and not isinstance(credentials, list):
            raise TypeError("Expected argument 'credentials' to be a list")
        pulumi.set(__self__, "credentials", credentials)
        if credentials_id and not isinstance(credentials_id, str):
            raise TypeError("Expected argument 'credentials_id' to be a str")
        pulumi.set(__self__, "credentials_id", credentials_id)
        if data_link_id and not isinstance(data_link_id, str):
            raise TypeError("Expected argument 'data_link_id' to be a str")
        pulumi.set(__self__, "data_link_id", data_link_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if hidden and not isinstance(hidden, bool):
            raise TypeError("Expected argument 'hidden' to be a bool")
        pulumi.set(__self__, "hidden", hidden)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if message and not isinstance(message, str):
            raise TypeError("Expected argument 'message' to be a str")
        pulumi.set(__self__, "message", message)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_type and not isinstance(provider_type, str):
            raise TypeError("Expected argument 'provider_type' to be a str")
        pulumi.set(__self__, "provider_type", provider_type)
        if public_accessible and not isinstance(public_accessible, bool):
            raise TypeError("Expected argument 'public_accessible' to be a bool")
        pulumi.set(__self__, "public_accessible", public_accessible)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_ref and not isinstance(resource_ref, str):
            raise TypeError("Expected argument 'resource_ref' to be a str")
        pulumi.set(__self__, "resource_ref", resource_ref)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetDataLinkCredentialResult']:
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="dataLinkId")
    def data_link_id(self) -> _builtins.str:
        return pulumi.get(self, "data_link_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> _builtins.bool:
        return pulumi.get(self, "hidden")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="publicAccessible")
    def public_accessible(self) -> _builtins.bool:
        return pulumi.get(self, "public_accessible")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> _builtins.str:
        return pulumi.get(self, "resource_ref")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDataLinkResult(GetDataLinkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataLinkResult(
            credentials=self.credentials,
            credentials_id=self.credentials_id,
            data_link_id=self.data_link_id,
            description=self.description,
            hidden=self.hidden,
            id=self.id,
            message=self.message,
            name=self.name,
            provider_type=self.provider_type,
            public_accessible=self.public_accessible,
            region=self.region,
            resource_ref=self.resource_ref,
            status=self.status,
            type=self.type,
            workspace_id=self.workspace_id)


def get_data_link(credentials_id: Optional[_builtins.str] = None,
                  data_link_id: Optional[_builtins.str] = None,
                  workspace_id: Optional[_builtins.float] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataLinkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['credentialsId'] = credentials_id
    __args__['dataLinkId'] = data_link_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getDataLink:getDataLink', __args__, opts=opts, typ=GetDataLinkResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDataLinkResult(
        credentials=pulumi.get(__ret__, 'credentials'),
        credentials_id=pulumi.get(__ret__, 'credentials_id'),
        data_link_id=pulumi.get(__ret__, 'data_link_id'),
        description=pulumi.get(__ret__, 'description'),
        hidden=pulumi.get(__ret__, 'hidden'),
        id=pulumi.get(__ret__, 'id'),
        message=pulumi.get(__ret__, 'message'),
        name=pulumi.get(__ret__, 'name'),
        provider_type=pulumi.get(__ret__, 'provider_type'),
        public_accessible=pulumi.get(__ret__, 'public_accessible'),
        region=pulumi.get(__ret__, 'region'),
        resource_ref=pulumi.get(__ret__, 'resource_ref'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_data_link_output(credentials_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         data_link_id: Optional[pulumi.Input[_builtins.str]] = None,
                         workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataLinkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['credentialsId'] = credentials_id
    __args__['dataLinkId'] = data_link_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getDataLink:getDataLink', __args__, opts=opts, typ=GetDataLinkResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDataLinkResult(
        credentials=pulumi.get(__response__, 'credentials'),
        credentials_id=pulumi.get(__response__, 'credentials_id'),
        data_link_id=pulumi.get(__response__, 'data_link_id'),
        description=pulumi.get(__response__, 'description'),
        hidden=pulumi.get(__response__, 'hidden'),
        id=pulumi.get(__response__, 'id'),
        message=pulumi.get(__response__, 'message'),
        name=pulumi.get(__response__, 'name'),
        provider_type=pulumi.get(__response__, 'provider_type'),
        public_accessible=pulumi.get(__response__, 'public_accessible'),
        region=pulumi.get(__response__, 'region'),
        resource_ref=pulumi.get(__response__, 'resource_ref'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
