# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPipelineSecretResult',
    'AwaitableGetPipelineSecretResult',
    'get_pipeline_secret',
    'get_pipeline_secret_output',
]

@pulumi.output_type
class GetPipelineSecretResult:
    """
    A collection of values returned by getPipelineSecret.
    """
    def __init__(__self__, date_created=None, id=None, last_updated=None, last_used=None, name=None, secret_id=None, workspace_id=None):
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        pulumi.set(__self__, "id", id)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if last_used and not isinstance(last_used, str):
            raise TypeError("Expected argument 'last_used' to be a str")
        pulumi.set(__self__, "last_used", last_used)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if secret_id and not isinstance(secret_id, float):
            raise TypeError("Expected argument 'secret_id' to be a float")
        pulumi.set(__self__, "secret_id", secret_id)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> _builtins.str:
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> _builtins.float:
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetPipelineSecretResult(GetPipelineSecretResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineSecretResult(
            date_created=self.date_created,
            id=self.id,
            last_updated=self.last_updated,
            last_used=self.last_used,
            name=self.name,
            secret_id=self.secret_id,
            workspace_id=self.workspace_id)


def get_pipeline_secret(secret_id: Optional[_builtins.float] = None,
                        workspace_id: Optional[_builtins.float] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineSecretResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['secretId'] = secret_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getPipelineSecret:getPipelineSecret', __args__, opts=opts, typ=GetPipelineSecretResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPipelineSecretResult(
        date_created=pulumi.get(__ret__, 'date_created'),
        id=pulumi.get(__ret__, 'id'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        last_used=pulumi.get(__ret__, 'last_used'),
        name=pulumi.get(__ret__, 'name'),
        secret_id=pulumi.get(__ret__, 'secret_id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_pipeline_secret_output(secret_id: Optional[pulumi.Input[_builtins.float]] = None,
                               workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelineSecretResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['secretId'] = secret_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getPipelineSecret:getPipelineSecret', __args__, opts=opts, typ=GetPipelineSecretResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPipelineSecretResult(
        date_created=pulumi.get(__response__, 'date_created'),
        id=pulumi.get(__response__, 'id'),
        last_updated=pulumi.get(__response__, 'last_updated'),
        last_used=pulumi.get(__response__, 'last_used'),
        name=pulumi.get(__response__, 'name'),
        secret_id=pulumi.get(__response__, 'secret_id'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
