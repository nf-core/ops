# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDatasetResult',
    'AwaitableGetDatasetResult',
    'get_dataset',
    'get_dataset_output',
]

@pulumi.output_type
class GetDatasetResult:
    """
    A collection of values returned by getDataset.
    """
    def __init__(__self__, dataset=None, dataset_id=None, id=None, workspace_id=None):
        if dataset and not isinstance(dataset, dict):
            raise TypeError("Expected argument 'dataset' to be a dict")
        pulumi.set(__self__, "dataset", dataset)
        if dataset_id and not isinstance(dataset_id, str):
            raise TypeError("Expected argument 'dataset_id' to be a str")
        pulumi.set(__self__, "dataset_id", dataset_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def dataset(self) -> 'outputs.GetDatasetDatasetResult':
        return pulumi.get(self, "dataset")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> _builtins.str:
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDatasetResult(GetDatasetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatasetResult(
            dataset=self.dataset,
            dataset_id=self.dataset_id,
            id=self.id,
            workspace_id=self.workspace_id)


def get_dataset(dataset_id: Optional[_builtins.str] = None,
                workspace_id: Optional[_builtins.float] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatasetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datasetId'] = dataset_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getDataset:getDataset', __args__, opts=opts, typ=GetDatasetResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDatasetResult(
        dataset=pulumi.get(__ret__, 'dataset'),
        dataset_id=pulumi.get(__ret__, 'dataset_id'),
        id=pulumi.get(__ret__, 'id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_dataset_output(dataset_id: Optional[pulumi.Input[_builtins.str]] = None,
                       workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatasetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datasetId'] = dataset_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getDataset:getDataset', __args__, opts=opts, typ=GetDatasetResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDatasetResult(
        dataset=pulumi.get(__response__, 'dataset'),
        dataset_id=pulumi.get(__response__, 'dataset_id'),
        id=pulumi.get(__response__, 'id'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
