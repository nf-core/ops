# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineArgs', 'Pipeline']

@pulumi.input_type
class PipelineArgs:
    def __init__(__self__, *,
                 launch: pulumi.Input['PipelineLaunchArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Pipeline resource.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        pulumi.set(__self__, "launch", launch)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def launch(self) -> pulumi.Input['PipelineLaunchArgs']:
        return pulumi.get(self, "launch")

    @launch.setter
    def launch(self, value: pulumi.Input['PipelineLaunchArgs']):
        pulumi.set(self, "launch", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _PipelineState:
    def __init__(__self__, *,
                 compute_env: Optional[pulumi.Input['PipelineComputeEnvArgs']] = None,
                 deleted: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineLabelArgs']]]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 launch: Optional[pulumi.Input['PipelineLaunchArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_status: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 org_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.float]] = None,
                 repository: Optional[pulumi.Input[_builtins.str]] = None,
                 user_first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.float]] = None,
                 user_last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 workspace_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Pipeline resources.
        :param pulumi.Input[_builtins.str] optimization_status: must be one of ["OPTIMIZED", "OPTIMIZABLE", "UNAVAILABLE"]
        :param pulumi.Input[_builtins.float] pipeline_id: Unique numeric identifier for the pipeline
        :param pulumi.Input[_builtins.str] repository: Git repository URL containing the pipeline source code
        :param pulumi.Input[_builtins.str] user_first_name: First name of the user who created the pipeline
        :param pulumi.Input[_builtins.float] user_id: Numeric identifier of the user who created the pipeline
        :param pulumi.Input[_builtins.str] user_name: Username of the pipeline creator
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        if compute_env is not None:
            pulumi.set(__self__, "compute_env", compute_env)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if launch is not None:
            pulumi.set(__self__, "launch", launch)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optimization_id is not None:
            pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_status is not None:
            pulumi.set(__self__, "optimization_status", optimization_status)
        if optimization_targets is not None:
            pulumi.set(__self__, "optimization_targets", optimization_targets)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_name is not None:
            pulumi.set(__self__, "org_name", org_name)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if user_first_name is not None:
            pulumi.set(__self__, "user_first_name", user_first_name)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_last_name is not None:
            pulumi.set(__self__, "user_last_name", user_last_name)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)
        if workspace_name is not None:
            pulumi.set(__self__, "workspace_name", workspace_name)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> Optional[pulumi.Input['PipelineComputeEnvArgs']]:
        return pulumi.get(self, "compute_env")

    @compute_env.setter
    def compute_env(self, value: Optional[pulumi.Input['PipelineComputeEnvArgs']]):
        pulumi.set(self, "compute_env", value)

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "deleted")

    @deleted.setter
    def deleted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deleted", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icon", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter
    def launch(self) -> Optional[pulumi.Input['PipelineLaunchArgs']]:
        return pulumi.get(self, "launch")

    @launch.setter
    def launch(self, value: Optional[pulumi.Input['PipelineLaunchArgs']]):
        pulumi.set(self, "launch", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "optimization_id")

    @optimization_id.setter
    def optimization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_id", value)

    @_builtins.property
    @pulumi.getter(name="optimizationStatus")
    def optimization_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["OPTIMIZED", "OPTIMIZABLE", "UNAVAILABLE"]
        """
        return pulumi.get(self, "optimization_status")

    @optimization_status.setter
    def optimization_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_status", value)

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "optimization_targets")

    @optimization_targets.setter
    def optimization_targets(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_targets", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "org_name")

    @org_name.setter
    def org_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_name", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the pipeline
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git repository URL containing the pipeline source code
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repository", value)

    @_builtins.property
    @pulumi.getter(name="userFirstName")
    def user_first_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        First name of the user who created the pipeline
        """
        return pulumi.get(self, "user_first_name")

    @user_first_name.setter
    def user_first_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_first_name", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Numeric identifier of the user who created the pipeline
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userLastName")
    def user_last_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_last_name")

    @user_last_name.setter
    def user_last_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_last_name", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Username of the pipeline creator
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_name", value)


@pulumi.type_token("seqera:index/pipeline:Pipeline")
class Pipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 launch: Optional[pulumi.Input[Union['PipelineLaunchArgs', 'PipelineLaunchArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Pipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Pipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 icon: Optional[pulumi.Input[_builtins.str]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 launch: Optional[pulumi.Input[Union['PipelineLaunchArgs', 'PipelineLaunchArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineArgs.__new__(PipelineArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["icon"] = icon
            __props__.__dict__["label_ids"] = label_ids
            if launch is None and not opts.urn:
                raise TypeError("Missing required property 'launch'")
            __props__.__dict__["launch"] = launch
            __props__.__dict__["name"] = name
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["compute_env"] = None
            __props__.__dict__["deleted"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["optimization_id"] = None
            __props__.__dict__["optimization_status"] = None
            __props__.__dict__["optimization_targets"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["org_name"] = None
            __props__.__dict__["pipeline_id"] = None
            __props__.__dict__["repository"] = None
            __props__.__dict__["user_first_name"] = None
            __props__.__dict__["user_id"] = None
            __props__.__dict__["user_last_name"] = None
            __props__.__dict__["user_name"] = None
            __props__.__dict__["visibility"] = None
            __props__.__dict__["workspace_name"] = None
        super(Pipeline, __self__).__init__(
            'seqera:index/pipeline:Pipeline',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_env: Optional[pulumi.Input[Union['PipelineComputeEnvArgs', 'PipelineComputeEnvArgsDict']]] = None,
            deleted: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            icon: Optional[pulumi.Input[_builtins.str]] = None,
            label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PipelineLabelArgs', 'PipelineLabelArgsDict']]]]] = None,
            last_updated: Optional[pulumi.Input[_builtins.str]] = None,
            launch: Optional[pulumi.Input[Union['PipelineLaunchArgs', 'PipelineLaunchArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
            optimization_status: Optional[pulumi.Input[_builtins.str]] = None,
            optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
            org_id: Optional[pulumi.Input[_builtins.float]] = None,
            org_name: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.float]] = None,
            repository: Optional[pulumi.Input[_builtins.str]] = None,
            user_first_name: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.float]] = None,
            user_last_name: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None,
            visibility: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
            workspace_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'Pipeline':
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] optimization_status: must be one of ["OPTIMIZED", "OPTIMIZABLE", "UNAVAILABLE"]
        :param pulumi.Input[_builtins.float] pipeline_id: Unique numeric identifier for the pipeline
        :param pulumi.Input[_builtins.str] repository: Git repository URL containing the pipeline source code
        :param pulumi.Input[_builtins.str] user_first_name: First name of the user who created the pipeline
        :param pulumi.Input[_builtins.float] user_id: Numeric identifier of the user who created the pipeline
        :param pulumi.Input[_builtins.str] user_name: Username of the pipeline creator
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineState.__new__(_PipelineState)

        __props__.__dict__["compute_env"] = compute_env
        __props__.__dict__["deleted"] = deleted
        __props__.__dict__["description"] = description
        __props__.__dict__["icon"] = icon
        __props__.__dict__["label_ids"] = label_ids
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["launch"] = launch
        __props__.__dict__["name"] = name
        __props__.__dict__["optimization_id"] = optimization_id
        __props__.__dict__["optimization_status"] = optimization_status
        __props__.__dict__["optimization_targets"] = optimization_targets
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["org_name"] = org_name
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["repository"] = repository
        __props__.__dict__["user_first_name"] = user_first_name
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_last_name"] = user_last_name
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["visibility"] = visibility
        __props__.__dict__["workspace_id"] = workspace_id
        __props__.__dict__["workspace_name"] = workspace_name
        return Pipeline(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> pulumi.Output['outputs.PipelineComputeEnv']:
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        return pulumi.get(self, "label_ids")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence['outputs.PipelineLabel']]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter
    def launch(self) -> pulumi.Output['outputs.PipelineLaunch']:
        return pulumi.get(self, "launch")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "optimization_id")

    @_builtins.property
    @pulumi.getter(name="optimizationStatus")
    def optimization_status(self) -> pulumi.Output[_builtins.str]:
        """
        must be one of ["OPTIMIZED", "OPTIMIZABLE", "UNAVAILABLE"]
        """
        return pulumi.get(self, "optimization_status")

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "optimization_targets")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "org_name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.float]:
        """
        Unique numeric identifier for the pipeline
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> pulumi.Output[_builtins.str]:
        """
        Git repository URL containing the pipeline source code
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="userFirstName")
    def user_first_name(self) -> pulumi.Output[_builtins.str]:
        """
        First name of the user who created the pipeline
        """
        return pulumi.get(self, "user_first_name")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[_builtins.float]:
        """
        Numeric identifier of the user who created the pipeline
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userLastName")
    def user_last_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "user_last_name")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[_builtins.str]:
        """
        Username of the pipeline creator
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "visibility")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.float]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @_builtins.property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "workspace_name")

