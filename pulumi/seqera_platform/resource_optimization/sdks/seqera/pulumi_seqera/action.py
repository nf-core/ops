# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActionArgs', 'Action']

@pulumi.input_type
class ActionArgs:
    def __init__(__self__, *,
                 launch: pulumi.Input['ActionLaunchArgs'],
                 source: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.float],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Action resource.
        :param pulumi.Input['ActionLaunchArgs'] launch: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] source: must be one of ["github", "tower"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        """
        pulumi.set(__self__, "launch", launch)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def launch(self) -> pulumi.Input['ActionLaunchArgs']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch")

    @launch.setter
    def launch(self, value: pulumi.Input['ActionLaunchArgs']):
        pulumi.set(self, "launch", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input[_builtins.str]:
        """
        must be one of ["github", "tower"]; Requires replacement if changed.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.float]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ActionState:
    def __init__(__self__, *,
                 action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input['ActionConfigArgs']] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 event: Optional[pulumi.Input['ActionEventArgs']] = None,
                 hook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hook_url: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLabelArgs']]]] = None,
                 last_seen: Optional[pulumi.Input[_builtins.str]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 launch: Optional[pulumi.Input['ActionLaunchArgs']] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Action resources.
        :param pulumi.Input[_builtins.str] action_id: Action string identifier
        :param pulumi.Input[_builtins.str] hook_id: Identifier for the webhook associated with this action
        :param pulumi.Input[_builtins.str] hook_url: URL endpoint for the webhook that triggers this action
        :param pulumi.Input['ActionLaunchArgs'] launch: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] message: Status or informational message about the action
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] source: must be one of ["github", "tower"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] status: must be one of ["CREATING", "ACTIVE", "ERROR", "PAUSED"]
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        """
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if hook_id is not None:
            pulumi.set(__self__, "hook_id", hook_id)
        if hook_url is not None:
            pulumi.set(__self__, "hook_url", hook_url)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if launch is not None:
            pulumi.set(__self__, "launch", launch)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Action string identifier
        """
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_id", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ActionConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ActionConfigArgs']]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input['ActionEventArgs']]:
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input['ActionEventArgs']]):
        pulumi.set(self, "event", value)

    @_builtins.property
    @pulumi.getter(name="hookId")
    def hook_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier for the webhook associated with this action
        """
        return pulumi.get(self, "hook_id")

    @hook_id.setter
    def hook_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hook_id", value)

    @_builtins.property
    @pulumi.getter(name="hookUrl")
    def hook_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL endpoint for the webhook that triggers this action
        """
        return pulumi.get(self, "hook_url")

    @hook_url.setter
    def hook_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hook_url", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_seen")

    @last_seen.setter
    def last_seen(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_seen", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter
    def launch(self) -> Optional[pulumi.Input['ActionLaunchArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch")

    @launch.setter
    def launch(self, value: Optional[pulumi.Input['ActionLaunchArgs']]):
        pulumi.set(self, "launch", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status or informational message about the action
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["github", "tower"]; Requires replacement if changed.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["CREATING", "ACTIVE", "ERROR", "PAUSED"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("seqera:index/action:Action")
class Action(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 launch: Optional[pulumi.Input[Union['ActionLaunchArgs', 'ActionLaunchArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Action resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ActionLaunchArgs', 'ActionLaunchArgsDict']] launch: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] source: must be one of ["github", "tower"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Action resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 launch: Optional[pulumi.Input[Union['ActionLaunchArgs', 'ActionLaunchArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActionArgs.__new__(ActionArgs)

            if launch is None and not opts.urn:
                raise TypeError("Missing required property 'launch'")
            __props__.__dict__["launch"] = launch
            __props__.__dict__["name"] = name
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["action_id"] = None
            __props__.__dict__["config"] = None
            __props__.__dict__["date_created"] = None
            __props__.__dict__["event"] = None
            __props__.__dict__["hook_id"] = None
            __props__.__dict__["hook_url"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["last_seen"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["status"] = None
        super(Action, __self__).__init__(
            'seqera:index/action:Action',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_id: Optional[pulumi.Input[_builtins.str]] = None,
            config: Optional[pulumi.Input[Union['ActionConfigArgs', 'ActionConfigArgsDict']]] = None,
            date_created: Optional[pulumi.Input[_builtins.str]] = None,
            event: Optional[pulumi.Input[Union['ActionEventArgs', 'ActionEventArgsDict']]] = None,
            hook_id: Optional[pulumi.Input[_builtins.str]] = None,
            hook_url: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ActionLabelArgs', 'ActionLabelArgsDict']]]]] = None,
            last_seen: Optional[pulumi.Input[_builtins.str]] = None,
            last_updated: Optional[pulumi.Input[_builtins.str]] = None,
            launch: Optional[pulumi.Input[Union['ActionLaunchArgs', 'ActionLaunchArgsDict']]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'Action':
        """
        Get an existing Action resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_id: Action string identifier
        :param pulumi.Input[_builtins.str] hook_id: Identifier for the webhook associated with this action
        :param pulumi.Input[_builtins.str] hook_url: URL endpoint for the webhook that triggers this action
        :param pulumi.Input[Union['ActionLaunchArgs', 'ActionLaunchArgsDict']] launch: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] message: Status or informational message about the action
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] source: must be one of ["github", "tower"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.str] status: must be one of ["CREATING", "ACTIVE", "ERROR", "PAUSED"]
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActionState.__new__(_ActionState)

        __props__.__dict__["action_id"] = action_id
        __props__.__dict__["config"] = config
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["event"] = event
        __props__.__dict__["hook_id"] = hook_id
        __props__.__dict__["hook_url"] = hook_url
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_seen"] = last_seen
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["launch"] = launch
        __props__.__dict__["message"] = message
        __props__.__dict__["name"] = name
        __props__.__dict__["source"] = source
        __props__.__dict__["status"] = status
        __props__.__dict__["workspace_id"] = workspace_id
        return Action(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> pulumi.Output[_builtins.str]:
        """
        Action string identifier
        """
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.ActionConfig']:
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def event(self) -> pulumi.Output['outputs.ActionEvent']:
        return pulumi.get(self, "event")

    @_builtins.property
    @pulumi.getter(name="hookId")
    def hook_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier for the webhook associated with this action
        """
        return pulumi.get(self, "hook_id")

    @_builtins.property
    @pulumi.getter(name="hookUrl")
    def hook_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL endpoint for the webhook that triggers this action
        """
        return pulumi.get(self, "hook_url")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence['outputs.ActionLabel']]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_seen")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter
    def launch(self) -> pulumi.Output['outputs.ActionLaunch']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        """
        Status or informational message about the action
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[_builtins.str]:
        """
        must be one of ["github", "tower"]; Requires replacement if changed.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        must be one of ["CREATING", "ACTIVE", "ERROR", "PAUSED"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.float]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

