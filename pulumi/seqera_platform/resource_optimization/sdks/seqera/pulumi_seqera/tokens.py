# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TokensArgs', 'Tokens']

@pulumi.input_type
class TokensArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 token_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Tokens resource.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] token_id: Token numeric identifier
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if token_id is not None:
            pulumi.set(__self__, "token_id", token_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Token numeric identifier
        """
        return pulumi.get(self, "token_id")

    @token_id.setter
    def token_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "token_id", value)


@pulumi.input_type
class _TokensState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 basic_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 last_used: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 token: Optional[pulumi.Input['TokensTokenArgs']] = None,
                 token_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tokens_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Tokens resources.
        :param pulumi.Input[_builtins.str] basic_auth: Deprecated basic authentication string
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the token was created
        :param pulumi.Input[_builtins.str] last_used: Timestamp when the token was last used for authentication
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input['TokensTokenArgs'] token: Represents an API access token for authentication. Contains token metadata, permissions, and expiration information for
               secure API access to platform resources.
        :param pulumi.Input[_builtins.float] token_id: Token numeric identifier
        :param pulumi.Input[_builtins.float] tokens_id: Unique numeric identifier for the access token (nullable)
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if basic_auth is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""basic_auth is deprecated: Deprecated""")
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if token_id is not None:
            pulumi.set(__self__, "token_id", token_id)
        if tokens_id is not None:
            pulumi.set(__self__, "tokens_id", tokens_id)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="basicAuth")
    @_utilities.deprecated("""Deprecated""")
    def basic_auth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Deprecated basic authentication string
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "basic_auth", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the token was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the token was last used for authentication
        """
        return pulumi.get(self, "last_used")

    @last_used.setter
    def last_used(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_used", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input['TokensTokenArgs']]:
        """
        Represents an API access token for authentication. Contains token metadata, permissions, and expiration information for
        secure API access to platform resources.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input['TokensTokenArgs']]):
        pulumi.set(self, "token", value)

    @_builtins.property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Token numeric identifier
        """
        return pulumi.get(self, "token_id")

    @token_id.setter
    def token_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "token_id", value)

    @_builtins.property
    @pulumi.getter(name="tokensId")
    def tokens_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the access token (nullable)
        """
        return pulumi.get(self, "tokens_id")

    @tokens_id.setter
    def tokens_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "tokens_id", value)


@pulumi.type_token("seqera:index/tokens:Tokens")
class Tokens(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 token_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Tokens resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] token_id: Token numeric identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TokensArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Tokens resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TokensArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TokensArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 token_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TokensArgs.__new__(TokensArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["token_id"] = token_id
            __props__.__dict__["access_key"] = None
            __props__.__dict__["basic_auth"] = None
            __props__.__dict__["date_created"] = None
            __props__.__dict__["last_used"] = None
            __props__.__dict__["token"] = None
            __props__.__dict__["tokens_id"] = None
        super(Tokens, __self__).__init__(
            'seqera:index/tokens:Tokens',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[_builtins.str]] = None,
            basic_auth: Optional[pulumi.Input[_builtins.str]] = None,
            date_created: Optional[pulumi.Input[_builtins.str]] = None,
            last_used: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            token: Optional[pulumi.Input[Union['TokensTokenArgs', 'TokensTokenArgsDict']]] = None,
            token_id: Optional[pulumi.Input[_builtins.float]] = None,
            tokens_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'Tokens':
        """
        Get an existing Tokens resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] basic_auth: Deprecated basic authentication string
        :param pulumi.Input[_builtins.str] date_created: Timestamp when the token was created
        :param pulumi.Input[_builtins.str] last_used: Timestamp when the token was last used for authentication
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[Union['TokensTokenArgs', 'TokensTokenArgsDict']] token: Represents an API access token for authentication. Contains token metadata, permissions, and expiration information for
               secure API access to platform resources.
        :param pulumi.Input[_builtins.float] token_id: Token numeric identifier
        :param pulumi.Input[_builtins.float] tokens_id: Unique numeric identifier for the access token (nullable)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TokensState.__new__(_TokensState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["basic_auth"] = basic_auth
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["last_used"] = last_used
        __props__.__dict__["name"] = name
        __props__.__dict__["token"] = token
        __props__.__dict__["token_id"] = token_id
        __props__.__dict__["tokens_id"] = tokens_id
        return Tokens(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="basicAuth")
    @_utilities.deprecated("""Deprecated""")
    def basic_auth(self) -> pulumi.Output[_builtins.str]:
        """
        Deprecated basic authentication string
        """
        return pulumi.get(self, "basic_auth")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[_builtins.str]:
        """
        Timestamp when the token was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> pulumi.Output[_builtins.str]:
        """
        Timestamp when the token was last used for authentication
        """
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def token(self) -> pulumi.Output['outputs.TokensToken']:
        """
        Represents an API access token for authentication. Contains token metadata, permissions, and expiration information for
        secure API access to platform resources.
        """
        return pulumi.get(self, "token")

    @_builtins.property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Token numeric identifier
        """
        return pulumi.get(self, "token_id")

    @_builtins.property
    @pulumi.getter(name="tokensId")
    def tokens_id(self) -> pulumi.Output[_builtins.float]:
        """
        Unique numeric identifier for the access token (nullable)
        """
        return pulumi.get(self, "tokens_id")

