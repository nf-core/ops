# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPipelineResult',
    'AwaitableGetPipelineResult',
    'get_pipeline',
    'get_pipeline_output',
]

@pulumi.output_type
class GetPipelineResult:
    """
    A collection of values returned by getPipeline.
    """
    def __init__(__self__, attributes=None, compute_env=None, deleted=None, description=None, icon=None, id=None, labels=None, last_updated=None, name=None, optimization_id=None, optimization_status=None, optimization_targets=None, org_id=None, org_name=None, pipeline_id=None, repository=None, source_workspace_id=None, user_first_name=None, user_id=None, user_last_name=None, user_name=None, visibility=None, workspace_id=None, workspace_name=None):
        if attributes and not isinstance(attributes, list):
            raise TypeError("Expected argument 'attributes' to be a list")
        pulumi.set(__self__, "attributes", attributes)
        if compute_env and not isinstance(compute_env, dict):
            raise TypeError("Expected argument 'compute_env' to be a dict")
        pulumi.set(__self__, "compute_env", compute_env)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if icon and not isinstance(icon, str):
            raise TypeError("Expected argument 'icon' to be a str")
        pulumi.set(__self__, "icon", icon)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if optimization_id and not isinstance(optimization_id, str):
            raise TypeError("Expected argument 'optimization_id' to be a str")
        pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_status and not isinstance(optimization_status, str):
            raise TypeError("Expected argument 'optimization_status' to be a str")
        pulumi.set(__self__, "optimization_status", optimization_status)
        if optimization_targets and not isinstance(optimization_targets, str):
            raise TypeError("Expected argument 'optimization_targets' to be a str")
        pulumi.set(__self__, "optimization_targets", optimization_targets)
        if org_id and not isinstance(org_id, float):
            raise TypeError("Expected argument 'org_id' to be a float")
        pulumi.set(__self__, "org_id", org_id)
        if org_name and not isinstance(org_name, str):
            raise TypeError("Expected argument 'org_name' to be a str")
        pulumi.set(__self__, "org_name", org_name)
        if pipeline_id and not isinstance(pipeline_id, float):
            raise TypeError("Expected argument 'pipeline_id' to be a float")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if source_workspace_id and not isinstance(source_workspace_id, float):
            raise TypeError("Expected argument 'source_workspace_id' to be a float")
        pulumi.set(__self__, "source_workspace_id", source_workspace_id)
        if user_first_name and not isinstance(user_first_name, str):
            raise TypeError("Expected argument 'user_first_name' to be a str")
        pulumi.set(__self__, "user_first_name", user_first_name)
        if user_id and not isinstance(user_id, float):
            raise TypeError("Expected argument 'user_id' to be a float")
        pulumi.set(__self__, "user_id", user_id)
        if user_last_name and not isinstance(user_last_name, str):
            raise TypeError("Expected argument 'user_last_name' to be a str")
        pulumi.set(__self__, "user_last_name", user_last_name)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)
        if workspace_name and not isinstance(workspace_name, str):
            raise TypeError("Expected argument 'workspace_name' to be a str")
        pulumi.set(__self__, "workspace_name", workspace_name)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> 'outputs.GetPipelineComputeEnvResult':
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> _builtins.str:
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetPipelineLabelResult']:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> _builtins.str:
        return pulumi.get(self, "optimization_id")

    @_builtins.property
    @pulumi.getter(name="optimizationStatus")
    def optimization_status(self) -> _builtins.str:
        return pulumi.get(self, "optimization_status")

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> _builtins.str:
        return pulumi.get(self, "optimization_targets")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.float:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> _builtins.str:
        return pulumi.get(self, "org_name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.float:
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="sourceWorkspaceId")
    def source_workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "source_workspace_id")

    @_builtins.property
    @pulumi.getter(name="userFirstName")
    def user_first_name(self) -> _builtins.str:
        return pulumi.get(self, "user_first_name")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.float:
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userLastName")
    def user_last_name(self) -> _builtins.str:
        return pulumi.get(self, "user_last_name")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> _builtins.str:
        return pulumi.get(self, "visibility")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "workspace_id")

    @_builtins.property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> _builtins.str:
        return pulumi.get(self, "workspace_name")


class AwaitableGetPipelineResult(GetPipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineResult(
            attributes=self.attributes,
            compute_env=self.compute_env,
            deleted=self.deleted,
            description=self.description,
            icon=self.icon,
            id=self.id,
            labels=self.labels,
            last_updated=self.last_updated,
            name=self.name,
            optimization_id=self.optimization_id,
            optimization_status=self.optimization_status,
            optimization_targets=self.optimization_targets,
            org_id=self.org_id,
            org_name=self.org_name,
            pipeline_id=self.pipeline_id,
            repository=self.repository,
            source_workspace_id=self.source_workspace_id,
            user_first_name=self.user_first_name,
            user_id=self.user_id,
            user_last_name=self.user_last_name,
            user_name=self.user_name,
            visibility=self.visibility,
            workspace_id=self.workspace_id,
            workspace_name=self.workspace_name)


def get_pipeline(attributes: Optional[Sequence[_builtins.str]] = None,
                 pipeline_id: Optional[_builtins.float] = None,
                 source_workspace_id: Optional[_builtins.float] = None,
                 workspace_id: Optional[_builtins.float] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['pipelineId'] = pipeline_id
    __args__['sourceWorkspaceId'] = source_workspace_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getPipeline:getPipeline', __args__, opts=opts, typ=GetPipelineResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPipelineResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        compute_env=pulumi.get(__ret__, 'compute_env'),
        deleted=pulumi.get(__ret__, 'deleted'),
        description=pulumi.get(__ret__, 'description'),
        icon=pulumi.get(__ret__, 'icon'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        name=pulumi.get(__ret__, 'name'),
        optimization_id=pulumi.get(__ret__, 'optimization_id'),
        optimization_status=pulumi.get(__ret__, 'optimization_status'),
        optimization_targets=pulumi.get(__ret__, 'optimization_targets'),
        org_id=pulumi.get(__ret__, 'org_id'),
        org_name=pulumi.get(__ret__, 'org_name'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        repository=pulumi.get(__ret__, 'repository'),
        source_workspace_id=pulumi.get(__ret__, 'source_workspace_id'),
        user_first_name=pulumi.get(__ret__, 'user_first_name'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_last_name=pulumi.get(__ret__, 'user_last_name'),
        user_name=pulumi.get(__ret__, 'user_name'),
        visibility=pulumi.get(__ret__, 'visibility'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'),
        workspace_name=pulumi.get(__ret__, 'workspace_name'))
def get_pipeline_output(attributes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                        pipeline_id: Optional[pulumi.Input[_builtins.float]] = None,
                        source_workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                        workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelineResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['pipelineId'] = pipeline_id
    __args__['sourceWorkspaceId'] = source_workspace_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getPipeline:getPipeline', __args__, opts=opts, typ=GetPipelineResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPipelineResult(
        attributes=pulumi.get(__response__, 'attributes'),
        compute_env=pulumi.get(__response__, 'compute_env'),
        deleted=pulumi.get(__response__, 'deleted'),
        description=pulumi.get(__response__, 'description'),
        icon=pulumi.get(__response__, 'icon'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        last_updated=pulumi.get(__response__, 'last_updated'),
        name=pulumi.get(__response__, 'name'),
        optimization_id=pulumi.get(__response__, 'optimization_id'),
        optimization_status=pulumi.get(__response__, 'optimization_status'),
        optimization_targets=pulumi.get(__response__, 'optimization_targets'),
        org_id=pulumi.get(__response__, 'org_id'),
        org_name=pulumi.get(__response__, 'org_name'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        repository=pulumi.get(__response__, 'repository'),
        source_workspace_id=pulumi.get(__response__, 'source_workspace_id'),
        user_first_name=pulumi.get(__response__, 'user_first_name'),
        user_id=pulumi.get(__response__, 'user_id'),
        user_last_name=pulumi.get(__response__, 'user_last_name'),
        user_name=pulumi.get(__response__, 'user_name'),
        visibility=pulumi.get(__response__, 'visibility'),
        workspace_id=pulumi.get(__response__, 'workspace_id'),
        workspace_name=pulumi.get(__response__, 'workspace_name')))
