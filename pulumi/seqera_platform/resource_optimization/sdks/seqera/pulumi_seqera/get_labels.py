# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLabelsResult',
    'AwaitableGetLabelsResult',
    'get_labels',
    'get_labels_output',
]

@pulumi.output_type
class GetLabelsResult:
    """
    A collection of values returned by getLabels.
    """
    def __init__(__self__, id=None, is_default=None, labels=None, max=None, offset=None, search=None, total_size=None, type=None, workspace_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if max and not isinstance(max, float):
            raise TypeError("Expected argument 'max' to be a float")
        pulumi.set(__self__, "max", max)
        if offset and not isinstance(offset, float):
            raise TypeError("Expected argument 'offset' to be a float")
        pulumi.set(__self__, "offset", offset)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if total_size and not isinstance(total_size, float):
            raise TypeError("Expected argument 'total_size' to be a float")
        pulumi.set(__self__, "total_size", total_size)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetLabelsLabelResult']:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def max(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "offset")

    @_builtins.property
    @pulumi.getter
    def search(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search")

    @_builtins.property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> _builtins.float:
        return pulumi.get(self, "total_size")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetLabelsResult(GetLabelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLabelsResult(
            id=self.id,
            is_default=self.is_default,
            labels=self.labels,
            max=self.max,
            offset=self.offset,
            search=self.search,
            total_size=self.total_size,
            type=self.type,
            workspace_id=self.workspace_id)


def get_labels(is_default: Optional[_builtins.bool] = None,
               max: Optional[_builtins.float] = None,
               offset: Optional[_builtins.float] = None,
               search: Optional[_builtins.str] = None,
               type: Optional[_builtins.str] = None,
               workspace_id: Optional[_builtins.float] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLabelsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['isDefault'] = is_default
    __args__['max'] = max
    __args__['offset'] = offset
    __args__['search'] = search
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getLabels:getLabels', __args__, opts=opts, typ=GetLabelsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLabelsResult(
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        labels=pulumi.get(__ret__, 'labels'),
        max=pulumi.get(__ret__, 'max'),
        offset=pulumi.get(__ret__, 'offset'),
        search=pulumi.get(__ret__, 'search'),
        total_size=pulumi.get(__ret__, 'total_size'),
        type=pulumi.get(__ret__, 'type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_labels_output(is_default: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                      max: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                      offset: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                      search: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLabelsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['isDefault'] = is_default
    __args__['max'] = max
    __args__['offset'] = offset
    __args__['search'] = search
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getLabels:getLabels', __args__, opts=opts, typ=GetLabelsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLabelsResult(
        id=pulumi.get(__response__, 'id'),
        is_default=pulumi.get(__response__, 'is_default'),
        labels=pulumi.get(__response__, 'labels'),
        max=pulumi.get(__response__, 'max'),
        offset=pulumi.get(__response__, 'offset'),
        search=pulumi.get(__response__, 'search'),
        total_size=pulumi.get(__response__, 'total_size'),
        type=pulumi.get(__response__, 'type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
