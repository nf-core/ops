# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserWorkspacesResult',
    'AwaitableGetUserWorkspacesResult',
    'get_user_workspaces',
    'get_user_workspaces_output',
]

@pulumi.output_type
class GetUserWorkspacesResult:
    """
    A collection of values returned by getUserWorkspaces.
    """
    def __init__(__self__, id=None, orgs_and_workspaces=None, user_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if orgs_and_workspaces and not isinstance(orgs_and_workspaces, list):
            raise TypeError("Expected argument 'orgs_and_workspaces' to be a list")
        pulumi.set(__self__, "orgs_and_workspaces", orgs_and_workspaces)
        if user_id and not isinstance(user_id, float):
            raise TypeError("Expected argument 'user_id' to be a float")
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="orgsAndWorkspaces")
    def orgs_and_workspaces(self) -> Sequence['outputs.GetUserWorkspacesOrgsAndWorkspaceResult']:
        return pulumi.get(self, "orgs_and_workspaces")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.float:
        return pulumi.get(self, "user_id")


class AwaitableGetUserWorkspacesResult(GetUserWorkspacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserWorkspacesResult(
            id=self.id,
            orgs_and_workspaces=self.orgs_and_workspaces,
            user_id=self.user_id)


def get_user_workspaces(user_id: Optional[_builtins.float] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserWorkspacesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getUserWorkspaces:getUserWorkspaces', __args__, opts=opts, typ=GetUserWorkspacesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetUserWorkspacesResult(
        id=pulumi.get(__ret__, 'id'),
        orgs_and_workspaces=pulumi.get(__ret__, 'orgs_and_workspaces'),
        user_id=pulumi.get(__ret__, 'user_id'))
def get_user_workspaces_output(user_id: Optional[pulumi.Input[_builtins.float]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserWorkspacesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['userId'] = user_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getUserWorkspaces:getUserWorkspaces', __args__, opts=opts, typ=GetUserWorkspacesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetUserWorkspacesResult(
        id=pulumi.get(__response__, 'id'),
        orgs_and_workspaces=pulumi.get(__response__, 'orgs_and_workspaces'),
        user_id=pulumi.get(__response__, 'user_id')))
