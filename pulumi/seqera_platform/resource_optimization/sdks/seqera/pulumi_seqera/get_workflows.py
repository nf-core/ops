# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetWorkflowsResult',
    'AwaitableGetWorkflowsResult',
    'get_workflows',
    'get_workflows_output',
]

@pulumi.output_type
class GetWorkflowsResult:
    """
    A collection of values returned by getWorkflows.
    """
    def __init__(__self__, attributes=None, id=None, job_info=None, labels=None, messages=None, optimized=None, org_id=None, org_name=None, platform=None, progress=None, workflow=None, workflow_id=None, workspace_id=None, workspace_name=None):
        if attributes and not isinstance(attributes, list):
            raise TypeError("Expected argument 'attributes' to be a list")
        pulumi.set(__self__, "attributes", attributes)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_info and not isinstance(job_info, dict):
            raise TypeError("Expected argument 'job_info' to be a dict")
        pulumi.set(__self__, "job_info", job_info)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if messages and not isinstance(messages, list):
            raise TypeError("Expected argument 'messages' to be a list")
        pulumi.set(__self__, "messages", messages)
        if optimized and not isinstance(optimized, bool):
            raise TypeError("Expected argument 'optimized' to be a bool")
        pulumi.set(__self__, "optimized", optimized)
        if org_id and not isinstance(org_id, float):
            raise TypeError("Expected argument 'org_id' to be a float")
        pulumi.set(__self__, "org_id", org_id)
        if org_name and not isinstance(org_name, str):
            raise TypeError("Expected argument 'org_name' to be a str")
        pulumi.set(__self__, "org_name", org_name)
        if platform and not isinstance(platform, dict):
            raise TypeError("Expected argument 'platform' to be a dict")
        pulumi.set(__self__, "platform", platform)
        if progress and not isinstance(progress, dict):
            raise TypeError("Expected argument 'progress' to be a dict")
        pulumi.set(__self__, "progress", progress)
        if workflow and not isinstance(workflow, dict):
            raise TypeError("Expected argument 'workflow' to be a dict")
        pulumi.set(__self__, "workflow", workflow)
        if workflow_id and not isinstance(workflow_id, str):
            raise TypeError("Expected argument 'workflow_id' to be a str")
        pulumi.set(__self__, "workflow_id", workflow_id)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)
        if workspace_name and not isinstance(workspace_name, str):
            raise TypeError("Expected argument 'workspace_name' to be a str")
        pulumi.set(__self__, "workspace_name", workspace_name)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobInfo")
    def job_info(self) -> 'outputs.GetWorkflowsJobInfoResult':
        return pulumi.get(self, "job_info")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetWorkflowsLabelResult']:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter
    def optimized(self) -> _builtins.bool:
        return pulumi.get(self, "optimized")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.float:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> _builtins.str:
        return pulumi.get(self, "org_name")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> 'outputs.GetWorkflowsPlatformResult':
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> 'outputs.GetWorkflowsProgressResult':
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def workflow(self) -> 'outputs.GetWorkflowsWorkflowResult':
        return pulumi.get(self, "workflow")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> _builtins.str:
        return pulumi.get(self, "workflow_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "workspace_id")

    @_builtins.property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> _builtins.str:
        return pulumi.get(self, "workspace_name")


class AwaitableGetWorkflowsResult(GetWorkflowsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowsResult(
            attributes=self.attributes,
            id=self.id,
            job_info=self.job_info,
            labels=self.labels,
            messages=self.messages,
            optimized=self.optimized,
            org_id=self.org_id,
            org_name=self.org_name,
            platform=self.platform,
            progress=self.progress,
            workflow=self.workflow,
            workflow_id=self.workflow_id,
            workspace_id=self.workspace_id,
            workspace_name=self.workspace_name)


def get_workflows(attributes: Optional[Sequence[_builtins.str]] = None,
                  workflow_id: Optional[_builtins.str] = None,
                  workspace_id: Optional[_builtins.float] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['workflowId'] = workflow_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getWorkflows:getWorkflows', __args__, opts=opts, typ=GetWorkflowsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetWorkflowsResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        id=pulumi.get(__ret__, 'id'),
        job_info=pulumi.get(__ret__, 'job_info'),
        labels=pulumi.get(__ret__, 'labels'),
        messages=pulumi.get(__ret__, 'messages'),
        optimized=pulumi.get(__ret__, 'optimized'),
        org_id=pulumi.get(__ret__, 'org_id'),
        org_name=pulumi.get(__ret__, 'org_name'),
        platform=pulumi.get(__ret__, 'platform'),
        progress=pulumi.get(__ret__, 'progress'),
        workflow=pulumi.get(__ret__, 'workflow'),
        workflow_id=pulumi.get(__ret__, 'workflow_id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'),
        workspace_name=pulumi.get(__ret__, 'workspace_name'))
def get_workflows_output(attributes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
                         workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkflowsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['workflowId'] = workflow_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getWorkflows:getWorkflows', __args__, opts=opts, typ=GetWorkflowsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetWorkflowsResult(
        attributes=pulumi.get(__response__, 'attributes'),
        id=pulumi.get(__response__, 'id'),
        job_info=pulumi.get(__response__, 'job_info'),
        labels=pulumi.get(__response__, 'labels'),
        messages=pulumi.get(__response__, 'messages'),
        optimized=pulumi.get(__response__, 'optimized'),
        org_id=pulumi.get(__response__, 'org_id'),
        org_name=pulumi.get(__response__, 'org_name'),
        platform=pulumi.get(__response__, 'platform'),
        progress=pulumi.get(__response__, 'progress'),
        workflow=pulumi.get(__response__, 'workflow'),
        workflow_id=pulumi.get(__response__, 'workflow_id'),
        workspace_id=pulumi.get(__response__, 'workspace_id'),
        workspace_name=pulumi.get(__response__, 'workspace_name')))
