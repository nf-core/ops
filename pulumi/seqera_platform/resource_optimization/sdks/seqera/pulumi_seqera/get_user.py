# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, avatar=None, avatar_id=None, date_created=None, default_workspace_id=None, deleted=None, description=None, email=None, first_name=None, id=None, last_access=None, last_name=None, last_updated=None, marketing_consent=None, need_consent=None, notification=None, organization=None, terms_of_use_consent=None, user_id=None, user_name=None):
        if avatar and not isinstance(avatar, str):
            raise TypeError("Expected argument 'avatar' to be a str")
        pulumi.set(__self__, "avatar", avatar)
        if avatar_id and not isinstance(avatar_id, str):
            raise TypeError("Expected argument 'avatar_id' to be a str")
        pulumi.set(__self__, "avatar_id", avatar_id)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if default_workspace_id and not isinstance(default_workspace_id, float):
            raise TypeError("Expected argument 'default_workspace_id' to be a float")
        pulumi.set(__self__, "default_workspace_id", default_workspace_id)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        pulumi.set(__self__, "first_name", first_name)
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        pulumi.set(__self__, "id", id)
        if last_access and not isinstance(last_access, str):
            raise TypeError("Expected argument 'last_access' to be a str")
        pulumi.set(__self__, "last_access", last_access)
        if last_name and not isinstance(last_name, str):
            raise TypeError("Expected argument 'last_name' to be a str")
        pulumi.set(__self__, "last_name", last_name)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if marketing_consent and not isinstance(marketing_consent, bool):
            raise TypeError("Expected argument 'marketing_consent' to be a bool")
        pulumi.set(__self__, "marketing_consent", marketing_consent)
        if need_consent and not isinstance(need_consent, bool):
            raise TypeError("Expected argument 'need_consent' to be a bool")
        pulumi.set(__self__, "need_consent", need_consent)
        if notification and not isinstance(notification, bool):
            raise TypeError("Expected argument 'notification' to be a bool")
        pulumi.set(__self__, "notification", notification)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if terms_of_use_consent and not isinstance(terms_of_use_consent, bool):
            raise TypeError("Expected argument 'terms_of_use_consent' to be a bool")
        pulumi.set(__self__, "terms_of_use_consent", terms_of_use_consent)
        if user_id and not isinstance(user_id, float):
            raise TypeError("Expected argument 'user_id' to be a float")
        pulumi.set(__self__, "user_id", user_id)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def avatar(self) -> _builtins.str:
        return pulumi.get(self, "avatar")

    @_builtins.property
    @pulumi.getter(name="avatarId")
    def avatar_id(self) -> _builtins.str:
        return pulumi.get(self, "avatar_id")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="defaultWorkspaceId")
    def default_workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "default_workspace_id")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> _builtins.str:
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastAccess")
    def last_access(self) -> _builtins.str:
        return pulumi.get(self, "last_access")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> _builtins.str:
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="marketingConsent")
    def marketing_consent(self) -> _builtins.bool:
        return pulumi.get(self, "marketing_consent")

    @_builtins.property
    @pulumi.getter(name="needConsent")
    def need_consent(self) -> _builtins.bool:
        return pulumi.get(self, "need_consent")

    @_builtins.property
    @pulumi.getter
    def notification(self) -> _builtins.bool:
        return pulumi.get(self, "notification")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> _builtins.str:
        return pulumi.get(self, "organization")

    @_builtins.property
    @pulumi.getter(name="termsOfUseConsent")
    def terms_of_use_consent(self) -> _builtins.bool:
        return pulumi.get(self, "terms_of_use_consent")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.float:
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            avatar=self.avatar,
            avatar_id=self.avatar_id,
            date_created=self.date_created,
            default_workspace_id=self.default_workspace_id,
            deleted=self.deleted,
            description=self.description,
            email=self.email,
            first_name=self.first_name,
            id=self.id,
            last_access=self.last_access,
            last_name=self.last_name,
            last_updated=self.last_updated,
            marketing_consent=self.marketing_consent,
            need_consent=self.need_consent,
            notification=self.notification,
            organization=self.organization,
            terms_of_use_consent=self.terms_of_use_consent,
            user_id=self.user_id,
            user_name=self.user_name)


def get_user(user_id: Optional[_builtins.float] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult, package_ref=_utilities.get_package()).value

    return AwaitableGetUserResult(
        avatar=pulumi.get(__ret__, 'avatar'),
        avatar_id=pulumi.get(__ret__, 'avatar_id'),
        date_created=pulumi.get(__ret__, 'date_created'),
        default_workspace_id=pulumi.get(__ret__, 'default_workspace_id'),
        deleted=pulumi.get(__ret__, 'deleted'),
        description=pulumi.get(__ret__, 'description'),
        email=pulumi.get(__ret__, 'email'),
        first_name=pulumi.get(__ret__, 'first_name'),
        id=pulumi.get(__ret__, 'id'),
        last_access=pulumi.get(__ret__, 'last_access'),
        last_name=pulumi.get(__ret__, 'last_name'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        marketing_consent=pulumi.get(__ret__, 'marketing_consent'),
        need_consent=pulumi.get(__ret__, 'need_consent'),
        notification=pulumi.get(__ret__, 'notification'),
        organization=pulumi.get(__ret__, 'organization'),
        terms_of_use_consent=pulumi.get(__ret__, 'terms_of_use_consent'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_user_output(user_id: Optional[pulumi.Input[_builtins.float]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['userId'] = user_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetUserResult(
        avatar=pulumi.get(__response__, 'avatar'),
        avatar_id=pulumi.get(__response__, 'avatar_id'),
        date_created=pulumi.get(__response__, 'date_created'),
        default_workspace_id=pulumi.get(__response__, 'default_workspace_id'),
        deleted=pulumi.get(__response__, 'deleted'),
        description=pulumi.get(__response__, 'description'),
        email=pulumi.get(__response__, 'email'),
        first_name=pulumi.get(__response__, 'first_name'),
        id=pulumi.get(__response__, 'id'),
        last_access=pulumi.get(__response__, 'last_access'),
        last_name=pulumi.get(__response__, 'last_name'),
        last_updated=pulumi.get(__response__, 'last_updated'),
        marketing_consent=pulumi.get(__response__, 'marketing_consent'),
        need_consent=pulumi.get(__response__, 'need_consent'),
        notification=pulumi.get(__response__, 'notification'),
        organization=pulumi.get(__response__, 'organization'),
        terms_of_use_consent=pulumi.get(__response__, 'terms_of_use_consent'),
        user_id=pulumi.get(__response__, 'user_id'),
        user_name=pulumi.get(__response__, 'user_name')))
