# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OrgsArgs', 'Orgs']

@pulumi.input_type
class OrgsArgs:
    def __init__(__self__, *,
                 full_name: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Orgs resource.
        """
        pulumi.set(__self__, "full_name", full_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if logo_id is not None:
            pulumi.set(__self__, "logo_id", logo_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "full_name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="logoId")
    def logo_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logo_id")

    @logo_id.setter
    def logo_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logo_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _OrgsState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 full_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 member_id: Optional[pulumi.Input[_builtins.float]] = None,
                 member_role: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 paying: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Orgs resources.
        :param pulumi.Input[_builtins.str] member_role: must be one of ["owner", "member", "collaborator"]
        :param pulumi.Input[_builtins.float] org_id: Unique numeric identifier for the organization
        :param pulumi.Input[_builtins.bool] paying: Deprecated flag indicating if organization has paid subscription
        :param pulumi.Input[_builtins.str] type: must be one of ["academic", "evaluating", "pro", "basic", "internal"]
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if logo_id is not None:
            pulumi.set(__self__, "logo_id", logo_id)
        if logo_url is not None:
            pulumi.set(__self__, "logo_url", logo_url)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if member_role is not None:
            pulumi.set(__self__, "member_role", member_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if paying is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""paying is deprecated: Deprecated""")
        if paying is not None:
            pulumi.set(__self__, "paying", paying)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "full_name", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="logoId")
    def logo_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logo_id")

    @logo_id.setter
    def logo_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logo_id", value)

    @_builtins.property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logo_url")

    @logo_url.setter
    def logo_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logo_url", value)

    @_builtins.property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "member_id", value)

    @_builtins.property
    @pulumi.getter(name="memberRole")
    def member_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["owner", "member", "collaborator"]
        """
        return pulumi.get(self, "member_role")

    @member_role.setter
    def member_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_role", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the organization
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def paying(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecated flag indicating if organization has paid subscription
        """
        return pulumi.get(self, "paying")

    @paying.setter
    def paying(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "paying", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["academic", "evaluating", "pro", "basic", "internal"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website", value)


@pulumi.type_token("seqera:index/orgs:Orgs")
class Orgs(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 full_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Orgs resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Orgs resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 full_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logo_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgsArgs.__new__(OrgsArgs)

            __props__.__dict__["description"] = description
            if full_name is None and not opts.urn:
                raise TypeError("Missing required property 'full_name'")
            __props__.__dict__["full_name"] = full_name
            __props__.__dict__["location"] = location
            __props__.__dict__["logo_id"] = logo_id
            __props__.__dict__["name"] = name
            __props__.__dict__["website"] = website
            __props__.__dict__["logo_url"] = None
            __props__.__dict__["member_id"] = None
            __props__.__dict__["member_role"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["paying"] = None
            __props__.__dict__["type"] = None
        super(Orgs, __self__).__init__(
            'seqera:index/orgs:Orgs',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            full_name: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            logo_id: Optional[pulumi.Input[_builtins.str]] = None,
            logo_url: Optional[pulumi.Input[_builtins.str]] = None,
            member_id: Optional[pulumi.Input[_builtins.float]] = None,
            member_role: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            org_id: Optional[pulumi.Input[_builtins.float]] = None,
            paying: Optional[pulumi.Input[_builtins.bool]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            website: Optional[pulumi.Input[_builtins.str]] = None) -> 'Orgs':
        """
        Get an existing Orgs resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] member_role: must be one of ["owner", "member", "collaborator"]
        :param pulumi.Input[_builtins.float] org_id: Unique numeric identifier for the organization
        :param pulumi.Input[_builtins.bool] paying: Deprecated flag indicating if organization has paid subscription
        :param pulumi.Input[_builtins.str] type: must be one of ["academic", "evaluating", "pro", "basic", "internal"]
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgsState.__new__(_OrgsState)

        __props__.__dict__["description"] = description
        __props__.__dict__["full_name"] = full_name
        __props__.__dict__["location"] = location
        __props__.__dict__["logo_id"] = logo_id
        __props__.__dict__["logo_url"] = logo_url
        __props__.__dict__["member_id"] = member_id
        __props__.__dict__["member_role"] = member_role
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["paying"] = paying
        __props__.__dict__["type"] = type
        __props__.__dict__["website"] = website
        return Orgs(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "full_name")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="logoId")
    def logo_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logo_id")

    @_builtins.property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logo_url")

    @_builtins.property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "member_id")

    @_builtins.property
    @pulumi.getter(name="memberRole")
    def member_role(self) -> pulumi.Output[_builtins.str]:
        """
        must be one of ["owner", "member", "collaborator"]
        """
        return pulumi.get(self, "member_role")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[_builtins.float]:
        """
        Unique numeric identifier for the organization
        """
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def paying(self) -> pulumi.Output[_builtins.bool]:
        """
        Deprecated flag indicating if organization has paid subscription
        """
        return pulumi.get(self, "paying")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        must be one of ["academic", "evaluating", "pro", "basic", "internal"]
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def website(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "website")

