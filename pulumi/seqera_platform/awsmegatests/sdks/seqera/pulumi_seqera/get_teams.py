# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTeamsResult',
    'AwaitableGetTeamsResult',
    'get_teams',
    'get_teams_output',
]

@pulumi.output_type
class GetTeamsResult:
    """
    A collection of values returned by getTeams.
    """
    def __init__(__self__, avatar_url=None, description=None, id=None, members_count=None, name=None, org_id=None, team_id=None):
        if avatar_url and not isinstance(avatar_url, str):
            raise TypeError("Expected argument 'avatar_url' to be a str")
        pulumi.set(__self__, "avatar_url", avatar_url)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members_count and not isinstance(members_count, float):
            raise TypeError("Expected argument 'members_count' to be a float")
        pulumi.set(__self__, "members_count", members_count)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, float):
            raise TypeError("Expected argument 'org_id' to be a float")
        pulumi.set(__self__, "org_id", org_id)
        if team_id and not isinstance(team_id, float):
            raise TypeError("Expected argument 'team_id' to be a float")
        pulumi.set(__self__, "team_id", team_id)

    @_builtins.property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> _builtins.str:
        return pulumi.get(self, "avatar_url")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="membersCount")
    def members_count(self) -> _builtins.float:
        return pulumi.get(self, "members_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="teamId")
    def team_id(self) -> _builtins.float:
        return pulumi.get(self, "team_id")


class AwaitableGetTeamsResult(GetTeamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamsResult(
            avatar_url=self.avatar_url,
            description=self.description,
            id=self.id,
            members_count=self.members_count,
            name=self.name,
            org_id=self.org_id,
            team_id=self.team_id)


def get_teams(org_id: Optional[_builtins.float] = None,
              team_id: Optional[_builtins.float] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getTeams:getTeams', __args__, opts=opts, typ=GetTeamsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetTeamsResult(
        avatar_url=pulumi.get(__ret__, 'avatar_url'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        members_count=pulumi.get(__ret__, 'members_count'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        team_id=pulumi.get(__ret__, 'team_id'))
def get_teams_output(org_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                     team_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTeamsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getTeams:getTeams', __args__, opts=opts, typ=GetTeamsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetTeamsResult(
        avatar_url=pulumi.get(__response__, 'avatar_url'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        members_count=pulumi.get(__response__, 'members_count'),
        name=pulumi.get(__response__, 'name'),
        org_id=pulumi.get(__response__, 'org_id'),
        team_id=pulumi.get(__response__, 'team_id')))
