# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StudiosArgs', 'Studios']

@pulumi.input_type
class StudiosArgs:
    def __init__(__self__, *,
                 compute_env_id: pulumi.Input[_builtins.str],
                 data_studio_tool_url: pulumi.Input[_builtins.str],
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 configuration: Optional[pulumi.Input['StudiosConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_checkpoint_id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_private: Optional[pulumi.Input[_builtins.bool]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 spot: Optional[pulumi.Input[_builtins.bool]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Studios resource.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] data_studio_tool_url: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] auto_start: Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.
        :param pulumi.Input['StudiosConfigurationArgs'] configuration: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] description: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] initial_checkpoint_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] is_private: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] spot: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "data_studio_tool_url", data_studio_tool_url)
        if auto_start is not None:
            pulumi.set(__self__, "auto_start", auto_start)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if initial_checkpoint_id is not None:
            pulumi.set(__self__, "initial_checkpoint_id", initial_checkpoint_id)
        if is_private is not None:
            pulumi.set(__self__, "is_private", is_private)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if spot is not None:
            pulumi.set(__self__, "spot", spot)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter(name="dataStudioToolUrl")
    def data_studio_tool_url(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "data_studio_tool_url")

    @data_studio_tool_url.setter
    def data_studio_tool_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "data_studio_tool_url", value)

    @_builtins.property
    @pulumi.getter(name="autoStart")
    def auto_start(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.
        """
        return pulumi.get(self, "auto_start")

    @auto_start.setter
    def auto_start(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_start", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['StudiosConfigurationArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['StudiosConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="initialCheckpointId")
    def initial_checkpoint_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "initial_checkpoint_id")

    @initial_checkpoint_id.setter
    def initial_checkpoint_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "initial_checkpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "is_private")

    @is_private.setter
    def is_private(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_private", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def spot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "spot")

    @spot.setter
    def spot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "spot", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _StudiosState:
    def __init__(__self__, *,
                 active_connections: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosActiveConnectionArgs']]]] = None,
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 base_image: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_env: Optional[pulumi.Input['StudiosComputeEnvArgs']] = None,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input['StudiosConfigurationArgs']] = None,
                 custom_image: Optional[pulumi.Input[_builtins.bool]] = None,
                 data_studio_tool_url: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_lifespan_hours: Optional[pulumi.Input[_builtins.float]] = None,
                 initial_checkpoint_id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_private: Optional[pulumi.Input[_builtins.bool]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosLabelArgs']]]] = None,
                 last_started: Optional[pulumi.Input[_builtins.str]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 mounted_data_links: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_checkpoint: Optional[pulumi.Input['StudiosParentCheckpointArgs']] = None,
                 progresses: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosProgressArgs']]]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 spot: Optional[pulumi.Input[_builtins.bool]] = None,
                 status_info: Optional[pulumi.Input['StudiosStatusInfoArgs']] = None,
                 studio_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input['StudiosTemplateArgs']] = None,
                 user: Optional[pulumi.Input['StudiosUserArgs']] = None,
                 wave_build_url: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Studios resources.
        :param pulumi.Input[_builtins.bool] auto_start: Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input['StudiosConfigurationArgs'] configuration: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] data_studio_tool_url: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] description: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] initial_checkpoint_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] is_private: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] session_id: Unique identifier for the Studio session
        :param pulumi.Input[_builtins.bool] spot: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] studio_url: URL to access the running Studio instance
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        """
        if active_connections is not None:
            pulumi.set(__self__, "active_connections", active_connections)
        if auto_start is not None:
            pulumi.set(__self__, "auto_start", auto_start)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if compute_env is not None:
            pulumi.set(__self__, "compute_env", compute_env)
        if compute_env_id is not None:
            pulumi.set(__self__, "compute_env_id", compute_env_id)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if custom_image is not None:
            pulumi.set(__self__, "custom_image", custom_image)
        if data_studio_tool_url is not None:
            pulumi.set(__self__, "data_studio_tool_url", data_studio_tool_url)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_lifespan_hours is not None:
            pulumi.set(__self__, "effective_lifespan_hours", effective_lifespan_hours)
        if initial_checkpoint_id is not None:
            pulumi.set(__self__, "initial_checkpoint_id", initial_checkpoint_id)
        if is_private is not None:
            pulumi.set(__self__, "is_private", is_private)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_started is not None:
            pulumi.set(__self__, "last_started", last_started)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if mounted_data_links is not None:
            pulumi.set(__self__, "mounted_data_links", mounted_data_links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_checkpoint is not None:
            pulumi.set(__self__, "parent_checkpoint", parent_checkpoint)
        if progresses is not None:
            pulumi.set(__self__, "progresses", progresses)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if spot is not None:
            pulumi.set(__self__, "spot", spot)
        if status_info is not None:
            pulumi.set(__self__, "status_info", status_info)
        if studio_url is not None:
            pulumi.set(__self__, "studio_url", studio_url)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if wave_build_url is not None:
            pulumi.set(__self__, "wave_build_url", wave_build_url)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="activeConnections")
    def active_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StudiosActiveConnectionArgs']]]]:
        return pulumi.get(self, "active_connections")

    @active_connections.setter
    def active_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosActiveConnectionArgs']]]]):
        pulumi.set(self, "active_connections", value)

    @_builtins.property
    @pulumi.getter(name="autoStart")
    def auto_start(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.
        """
        return pulumi.get(self, "auto_start")

    @auto_start.setter
    def auto_start(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_start", value)

    @_builtins.property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "base_image")

    @base_image.setter
    def base_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_image", value)

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> Optional[pulumi.Input['StudiosComputeEnvArgs']]:
        return pulumi.get(self, "compute_env")

    @compute_env.setter
    def compute_env(self, value: Optional[pulumi.Input['StudiosComputeEnvArgs']]):
        pulumi.set(self, "compute_env", value)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['StudiosConfigurationArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['StudiosConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="customImage")
    def custom_image(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "custom_image")

    @custom_image.setter
    def custom_image(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "custom_image", value)

    @_builtins.property
    @pulumi.getter(name="dataStudioToolUrl")
    def data_studio_tool_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "data_studio_tool_url")

    @data_studio_tool_url.setter
    def data_studio_tool_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_studio_tool_url", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="effectiveLifespanHours")
    def effective_lifespan_hours(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "effective_lifespan_hours")

    @effective_lifespan_hours.setter
    def effective_lifespan_hours(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "effective_lifespan_hours", value)

    @_builtins.property
    @pulumi.getter(name="initialCheckpointId")
    def initial_checkpoint_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "initial_checkpoint_id")

    @initial_checkpoint_id.setter
    def initial_checkpoint_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "initial_checkpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "is_private")

    @is_private.setter
    def is_private(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_private", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StudiosLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="lastStarted")
    def last_started(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_started")

    @last_started.setter
    def last_started(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_started", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="mountedDataLinks")
    def mounted_data_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkArgs']]]]:
        return pulumi.get(self, "mounted_data_links")

    @mounted_data_links.setter
    def mounted_data_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosMountedDataLinkArgs']]]]):
        pulumi.set(self, "mounted_data_links", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentCheckpoint")
    def parent_checkpoint(self) -> Optional[pulumi.Input['StudiosParentCheckpointArgs']]:
        return pulumi.get(self, "parent_checkpoint")

    @parent_checkpoint.setter
    def parent_checkpoint(self, value: Optional[pulumi.Input['StudiosParentCheckpointArgs']]):
        pulumi.set(self, "parent_checkpoint", value)

    @_builtins.property
    @pulumi.getter
    def progresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StudiosProgressArgs']]]]:
        return pulumi.get(self, "progresses")

    @progresses.setter
    def progresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StudiosProgressArgs']]]]):
        pulumi.set(self, "progresses", value)

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the Studio session
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_id", value)

    @_builtins.property
    @pulumi.getter
    def spot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "spot")

    @spot.setter
    def spot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "spot", value)

    @_builtins.property
    @pulumi.getter(name="statusInfo")
    def status_info(self) -> Optional[pulumi.Input['StudiosStatusInfoArgs']]:
        return pulumi.get(self, "status_info")

    @status_info.setter
    def status_info(self, value: Optional[pulumi.Input['StudiosStatusInfoArgs']]):
        pulumi.set(self, "status_info", value)

    @_builtins.property
    @pulumi.getter(name="studioUrl")
    def studio_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL to access the running Studio instance
        """
        return pulumi.get(self, "studio_url")

    @studio_url.setter
    def studio_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "studio_url", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['StudiosTemplateArgs']]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['StudiosTemplateArgs']]):
        pulumi.set(self, "template", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input['StudiosUserArgs']]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input['StudiosUserArgs']]):
        pulumi.set(self, "user", value)

    @_builtins.property
    @pulumi.getter(name="waveBuildUrl")
    def wave_build_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "wave_build_url")

    @wave_build_url.setter
    def wave_build_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wave_build_url", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("seqera:index/studios:Studios")
class Studios(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['StudiosConfigurationArgs', 'StudiosConfigurationArgsDict']]] = None,
                 data_studio_tool_url: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_checkpoint_id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_private: Optional[pulumi.Input[_builtins.bool]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 spot: Optional[pulumi.Input[_builtins.bool]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Studios resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_start: Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[Union['StudiosConfigurationArgs', 'StudiosConfigurationArgsDict']] configuration: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] data_studio_tool_url: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] description: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] initial_checkpoint_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] is_private: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] spot: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StudiosArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Studios resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StudiosArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StudiosArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['StudiosConfigurationArgs', 'StudiosConfigurationArgsDict']]] = None,
                 data_studio_tool_url: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_checkpoint_id: Optional[pulumi.Input[_builtins.float]] = None,
                 is_private: Optional[pulumi.Input[_builtins.bool]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 spot: Optional[pulumi.Input[_builtins.bool]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StudiosArgs.__new__(StudiosArgs)

            __props__.__dict__["auto_start"] = auto_start
            if compute_env_id is None and not opts.urn:
                raise TypeError("Missing required property 'compute_env_id'")
            __props__.__dict__["compute_env_id"] = compute_env_id
            __props__.__dict__["configuration"] = configuration
            if data_studio_tool_url is None and not opts.urn:
                raise TypeError("Missing required property 'data_studio_tool_url'")
            __props__.__dict__["data_studio_tool_url"] = data_studio_tool_url
            __props__.__dict__["description"] = description
            __props__.__dict__["initial_checkpoint_id"] = initial_checkpoint_id
            __props__.__dict__["is_private"] = is_private
            __props__.__dict__["label_ids"] = label_ids
            __props__.__dict__["name"] = name
            __props__.__dict__["spot"] = spot
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["active_connections"] = None
            __props__.__dict__["base_image"] = None
            __props__.__dict__["compute_env"] = None
            __props__.__dict__["custom_image"] = None
            __props__.__dict__["date_created"] = None
            __props__.__dict__["effective_lifespan_hours"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["last_started"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["mounted_data_links"] = None
            __props__.__dict__["parent_checkpoint"] = None
            __props__.__dict__["progresses"] = None
            __props__.__dict__["session_id"] = None
            __props__.__dict__["status_info"] = None
            __props__.__dict__["studio_url"] = None
            __props__.__dict__["template"] = None
            __props__.__dict__["user"] = None
            __props__.__dict__["wave_build_url"] = None
        super(Studios, __self__).__init__(
            'seqera:index/studios:Studios',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StudiosActiveConnectionArgs', 'StudiosActiveConnectionArgsDict']]]]] = None,
            auto_start: Optional[pulumi.Input[_builtins.bool]] = None,
            base_image: Optional[pulumi.Input[_builtins.str]] = None,
            compute_env: Optional[pulumi.Input[Union['StudiosComputeEnvArgs', 'StudiosComputeEnvArgsDict']]] = None,
            compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
            configuration: Optional[pulumi.Input[Union['StudiosConfigurationArgs', 'StudiosConfigurationArgsDict']]] = None,
            custom_image: Optional[pulumi.Input[_builtins.bool]] = None,
            data_studio_tool_url: Optional[pulumi.Input[_builtins.str]] = None,
            date_created: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            effective_lifespan_hours: Optional[pulumi.Input[_builtins.float]] = None,
            initial_checkpoint_id: Optional[pulumi.Input[_builtins.float]] = None,
            is_private: Optional[pulumi.Input[_builtins.bool]] = None,
            label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StudiosLabelArgs', 'StudiosLabelArgsDict']]]]] = None,
            last_started: Optional[pulumi.Input[_builtins.str]] = None,
            last_updated: Optional[pulumi.Input[_builtins.str]] = None,
            mounted_data_links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StudiosMountedDataLinkArgs', 'StudiosMountedDataLinkArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_checkpoint: Optional[pulumi.Input[Union['StudiosParentCheckpointArgs', 'StudiosParentCheckpointArgsDict']]] = None,
            progresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StudiosProgressArgs', 'StudiosProgressArgsDict']]]]] = None,
            session_id: Optional[pulumi.Input[_builtins.str]] = None,
            spot: Optional[pulumi.Input[_builtins.bool]] = None,
            status_info: Optional[pulumi.Input[Union['StudiosStatusInfoArgs', 'StudiosStatusInfoArgsDict']]] = None,
            studio_url: Optional[pulumi.Input[_builtins.str]] = None,
            template: Optional[pulumi.Input[Union['StudiosTemplateArgs', 'StudiosTemplateArgsDict']]] = None,
            user: Optional[pulumi.Input[Union['StudiosUserArgs', 'StudiosUserArgsDict']]] = None,
            wave_build_url: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'Studios':
        """
        Get an existing Studios resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auto_start: Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[Union['StudiosConfigurationArgs', 'StudiosConfigurationArgsDict']] configuration: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] data_studio_tool_url: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] description: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] initial_checkpoint_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] is_private: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] session_id: Unique identifier for the Studio session
        :param pulumi.Input[_builtins.bool] spot: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] studio_url: URL to access the running Studio instance
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StudiosState.__new__(_StudiosState)

        __props__.__dict__["active_connections"] = active_connections
        __props__.__dict__["auto_start"] = auto_start
        __props__.__dict__["base_image"] = base_image
        __props__.__dict__["compute_env"] = compute_env
        __props__.__dict__["compute_env_id"] = compute_env_id
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["custom_image"] = custom_image
        __props__.__dict__["data_studio_tool_url"] = data_studio_tool_url
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["description"] = description
        __props__.__dict__["effective_lifespan_hours"] = effective_lifespan_hours
        __props__.__dict__["initial_checkpoint_id"] = initial_checkpoint_id
        __props__.__dict__["is_private"] = is_private
        __props__.__dict__["label_ids"] = label_ids
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_started"] = last_started
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["mounted_data_links"] = mounted_data_links
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_checkpoint"] = parent_checkpoint
        __props__.__dict__["progresses"] = progresses
        __props__.__dict__["session_id"] = session_id
        __props__.__dict__["spot"] = spot
        __props__.__dict__["status_info"] = status_info
        __props__.__dict__["studio_url"] = studio_url
        __props__.__dict__["template"] = template
        __props__.__dict__["user"] = user
        __props__.__dict__["wave_build_url"] = wave_build_url
        __props__.__dict__["workspace_id"] = workspace_id
        return Studios(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="activeConnections")
    def active_connections(self) -> pulumi.Output[Sequence['outputs.StudiosActiveConnection']]:
        return pulumi.get(self, "active_connections")

    @_builtins.property
    @pulumi.getter(name="autoStart")
    def auto_start(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.
        """
        return pulumi.get(self, "auto_start")

    @_builtins.property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "base_image")

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> pulumi.Output['outputs.StudiosComputeEnv']:
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.StudiosConfiguration']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="customImage")
    def custom_image(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "custom_image")

    @_builtins.property
    @pulumi.getter(name="dataStudioToolUrl")
    def data_studio_tool_url(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "data_studio_tool_url")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="effectiveLifespanHours")
    def effective_lifespan_hours(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "effective_lifespan_hours")

    @_builtins.property
    @pulumi.getter(name="initialCheckpointId")
    def initial_checkpoint_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "initial_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> pulumi.Output[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "is_private")

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence['outputs.StudiosLabel']]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastStarted")
    def last_started(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_started")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="mountedDataLinks")
    def mounted_data_links(self) -> pulumi.Output[Sequence['outputs.StudiosMountedDataLink']]:
        return pulumi.get(self, "mounted_data_links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentCheckpoint")
    def parent_checkpoint(self) -> pulumi.Output['outputs.StudiosParentCheckpoint']:
        return pulumi.get(self, "parent_checkpoint")

    @_builtins.property
    @pulumi.getter
    def progresses(self) -> pulumi.Output[Sequence['outputs.StudiosProgress']]:
        return pulumi.get(self, "progresses")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for the Studio session
        """
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter
    def spot(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "spot")

    @_builtins.property
    @pulumi.getter(name="statusInfo")
    def status_info(self) -> pulumi.Output['outputs.StudiosStatusInfo']:
        return pulumi.get(self, "status_info")

    @_builtins.property
    @pulumi.getter(name="studioUrl")
    def studio_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL to access the running Studio instance
        """
        return pulumi.get(self, "studio_url")

    @_builtins.property
    @pulumi.getter
    def template(self) -> pulumi.Output['outputs.StudiosTemplate']:
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter
    def user(self) -> pulumi.Output['outputs.StudiosUser']:
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="waveBuildUrl")
    def wave_build_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "wave_build_url")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.float]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

