# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 bearer_auth: pulumi.Input[_builtins.str],
                 server_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[_builtins.str] server_url: Server URL (defaults to https://api.cloud.seqera.io)
        """
        pulumi.set(__self__, "bearer_auth", bearer_auth)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)

    @_builtins.property
    @pulumi.getter(name="bearerAuth")
    def bearer_auth(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "bearer_auth")

    @bearer_auth.setter
    def bearer_auth(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bearer_auth", value)

    @_builtins.property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Server URL (defaults to https://api.cloud.seqera.io)
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_url", value)


@pulumi.type_token("pulumi:providers:seqera")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bearer_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the seqera package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] server_url: Server URL (defaults to https://api.cloud.seqera.io)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the seqera package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bearer_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if bearer_auth is None and not opts.urn:
                raise TypeError("Missing required property 'bearer_auth'")
            __props__.__dict__["bearer_auth"] = None if bearer_auth is None else pulumi.Output.secret(bearer_auth)
            __props__.__dict__["server_url"] = server_url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["bearerAuth"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'seqera',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @_builtins.property
    @pulumi.getter(name="bearerAuth")
    def bearer_auth(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "bearer_auth")

    @_builtins.property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Server URL (defaults to https://api.cloud.seqera.io)
        """
        return pulumi.get(self, "server_url")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @_builtins.property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:seqera/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult, package_ref=_utilities.get_package())

