# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCredentialResult',
    'AwaitableGetCredentialResult',
    'get_credential',
    'get_credential_output',
]

@pulumi.output_type
class GetCredentialResult:
    """
    A collection of values returned by getCredential.
    """
    def __init__(__self__, base_url=None, category=None, credentials_id=None, date_created=None, deleted=None, description=None, id=None, keys=None, last_updated=None, last_used=None, name=None, provider_type=None, workspace_id=None):
        if base_url and not isinstance(base_url, str):
            raise TypeError("Expected argument 'base_url' to be a str")
        pulumi.set(__self__, "base_url", base_url)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if credentials_id and not isinstance(credentials_id, str):
            raise TypeError("Expected argument 'credentials_id' to be a str")
        pulumi.set(__self__, "credentials_id", credentials_id)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keys and not isinstance(keys, dict):
            raise TypeError("Expected argument 'keys' to be a dict")
        pulumi.set(__self__, "keys", keys)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if last_used and not isinstance(last_used, str):
            raise TypeError("Expected argument 'last_used' to be a str")
        pulumi.set(__self__, "last_used", last_used)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_type and not isinstance(provider_type, str):
            raise TypeError("Expected argument 'provider_type' to be a str")
        pulumi.set(__self__, "provider_type", provider_type)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> _builtins.str:
        return pulumi.get(self, "base_url")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> _builtins.str:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> 'outputs.GetCredentialKeysResult':
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> _builtins.str:
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> _builtins.str:
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetCredentialResult(GetCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCredentialResult(
            base_url=self.base_url,
            category=self.category,
            credentials_id=self.credentials_id,
            date_created=self.date_created,
            deleted=self.deleted,
            description=self.description,
            id=self.id,
            keys=self.keys,
            last_updated=self.last_updated,
            last_used=self.last_used,
            name=self.name,
            provider_type=self.provider_type,
            workspace_id=self.workspace_id)


def get_credential(credentials_id: Optional[_builtins.str] = None,
                   workspace_id: Optional[_builtins.float] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCredentialResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['credentialsId'] = credentials_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getCredential:getCredential', __args__, opts=opts, typ=GetCredentialResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCredentialResult(
        base_url=pulumi.get(__ret__, 'base_url'),
        category=pulumi.get(__ret__, 'category'),
        credentials_id=pulumi.get(__ret__, 'credentials_id'),
        date_created=pulumi.get(__ret__, 'date_created'),
        deleted=pulumi.get(__ret__, 'deleted'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        keys=pulumi.get(__ret__, 'keys'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        last_used=pulumi.get(__ret__, 'last_used'),
        name=pulumi.get(__ret__, 'name'),
        provider_type=pulumi.get(__ret__, 'provider_type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_credential_output(credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                          workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCredentialResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['credentialsId'] = credentials_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getCredential:getCredential', __args__, opts=opts, typ=GetCredentialResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCredentialResult(
        base_url=pulumi.get(__response__, 'base_url'),
        category=pulumi.get(__response__, 'category'),
        credentials_id=pulumi.get(__response__, 'credentials_id'),
        date_created=pulumi.get(__response__, 'date_created'),
        deleted=pulumi.get(__response__, 'deleted'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        keys=pulumi.get(__response__, 'keys'),
        last_updated=pulumi.get(__response__, 'last_updated'),
        last_used=pulumi.get(__response__, 'last_used'),
        name=pulumi.get(__response__, 'name'),
        provider_type=pulumi.get(__response__, 'provider_type'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
