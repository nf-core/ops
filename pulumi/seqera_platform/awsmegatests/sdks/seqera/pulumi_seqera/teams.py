# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TeamsArgs', 'Teams']

@pulumi.input_type
class TeamsArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[_builtins.float],
                 avatar_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Teams resource.
        :param pulumi.Input[_builtins.float] org_id: Organization numeric identifier
        """
        pulumi.set(__self__, "org_id", org_id)
        if avatar_id is not None:
            pulumi.set(__self__, "avatar_id", avatar_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[_builtins.float]:
        """
        Organization numeric identifier
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="avatarId")
    def avatar_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "avatar_id")

    @avatar_id.setter
    def avatar_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "avatar_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _TeamsState:
    def __init__(__self__, *,
                 avatar_id: Optional[pulumi.Input[_builtins.str]] = None,
                 avatar_url: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 members_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 team_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Teams resources.
        :param pulumi.Input[_builtins.str] avatar_url: URL to the team's avatar or profile image
        :param pulumi.Input[_builtins.float] members_count: Total number of members in the team
        :param pulumi.Input[_builtins.float] org_id: Organization numeric identifier
        :param pulumi.Input[_builtins.float] team_id: Unique numeric identifier for the team
        """
        if avatar_id is not None:
            pulumi.set(__self__, "avatar_id", avatar_id)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if members_count is not None:
            pulumi.set(__self__, "members_count", members_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @_builtins.property
    @pulumi.getter(name="avatarId")
    def avatar_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "avatar_id")

    @avatar_id.setter
    def avatar_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "avatar_id", value)

    @_builtins.property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL to the team's avatar or profile image
        """
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "avatar_url", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="membersCount")
    def members_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Total number of members in the team
        """
        return pulumi.get(self, "members_count")

    @members_count.setter
    def members_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "members_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Organization numeric identifier
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the team
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "team_id", value)


@pulumi.type_token("seqera:index/teams:Teams")
class Teams(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 avatar_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Teams resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] org_id: Organization numeric identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Teams resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TeamsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 avatar_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamsArgs.__new__(TeamsArgs)

            __props__.__dict__["avatar_id"] = avatar_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["avatar_url"] = None
            __props__.__dict__["members_count"] = None
            __props__.__dict__["team_id"] = None
        super(Teams, __self__).__init__(
            'seqera:index/teams:Teams',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            avatar_id: Optional[pulumi.Input[_builtins.str]] = None,
            avatar_url: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            members_count: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            org_id: Optional[pulumi.Input[_builtins.float]] = None,
            team_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'Teams':
        """
        Get an existing Teams resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] avatar_url: URL to the team's avatar or profile image
        :param pulumi.Input[_builtins.float] members_count: Total number of members in the team
        :param pulumi.Input[_builtins.float] org_id: Organization numeric identifier
        :param pulumi.Input[_builtins.float] team_id: Unique numeric identifier for the team
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamsState.__new__(_TeamsState)

        __props__.__dict__["avatar_id"] = avatar_id
        __props__.__dict__["avatar_url"] = avatar_url
        __props__.__dict__["description"] = description
        __props__.__dict__["members_count"] = members_count
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["team_id"] = team_id
        return Teams(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="avatarId")
    def avatar_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "avatar_id")

    @_builtins.property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL to the team's avatar or profile image
        """
        return pulumi.get(self, "avatar_url")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="membersCount")
    def members_count(self) -> pulumi.Output[_builtins.float]:
        """
        Total number of members in the team
        """
        return pulumi.get(self, "members_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[_builtins.float]:
        """
        Organization numeric identifier
        """
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[_builtins.float]:
        """
        Unique numeric identifier for the team
        """
        return pulumi.get(self, "team_id")

