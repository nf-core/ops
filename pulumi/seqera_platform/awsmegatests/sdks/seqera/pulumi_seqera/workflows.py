# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkflowsArgs', 'Workflows']

@pulumi.input_type
class WorkflowsArgs:
    def __init__(__self__, *,
                 compute_env_id: pulumi.Input[_builtins.str],
                 pipeline: pulumi.Input[_builtins.str],
                 work_dir: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.float],
                 config_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 config_text: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 entry_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 launch_container: Optional[pulumi.Input[_builtins.str]] = None,
                 main_script: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
                 params_text: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 revision: Optional[pulumi.Input[_builtins.str]] = None,
                 run_name: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 stub_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 tower_config: Optional[pulumi.Input[_builtins.str]] = None,
                 user_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 workspace_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Workflows resource.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pipeline: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] config_profiles: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] config_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] date_created: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] entry_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] force: Force the deletion even if the workflow is active
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_container: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] main_script: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_targets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] params_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.bool] pull_latest: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] resume: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] revision: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] run_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] schema_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] session_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] source_workspace_id: Source Optional workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] stub_run: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] tower_config: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_secrets: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workspace_secrets: Requires replacement if changed.
        """
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        pulumi.set(__self__, "pipeline", pipeline)
        pulumi.set(__self__, "work_dir", work_dir)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if config_profiles is not None:
            pulumi.set(__self__, "config_profiles", config_profiles)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if launch_container is not None:
            pulumi.set(__self__, "launch_container", launch_container)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if optimization_id is not None:
            pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_targets is not None:
            pulumi.set(__self__, "optimization_targets", optimization_targets)
        if params_text is not None:
            pulumi.set(__self__, "params_text", params_text)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if pull_latest is not None:
            pulumi.set(__self__, "pull_latest", pull_latest)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if source_workspace_id is not None:
            pulumi.set(__self__, "source_workspace_id", source_workspace_id)
        if stub_run is not None:
            pulumi.set(__self__, "stub_run", stub_run)
        if tower_config is not None:
            pulumi.set(__self__, "tower_config", tower_config)
        if user_secrets is not None:
            pulumi.set(__self__, "user_secrets", user_secrets)
        if workspace_secrets is not None:
            pulumi.set(__self__, "workspace_secrets", workspace_secrets)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "work_dir", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.float]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_profiles")

    @config_profiles.setter
    def config_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "config_profiles", value)

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_text")

    @config_text.setter
    def config_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_text", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "entry_name")

    @entry_name.setter
    def entry_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entry_name", value)

    @_builtins.property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Force the deletion even if the workflow is active
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_container")

    @launch_container.setter
    def launch_container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_container", value)

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "main_script")

    @main_script.setter
    def main_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "main_script", value)

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_id")

    @optimization_id.setter
    def optimization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_id", value)

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_targets")

    @optimization_targets.setter
    def optimization_targets(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_targets", value)

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "params_text")

    @params_text.setter
    def params_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params_text", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run
        scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
        changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run
        scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
        changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pull_latest")

    @pull_latest.setter
    def pull_latest(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pull_latest", value)

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resume")

    @resume.setter
    def resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resume", value)

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "revision", value)

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "run_name")

    @run_name.setter
    def run_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_name", value)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceWorkspaceId")
    def source_workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Source Optional workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "source_workspace_id")

    @source_workspace_id.setter
    def source_workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "source_workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "stub_run")

    @stub_run.setter
    def stub_run(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub_run", value)

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "tower_config")

    @tower_config.setter
    def tower_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tower_config", value)

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_secrets")

    @user_secrets.setter
    def user_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_secrets", value)

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_secrets")

    @workspace_secrets.setter
    def workspace_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "workspace_secrets", value)


@pulumi.input_type
class _WorkflowsState:
    def __init__(__self__, *,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 config_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 config_text: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 entry_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 job_info: Optional[pulumi.Input['WorkflowsJobInfoArgs']] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowsLabelArgs']]]] = None,
                 launch_container: Optional[pulumi.Input[_builtins.str]] = None,
                 main_script: Optional[pulumi.Input[_builtins.str]] = None,
                 messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
                 optimized: Optional[pulumi.Input[_builtins.bool]] = None,
                 org_id: Optional[pulumi.Input[_builtins.float]] = None,
                 org_name: Optional[pulumi.Input[_builtins.str]] = None,
                 params_text: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline: Optional[pulumi.Input[_builtins.str]] = None,
                 platform: Optional[pulumi.Input['WorkflowsPlatformArgs']] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input['WorkflowsProgressArgs']] = None,
                 pull_latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 revision: Optional[pulumi.Input[_builtins.str]] = None,
                 run_name: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 stub_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 tower_config: Optional[pulumi.Input[_builtins.str]] = None,
                 user_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow: Optional[pulumi.Input['WorkflowsWorkflowArgs']] = None,
                 workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 workspace_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Workflows resources.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] config_profiles: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] config_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] date_created: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] entry_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] force: Force the deletion even if the workflow is active
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_container: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] main_script: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_targets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] params_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pipeline: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.bool] pull_latest: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] resume: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] revision: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] run_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] schema_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] session_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] source_workspace_id: Source Optional workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] stub_run: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] tower_config: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_secrets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] workflow_id: Workflow string identifier
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workspace_secrets: Requires replacement if changed.
        """
        if compute_env_id is not None:
            pulumi.set(__self__, "compute_env_id", compute_env_id)
        if config_profiles is not None:
            pulumi.set(__self__, "config_profiles", config_profiles)
        if config_text is not None:
            pulumi.set(__self__, "config_text", config_text)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if head_job_cpus is not None:
            pulumi.set(__self__, "head_job_cpus", head_job_cpus)
        if head_job_memory_mb is not None:
            pulumi.set(__self__, "head_job_memory_mb", head_job_memory_mb)
        if job_info is not None:
            pulumi.set(__self__, "job_info", job_info)
        if label_ids is not None:
            pulumi.set(__self__, "label_ids", label_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if launch_container is not None:
            pulumi.set(__self__, "launch_container", launch_container)
        if main_script is not None:
            pulumi.set(__self__, "main_script", main_script)
        if messages is not None:
            pulumi.set(__self__, "messages", messages)
        if optimization_id is not None:
            pulumi.set(__self__, "optimization_id", optimization_id)
        if optimization_targets is not None:
            pulumi.set(__self__, "optimization_targets", optimization_targets)
        if optimized is not None:
            pulumi.set(__self__, "optimized", optimized)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_name is not None:
            pulumi.set(__self__, "org_name", org_name)
        if params_text is not None:
            pulumi.set(__self__, "params_text", params_text)
        if pipeline is not None:
            pulumi.set(__self__, "pipeline", pipeline)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if post_run_script is not None:
            pulumi.set(__self__, "post_run_script", post_run_script)
        if pre_run_script is not None:
            pulumi.set(__self__, "pre_run_script", pre_run_script)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if pull_latest is not None:
            pulumi.set(__self__, "pull_latest", pull_latest)
        if resume is not None:
            pulumi.set(__self__, "resume", resume)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if run_name is not None:
            pulumi.set(__self__, "run_name", run_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if source_workspace_id is not None:
            pulumi.set(__self__, "source_workspace_id", source_workspace_id)
        if stub_run is not None:
            pulumi.set(__self__, "stub_run", stub_run)
        if tower_config is not None:
            pulumi.set(__self__, "tower_config", tower_config)
        if user_secrets is not None:
            pulumi.set(__self__, "user_secrets", user_secrets)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)
        if workflow is not None:
            pulumi.set(__self__, "workflow", workflow)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)
        if workspace_name is not None:
            pulumi.set(__self__, "workspace_name", workspace_name)
        if workspace_secrets is not None:
            pulumi.set(__self__, "workspace_secrets", workspace_secrets)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @compute_env_id.setter
    def compute_env_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_env_id", value)

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_profiles")

    @config_profiles.setter
    def config_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "config_profiles", value)

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_text")

    @config_text.setter
    def config_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_text", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "entry_name")

    @entry_name.setter
    def entry_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entry_name", value)

    @_builtins.property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Force the deletion even if the workflow is active
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force", value)

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @head_job_cpus.setter
    def head_job_cpus(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_cpus", value)

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @head_job_memory_mb.setter
    def head_job_memory_mb(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "head_job_memory_mb", value)

    @_builtins.property
    @pulumi.getter(name="jobInfo")
    def job_info(self) -> Optional[pulumi.Input['WorkflowsJobInfoArgs']]:
        return pulumi.get(self, "job_info")

    @job_info.setter
    def job_info(self, value: Optional[pulumi.Input['WorkflowsJobInfoArgs']]):
        pulumi.set(self, "job_info", value)

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @label_ids.setter
    def label_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "label_ids", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowsLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowsLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_container")

    @launch_container.setter
    def launch_container(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "launch_container", value)

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "main_script")

    @main_script.setter
    def main_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "main_script", value)

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "messages", value)

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_id")

    @optimization_id.setter
    def optimization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_id", value)

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_targets")

    @optimization_targets.setter
    def optimization_targets(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "optimization_targets", value)

    @_builtins.property
    @pulumi.getter
    def optimized(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "optimized")

    @optimized.setter
    def optimized(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optimized", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "org_name")

    @org_name.setter
    def org_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_name", value)

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "params_text")

    @params_text.setter
    def params_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "params_text", value)

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline", value)

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input['WorkflowsPlatformArgs']]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input['WorkflowsPlatformArgs']]):
        pulumi.set(self, "platform", value)

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run
        scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
        changed.
        """
        return pulumi.get(self, "post_run_script")

    @post_run_script.setter
    def post_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_run_script", value)

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run
        scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
        changed.
        """
        return pulumi.get(self, "pre_run_script")

    @pre_run_script.setter
    def pre_run_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pre_run_script", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input['WorkflowsProgressArgs']]:
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input['WorkflowsProgressArgs']]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pull_latest")

    @pull_latest.setter
    def pull_latest(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pull_latest", value)

    @_builtins.property
    @pulumi.getter
    def resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resume")

    @resume.setter
    def resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resume", value)

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "revision", value)

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "run_name")

    @run_name.setter
    def run_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_name", value)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceWorkspaceId")
    def source_workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Source Optional workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "source_workspace_id")

    @source_workspace_id.setter
    def source_workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "source_workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "stub_run")

    @stub_run.setter
    def stub_run(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub_run", value)

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "tower_config")

    @tower_config.setter
    def tower_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tower_config", value)

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_secrets")

    @user_secrets.setter
    def user_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_secrets", value)

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "work_dir", value)

    @_builtins.property
    @pulumi.getter
    def workflow(self) -> Optional[pulumi.Input['WorkflowsWorkflowArgs']]:
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: Optional[pulumi.Input['WorkflowsWorkflowArgs']]):
        pulumi.set(self, "workflow", value)

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workflow string identifier
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workflow_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workspace_name", value)

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_secrets")

    @workspace_secrets.setter
    def workspace_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "workspace_secrets", value)


@pulumi.type_token("seqera:index/workflows:Workflows")
class Workflows(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 config_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 config_text: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 entry_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 launch_container: Optional[pulumi.Input[_builtins.str]] = None,
                 main_script: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
                 params_text: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 revision: Optional[pulumi.Input[_builtins.str]] = None,
                 run_name: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 stub_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 tower_config: Optional[pulumi.Input[_builtins.str]] = None,
                 user_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 workspace_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a Workflows resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] config_profiles: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] config_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] date_created: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] entry_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] force: Force the deletion even if the workflow is active
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_container: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] main_script: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_targets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] params_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pipeline: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.bool] pull_latest: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] resume: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] revision: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] run_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] schema_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] session_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] source_workspace_id: Source Optional workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] stub_run: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] tower_config: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_secrets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workspace_secrets: Requires replacement if changed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Workflows resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WorkflowsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 config_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 config_text: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 entry_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
                 head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
                 label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 launch_container: Optional[pulumi.Input[_builtins.str]] = None,
                 main_script: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
                 params_text: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline: Optional[pulumi.Input[_builtins.str]] = None,
                 post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 revision: Optional[pulumi.Input[_builtins.str]] = None,
                 run_name: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 stub_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 tower_config: Optional[pulumi.Input[_builtins.str]] = None,
                 user_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 work_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 workspace_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowsArgs.__new__(WorkflowsArgs)

            if compute_env_id is None and not opts.urn:
                raise TypeError("Missing required property 'compute_env_id'")
            __props__.__dict__["compute_env_id"] = compute_env_id
            __props__.__dict__["config_profiles"] = config_profiles
            __props__.__dict__["config_text"] = config_text
            __props__.__dict__["date_created"] = date_created
            __props__.__dict__["entry_name"] = entry_name
            __props__.__dict__["force"] = force
            __props__.__dict__["head_job_cpus"] = head_job_cpus
            __props__.__dict__["head_job_memory_mb"] = head_job_memory_mb
            __props__.__dict__["label_ids"] = label_ids
            __props__.__dict__["launch_container"] = launch_container
            __props__.__dict__["main_script"] = main_script
            __props__.__dict__["optimization_id"] = optimization_id
            __props__.__dict__["optimization_targets"] = optimization_targets
            __props__.__dict__["params_text"] = params_text
            if pipeline is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline'")
            __props__.__dict__["pipeline"] = pipeline
            __props__.__dict__["post_run_script"] = post_run_script
            __props__.__dict__["pre_run_script"] = pre_run_script
            __props__.__dict__["pull_latest"] = pull_latest
            __props__.__dict__["resume"] = resume
            __props__.__dict__["revision"] = revision
            __props__.__dict__["run_name"] = run_name
            __props__.__dict__["schema_name"] = schema_name
            __props__.__dict__["session_id"] = session_id
            __props__.__dict__["source_workspace_id"] = source_workspace_id
            __props__.__dict__["stub_run"] = stub_run
            __props__.__dict__["tower_config"] = tower_config
            __props__.__dict__["user_secrets"] = user_secrets
            if work_dir is None and not opts.urn:
                raise TypeError("Missing required property 'work_dir'")
            __props__.__dict__["work_dir"] = work_dir
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["workspace_secrets"] = workspace_secrets
            __props__.__dict__["job_info"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["messages"] = None
            __props__.__dict__["optimized"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["org_name"] = None
            __props__.__dict__["platform"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["workflow"] = None
            __props__.__dict__["workflow_id"] = None
            __props__.__dict__["workspace_name"] = None
        super(Workflows, __self__).__init__(
            'seqera:index/workflows:Workflows',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
            config_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            config_text: Optional[pulumi.Input[_builtins.str]] = None,
            date_created: Optional[pulumi.Input[_builtins.str]] = None,
            entry_name: Optional[pulumi.Input[_builtins.str]] = None,
            force: Optional[pulumi.Input[_builtins.bool]] = None,
            head_job_cpus: Optional[pulumi.Input[_builtins.float]] = None,
            head_job_memory_mb: Optional[pulumi.Input[_builtins.float]] = None,
            job_info: Optional[pulumi.Input[Union['WorkflowsJobInfoArgs', 'WorkflowsJobInfoArgsDict']]] = None,
            label_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WorkflowsLabelArgs', 'WorkflowsLabelArgsDict']]]]] = None,
            launch_container: Optional[pulumi.Input[_builtins.str]] = None,
            main_script: Optional[pulumi.Input[_builtins.str]] = None,
            messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            optimization_id: Optional[pulumi.Input[_builtins.str]] = None,
            optimization_targets: Optional[pulumi.Input[_builtins.str]] = None,
            optimized: Optional[pulumi.Input[_builtins.bool]] = None,
            org_id: Optional[pulumi.Input[_builtins.float]] = None,
            org_name: Optional[pulumi.Input[_builtins.str]] = None,
            params_text: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline: Optional[pulumi.Input[_builtins.str]] = None,
            platform: Optional[pulumi.Input[Union['WorkflowsPlatformArgs', 'WorkflowsPlatformArgsDict']]] = None,
            post_run_script: Optional[pulumi.Input[_builtins.str]] = None,
            pre_run_script: Optional[pulumi.Input[_builtins.str]] = None,
            progress: Optional[pulumi.Input[Union['WorkflowsProgressArgs', 'WorkflowsProgressArgsDict']]] = None,
            pull_latest: Optional[pulumi.Input[_builtins.bool]] = None,
            resume: Optional[pulumi.Input[_builtins.bool]] = None,
            revision: Optional[pulumi.Input[_builtins.str]] = None,
            run_name: Optional[pulumi.Input[_builtins.str]] = None,
            schema_name: Optional[pulumi.Input[_builtins.str]] = None,
            session_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
            stub_run: Optional[pulumi.Input[_builtins.bool]] = None,
            tower_config: Optional[pulumi.Input[_builtins.str]] = None,
            user_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            work_dir: Optional[pulumi.Input[_builtins.str]] = None,
            workflow: Optional[pulumi.Input[Union['WorkflowsWorkflowArgs', 'WorkflowsWorkflowArgsDict']]] = None,
            workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
            workspace_name: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'Workflows':
        """
        Get an existing Workflows resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] compute_env_id: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] config_profiles: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] config_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] date_created: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] entry_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] force: Force the deletion even if the workflow is active
        :param pulumi.Input[_builtins.float] head_job_cpus: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] head_job_memory_mb: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] label_ids: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] launch_container: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] main_script: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] optimization_targets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] params_text: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] pipeline: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] post_run_script: Add a script that executes after all Nextflow processes have completed. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.str] pre_run_script: Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run
               scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
               changed.
        :param pulumi.Input[_builtins.bool] pull_latest: Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] resume: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] revision: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] run_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] schema_name: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] session_id: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] source_workspace_id: Source Optional workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] stub_run: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] tower_config: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_secrets: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] work_dir: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] workflow_id: Workflow string identifier
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier. Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] workspace_secrets: Requires replacement if changed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowsState.__new__(_WorkflowsState)

        __props__.__dict__["compute_env_id"] = compute_env_id
        __props__.__dict__["config_profiles"] = config_profiles
        __props__.__dict__["config_text"] = config_text
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["entry_name"] = entry_name
        __props__.__dict__["force"] = force
        __props__.__dict__["head_job_cpus"] = head_job_cpus
        __props__.__dict__["head_job_memory_mb"] = head_job_memory_mb
        __props__.__dict__["job_info"] = job_info
        __props__.__dict__["label_ids"] = label_ids
        __props__.__dict__["labels"] = labels
        __props__.__dict__["launch_container"] = launch_container
        __props__.__dict__["main_script"] = main_script
        __props__.__dict__["messages"] = messages
        __props__.__dict__["optimization_id"] = optimization_id
        __props__.__dict__["optimization_targets"] = optimization_targets
        __props__.__dict__["optimized"] = optimized
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["org_name"] = org_name
        __props__.__dict__["params_text"] = params_text
        __props__.__dict__["pipeline"] = pipeline
        __props__.__dict__["platform"] = platform
        __props__.__dict__["post_run_script"] = post_run_script
        __props__.__dict__["pre_run_script"] = pre_run_script
        __props__.__dict__["progress"] = progress
        __props__.__dict__["pull_latest"] = pull_latest
        __props__.__dict__["resume"] = resume
        __props__.__dict__["revision"] = revision
        __props__.__dict__["run_name"] = run_name
        __props__.__dict__["schema_name"] = schema_name
        __props__.__dict__["session_id"] = session_id
        __props__.__dict__["source_workspace_id"] = source_workspace_id
        __props__.__dict__["stub_run"] = stub_run
        __props__.__dict__["tower_config"] = tower_config
        __props__.__dict__["user_secrets"] = user_secrets
        __props__.__dict__["work_dir"] = work_dir
        __props__.__dict__["workflow"] = workflow
        __props__.__dict__["workflow_id"] = workflow_id
        __props__.__dict__["workspace_id"] = workspace_id
        __props__.__dict__["workspace_name"] = workspace_name
        __props__.__dict__["workspace_secrets"] = workspace_secrets
        return Workflows(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter(name="configProfiles")
    def config_profiles(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_profiles")

    @_builtins.property
    @pulumi.getter(name="configText")
    def config_text(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "config_text")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "entry_name")

    @_builtins.property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Force the deletion even if the workflow is active
        """
        return pulumi.get(self, "force")

    @_builtins.property
    @pulumi.getter(name="headJobCpus")
    def head_job_cpus(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_cpus")

    @_builtins.property
    @pulumi.getter(name="headJobMemoryMb")
    def head_job_memory_mb(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "head_job_memory_mb")

    @_builtins.property
    @pulumi.getter(name="jobInfo")
    def job_info(self) -> pulumi.Output['outputs.WorkflowsJobInfo']:
        return pulumi.get(self, "job_info")

    @_builtins.property
    @pulumi.getter(name="labelIds")
    def label_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "label_ids")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence['outputs.WorkflowsLabel']]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="launchContainer")
    def launch_container(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "launch_container")

    @_builtins.property
    @pulumi.getter(name="mainScript")
    def main_script(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "main_script")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter(name="optimizationId")
    def optimization_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_id")

    @_builtins.property
    @pulumi.getter(name="optimizationTargets")
    def optimization_targets(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "optimization_targets")

    @_builtins.property
    @pulumi.getter
    def optimized(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "optimized")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "org_name")

    @_builtins.property
    @pulumi.getter(name="paramsText")
    def params_text(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "params_text")

    @_builtins.property
    @pulumi.getter
    def pipeline(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pipeline")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> pulumi.Output['outputs.WorkflowsPlatform']:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter(name="postRunScript")
    def post_run_script(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Add a script that executes after all Nextflow processes have completed. See [Pre and post-run
        scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
        changed.
        """
        return pulumi.get(self, "post_run_script")

    @_builtins.property
    @pulumi.getter(name="preRunScript")
    def pre_run_script(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run
        scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts). Requires replacement if
        changed.
        """
        return pulumi.get(self, "pre_run_script")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output['outputs.WorkflowsProgress']:
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="pullLatest")
    def pull_latest(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "pull_latest")

    @_builtins.property
    @pulumi.getter
    def resume(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resume")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter(name="runName")
    def run_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "run_name")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="sourceWorkspaceId")
    def source_workspace_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Source Optional workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "source_workspace_id")

    @_builtins.property
    @pulumi.getter(name="stubRun")
    def stub_run(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "stub_run")

    @_builtins.property
    @pulumi.getter(name="towerConfig")
    def tower_config(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "tower_config")

    @_builtins.property
    @pulumi.getter(name="userSecrets")
    def user_secrets(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "user_secrets")

    @_builtins.property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "work_dir")

    @_builtins.property
    @pulumi.getter
    def workflow(self) -> pulumi.Output['outputs.WorkflowsWorkflow']:
        return pulumi.get(self, "workflow")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[_builtins.str]:
        """
        Workflow string identifier
        """
        return pulumi.get(self, "workflow_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.float]:
        """
        Workspace numeric identifier. Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @_builtins.property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "workspace_name")

    @_builtins.property
    @pulumi.getter(name="workspaceSecrets")
    def workspace_secrets(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_secrets")

