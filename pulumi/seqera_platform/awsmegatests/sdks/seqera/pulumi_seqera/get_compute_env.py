# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetComputeEnvResult',
    'AwaitableGetComputeEnvResult',
    'get_compute_env',
    'get_compute_env_output',
]

@pulumi.output_type
class GetComputeEnvResult:
    """
    A collection of values returned by getComputeEnv.
    """
    def __init__(__self__, attributes=None, compute_env=None, compute_env_id=None, id=None, workspace_id=None):
        if attributes and not isinstance(attributes, list):
            raise TypeError("Expected argument 'attributes' to be a list")
        pulumi.set(__self__, "attributes", attributes)
        if compute_env and not isinstance(compute_env, dict):
            raise TypeError("Expected argument 'compute_env' to be a dict")
        pulumi.set(__self__, "compute_env", compute_env)
        if compute_env_id and not isinstance(compute_env_id, str):
            raise TypeError("Expected argument 'compute_env_id' to be a str")
        pulumi.set(__self__, "compute_env_id", compute_env_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="computeEnv")
    def compute_env(self) -> 'outputs.GetComputeEnvComputeEnvResult':
        return pulumi.get(self, "compute_env")

    @_builtins.property
    @pulumi.getter(name="computeEnvId")
    def compute_env_id(self) -> _builtins.str:
        return pulumi.get(self, "compute_env_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.float:
        return pulumi.get(self, "workspace_id")


class AwaitableGetComputeEnvResult(GetComputeEnvResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeEnvResult(
            attributes=self.attributes,
            compute_env=self.compute_env,
            compute_env_id=self.compute_env_id,
            id=self.id,
            workspace_id=self.workspace_id)


def get_compute_env(attributes: Optional[Sequence[_builtins.str]] = None,
                    compute_env_id: Optional[_builtins.str] = None,
                    workspace_id: Optional[_builtins.float] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeEnvResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['computeEnvId'] = compute_env_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getComputeEnv:getComputeEnv', __args__, opts=opts, typ=GetComputeEnvResult, package_ref=_utilities.get_package()).value

    return AwaitableGetComputeEnvResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        compute_env=pulumi.get(__ret__, 'compute_env'),
        compute_env_id=pulumi.get(__ret__, 'compute_env_id'),
        id=pulumi.get(__ret__, 'id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_compute_env_output(attributes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           compute_env_id: Optional[pulumi.Input[_builtins.str]] = None,
                           workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeEnvResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['computeEnvId'] = compute_env_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getComputeEnv:getComputeEnv', __args__, opts=opts, typ=GetComputeEnvResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetComputeEnvResult(
        attributes=pulumi.get(__response__, 'attributes'),
        compute_env=pulumi.get(__response__, 'compute_env'),
        compute_env_id=pulumi.get(__response__, 'compute_env_id'),
        id=pulumi.get(__response__, 'id'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
