# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LabelsArgs', 'Labels']

@pulumi.input_type
class LabelsArgs:
    def __init__(__self__, *,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Labels resource.
        :param pulumi.Input[_builtins.str] name: Label name must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.bool] resource: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Label value must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Label name must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Label value must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _LabelsState:
    def __init__(__self__, *,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 label_id: Optional[pulumi.Input[_builtins.float]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['LabelsLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 total_size: Optional[pulumi.Input[_builtins.float]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Labels resources.
        :param pulumi.Input[_builtins.float] label_id: Label numeric identifier
        :param pulumi.Input[_builtins.str] name: Label name must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.bool] resource: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Label value must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if label_id is not None:
            pulumi.set(__self__, "label_id", label_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if total_size is not None:
            pulumi.set(__self__, "total_size", total_size)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter(name="labelId")
    def label_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Label numeric identifier
        """
        return pulumi.get(self, "label_id")

    @label_id.setter
    def label_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "label_id", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LabelsLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LabelsLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Label name must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "total_size")

    @total_size.setter
    def total_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_size", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Label value must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("seqera:index/labels:Labels")
class Labels(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Labels resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Label name must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.bool] resource: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Label value must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LabelsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Labels resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LabelsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LabelsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LabelsArgs.__new__(LabelsArgs)

            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["name"] = name
            __props__.__dict__["resource"] = resource
            __props__.__dict__["value"] = value
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["label_id"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["total_size"] = None
        super(Labels, __self__).__init__(
            'seqera:index/labels:Labels',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            is_default: Optional[pulumi.Input[_builtins.bool]] = None,
            label_id: Optional[pulumi.Input[_builtins.float]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LabelsLabelArgs', 'LabelsLabelArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource: Optional[pulumi.Input[_builtins.bool]] = None,
            total_size: Optional[pulumi.Input[_builtins.float]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'Labels':
        """
        Get an existing Labels resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] label_id: Label numeric identifier
        :param pulumi.Input[_builtins.str] name: Label name must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.bool] resource: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] value: Label value must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LabelsState.__new__(_LabelsState)

        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["label_id"] = label_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["resource"] = resource
        __props__.__dict__["total_size"] = total_size
        __props__.__dict__["value"] = value
        __props__.__dict__["workspace_id"] = workspace_id
        return Labels(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="labelId")
    def label_id(self) -> pulumi.Output[_builtins.float]:
        """
        Label numeric identifier
        """
        return pulumi.get(self, "label_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence['outputs.LabelsLabel']]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Label name must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> pulumi.Output[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "total_size")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Label value must contain a minimum of 1 and a maximum of 39 alphanumeric characters separated by dashes or underscores
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

