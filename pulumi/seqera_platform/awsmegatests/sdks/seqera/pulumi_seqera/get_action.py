# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetActionResult',
    'AwaitableGetActionResult',
    'get_action',
    'get_action_output',
]

@pulumi.output_type
class GetActionResult:
    """
    A collection of values returned by getAction.
    """
    def __init__(__self__, action_id=None, attributes=None, config=None, date_created=None, event=None, hook_id=None, hook_url=None, id=None, labels=None, last_seen=None, last_updated=None, launch=None, message=None, name=None, source=None, status=None, workspace_id=None):
        if action_id and not isinstance(action_id, str):
            raise TypeError("Expected argument 'action_id' to be a str")
        pulumi.set(__self__, "action_id", action_id)
        if attributes and not isinstance(attributes, list):
            raise TypeError("Expected argument 'attributes' to be a list")
        pulumi.set(__self__, "attributes", attributes)
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if event and not isinstance(event, dict):
            raise TypeError("Expected argument 'event' to be a dict")
        pulumi.set(__self__, "event", event)
        if hook_id and not isinstance(hook_id, str):
            raise TypeError("Expected argument 'hook_id' to be a str")
        pulumi.set(__self__, "hook_id", hook_id)
        if hook_url and not isinstance(hook_url, str):
            raise TypeError("Expected argument 'hook_url' to be a str")
        pulumi.set(__self__, "hook_url", hook_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_seen and not isinstance(last_seen, str):
            raise TypeError("Expected argument 'last_seen' to be a str")
        pulumi.set(__self__, "last_seen", last_seen)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if launch and not isinstance(launch, dict):
            raise TypeError("Expected argument 'launch' to be a dict")
        pulumi.set(__self__, "launch", launch)
        if message and not isinstance(message, str):
            raise TypeError("Expected argument 'message' to be a str")
        pulumi.set(__self__, "message", message)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if workspace_id and not isinstance(workspace_id, float):
            raise TypeError("Expected argument 'workspace_id' to be a float")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter
    def config(self) -> 'outputs.GetActionConfigResult':
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter
    def event(self) -> 'outputs.GetActionEventResult':
        return pulumi.get(self, "event")

    @_builtins.property
    @pulumi.getter(name="hookId")
    def hook_id(self) -> _builtins.str:
        return pulumi.get(self, "hook_id")

    @_builtins.property
    @pulumi.getter(name="hookUrl")
    def hook_url(self) -> _builtins.str:
        return pulumi.get(self, "hook_url")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetActionLabelResult']:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> _builtins.str:
        return pulumi.get(self, "last_seen")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter
    def launch(self) -> 'outputs.GetActionLaunchResult':
        return pulumi.get(self, "launch")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetActionResult(GetActionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActionResult(
            action_id=self.action_id,
            attributes=self.attributes,
            config=self.config,
            date_created=self.date_created,
            event=self.event,
            hook_id=self.hook_id,
            hook_url=self.hook_url,
            id=self.id,
            labels=self.labels,
            last_seen=self.last_seen,
            last_updated=self.last_updated,
            launch=self.launch,
            message=self.message,
            name=self.name,
            source=self.source,
            status=self.status,
            workspace_id=self.workspace_id)


def get_action(action_id: Optional[_builtins.str] = None,
               attributes: Optional[Sequence[_builtins.str]] = None,
               workspace_id: Optional[_builtins.float] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetActionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['actionId'] = action_id
    __args__['attributes'] = attributes
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('seqera:index/getAction:getAction', __args__, opts=opts, typ=GetActionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetActionResult(
        action_id=pulumi.get(__ret__, 'action_id'),
        attributes=pulumi.get(__ret__, 'attributes'),
        config=pulumi.get(__ret__, 'config'),
        date_created=pulumi.get(__ret__, 'date_created'),
        event=pulumi.get(__ret__, 'event'),
        hook_id=pulumi.get(__ret__, 'hook_id'),
        hook_url=pulumi.get(__ret__, 'hook_url'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_seen=pulumi.get(__ret__, 'last_seen'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        launch=pulumi.get(__ret__, 'launch'),
        message=pulumi.get(__ret__, 'message'),
        name=pulumi.get(__ret__, 'name'),
        source=pulumi.get(__ret__, 'source'),
        status=pulumi.get(__ret__, 'status'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_action_output(action_id: Optional[pulumi.Input[_builtins.str]] = None,
                      attributes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                      workspace_id: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetActionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['actionId'] = action_id
    __args__['attributes'] = attributes
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('seqera:index/getAction:getAction', __args__, opts=opts, typ=GetActionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetActionResult(
        action_id=pulumi.get(__response__, 'action_id'),
        attributes=pulumi.get(__response__, 'attributes'),
        config=pulumi.get(__response__, 'config'),
        date_created=pulumi.get(__response__, 'date_created'),
        event=pulumi.get(__response__, 'event'),
        hook_id=pulumi.get(__response__, 'hook_id'),
        hook_url=pulumi.get(__response__, 'hook_url'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        last_seen=pulumi.get(__response__, 'last_seen'),
        last_updated=pulumi.get(__response__, 'last_updated'),
        launch=pulumi.get(__response__, 'launch'),
        message=pulumi.get(__response__, 'message'),
        name=pulumi.get(__response__, 'name'),
        source=pulumi.get(__response__, 'source'),
        status=pulumi.get(__response__, 'status'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
