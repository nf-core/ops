# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataLinkArgs', 'DataLink']

@pulumi.input_type
class DataLinkArgs:
    def __init__(__self__, *,
                 credentials_id: pulumi.Input[_builtins.str],
                 description: pulumi.Input[_builtins.str],
                 provider_type: pulumi.Input[_builtins.str],
                 public_accessible: pulumi.Input[_builtins.bool],
                 resource_ref: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 workspace_id: pulumi.Input[_builtins.float],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataLink resource.
        :param pulumi.Input[_builtins.str] provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] public_accessible: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] resource_ref: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] type: must be "bucket"; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "public_accessible", public_accessible)
        pulumi.set(__self__, "resource_ref", resource_ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "credentials_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Input[_builtins.str]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]; Requires replacement if changed.
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "provider_type", value)

    @_builtins.property
    @pulumi.getter(name="publicAccessible")
    def public_accessible(self) -> pulumi.Input[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "public_accessible")

    @public_accessible.setter
    def public_accessible(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "public_accessible", value)

    @_builtins.property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> pulumi.Input[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resource_ref")

    @resource_ref.setter
    def resource_ref(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_ref", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        must be "bucket"; Requires replacement if changed.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[_builtins.float]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DataLinkState:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['DataLinkCredentialArgs']]]] = None,
                 credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data_link_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hidden: Optional[pulumi.Input[_builtins.bool]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_accessible: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering DataLink resources.
        :param pulumi.Input[Sequence[pulumi.Input['DataLinkCredentialArgs']]] credentials: Array of credentials required to access the data link
        :param pulumi.Input[_builtins.str] data_link_id: Unique identifier for the data link
        :param pulumi.Input[_builtins.str] provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] public_accessible: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: Geographic region where the data link is hosted
        :param pulumi.Input[_builtins.str] resource_ref: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] status: must be one of ["VALID", "INVALID"]
        :param pulumi.Input[_builtins.str] type: must be "bucket"; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if data_link_id is not None:
            pulumi.set(__self__, "data_link_id", data_link_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if public_accessible is not None:
            pulumi.set(__self__, "public_accessible", public_accessible)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_ref is not None:
            pulumi.set(__self__, "resource_ref", resource_ref)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataLinkCredentialArgs']]]]:
        """
        Array of credentials required to access the data link
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataLinkCredentialArgs']]]]):
        pulumi.set(self, "credentials", value)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credentials_id", value)

    @_builtins.property
    @pulumi.getter(name="dataLinkId")
    def data_link_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the data link
        """
        return pulumi.get(self, "data_link_id")

    @data_link_id.setter
    def data_link_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_link_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hidden", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]; Requires replacement if changed.
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provider_type", value)

    @_builtins.property
    @pulumi.getter(name="publicAccessible")
    def public_accessible(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "public_accessible")

    @public_accessible.setter
    def public_accessible(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_accessible", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Geographic region where the data link is hosted
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resource_ref")

    @resource_ref.setter
    def resource_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_ref", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be one of ["VALID", "INVALID"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        must be "bucket"; Requires replacement if changed.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("seqera:index/dataLink:DataLink")
class DataLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_accessible: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a DataLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] public_accessible: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] resource_ref: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] type: must be "bucket"; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DataLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DataLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_type: Optional[pulumi.Input[_builtins.str]] = None,
                 public_accessible: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataLinkArgs.__new__(DataLinkArgs)

            if credentials_id is None and not opts.urn:
                raise TypeError("Missing required property 'credentials_id'")
            __props__.__dict__["credentials_id"] = credentials_id
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if provider_type is None and not opts.urn:
                raise TypeError("Missing required property 'provider_type'")
            __props__.__dict__["provider_type"] = provider_type
            if public_accessible is None and not opts.urn:
                raise TypeError("Missing required property 'public_accessible'")
            __props__.__dict__["public_accessible"] = public_accessible
            if resource_ref is None and not opts.urn:
                raise TypeError("Missing required property 'resource_ref'")
            __props__.__dict__["resource_ref"] = resource_ref
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["credentials"] = None
            __props__.__dict__["data_link_id"] = None
            __props__.__dict__["hidden"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["status"] = None
        super(DataLink, __self__).__init__(
            'seqera:index/dataLink:DataLink',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credentials: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataLinkCredentialArgs', 'DataLinkCredentialArgsDict']]]]] = None,
            credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
            data_link_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            hidden: Optional[pulumi.Input[_builtins.bool]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            provider_type: Optional[pulumi.Input[_builtins.str]] = None,
            public_accessible: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_ref: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'DataLink':
        """
        Get an existing DataLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DataLinkCredentialArgs', 'DataLinkCredentialArgsDict']]]] credentials: Array of credentials required to access the data link
        :param pulumi.Input[_builtins.str] data_link_id: Unique identifier for the data link
        :param pulumi.Input[_builtins.str] provider_type: must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]; Requires replacement if changed.
        :param pulumi.Input[_builtins.bool] public_accessible: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] region: Geographic region where the data link is hosted
        :param pulumi.Input[_builtins.str] resource_ref: Requires replacement if changed.
        :param pulumi.Input[_builtins.str] status: must be one of ["VALID", "INVALID"]
        :param pulumi.Input[_builtins.str] type: must be "bucket"; Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataLinkState.__new__(_DataLinkState)

        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["data_link_id"] = data_link_id
        __props__.__dict__["description"] = description
        __props__.__dict__["hidden"] = hidden
        __props__.__dict__["message"] = message
        __props__.__dict__["name"] = name
        __props__.__dict__["provider_type"] = provider_type
        __props__.__dict__["public_accessible"] = public_accessible
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_ref"] = resource_ref
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["workspace_id"] = workspace_id
        return DataLink(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Sequence['outputs.DataLinkCredential']]:
        """
        Array of credentials required to access the data link
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="dataLinkId")
    def data_link_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for the data link
        """
        return pulumi.get(self, "data_link_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "hidden")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[_builtins.str]:
        """
        must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]; Requires replacement if changed.
        """
        return pulumi.get(self, "provider_type")

    @_builtins.property
    @pulumi.getter(name="publicAccessible")
    def public_accessible(self) -> pulumi.Output[_builtins.bool]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "public_accessible")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Geographic region where the data link is hosted
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "resource_ref")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        must be one of ["VALID", "INVALID"]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        must be "bucket"; Requires replacement if changed.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[_builtins.float]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

