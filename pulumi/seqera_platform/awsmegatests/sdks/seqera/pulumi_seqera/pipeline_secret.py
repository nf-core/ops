# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PipelineSecretArgs', 'PipelineSecret']

@pulumi.input_type
class PipelineSecretArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a PipelineSecret resource.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _PipelineSecretState:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 last_updated: Optional[pulumi.Input[_builtins.str]] = None,
                 last_used: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_secret_id: Optional[pulumi.Input[_builtins.float]] = None,
                 secret_id: Optional[pulumi.Input[_builtins.float]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering PipelineSecret resources.
        :param pulumi.Input[_builtins.str] date_created: Read-only timestamp when the secret was created
        :param pulumi.Input[_builtins.str] last_used: Read-only timestamp when the secret was last accessed
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] pipeline_secret_id: Unique numeric identifier for the secret (nullable)
        :param pulumi.Input[_builtins.float] secret_id: Secret numeric identifier
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if last_used is not None:
            pulumi.set(__self__, "last_used", last_used)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipeline_secret_id is not None:
            pulumi.set(__self__, "pipeline_secret_id", pipeline_secret_id)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Read-only timestamp when the secret was created
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Read-only timestamp when the secret was last accessed
        """
        return pulumi.get(self, "last_used")

    @last_used.setter
    def last_used(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_used", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pipelineSecretId")
    def pipeline_secret_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Unique numeric identifier for the secret (nullable)
        """
        return pulumi.get(self, "pipeline_secret_id")

    @pipeline_secret_id.setter
    def pipeline_secret_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pipeline_secret_id", value)

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Secret numeric identifier
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "secret_id", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.type_token("seqera:index/pipelineSecret:PipelineSecret")
class PipelineSecret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a PipelineSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PipelineSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PipelineSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 workspace_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineSecretArgs.__new__(PipelineSecretArgs)

            __props__.__dict__["name"] = name
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["date_created"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["last_used"] = None
            __props__.__dict__["pipeline_secret_id"] = None
            __props__.__dict__["secret_id"] = None
        super(PipelineSecret, __self__).__init__(
            'seqera:index/pipelineSecret:PipelineSecret',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            date_created: Optional[pulumi.Input[_builtins.str]] = None,
            last_updated: Optional[pulumi.Input[_builtins.str]] = None,
            last_used: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_secret_id: Optional[pulumi.Input[_builtins.float]] = None,
            secret_id: Optional[pulumi.Input[_builtins.float]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None,
            workspace_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'PipelineSecret':
        """
        Get an existing PipelineSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] date_created: Read-only timestamp when the secret was created
        :param pulumi.Input[_builtins.str] last_used: Read-only timestamp when the secret was last accessed
        :param pulumi.Input[_builtins.str] name: Requires replacement if changed.
        :param pulumi.Input[_builtins.float] pipeline_secret_id: Unique numeric identifier for the secret (nullable)
        :param pulumi.Input[_builtins.float] secret_id: Secret numeric identifier
        :param pulumi.Input[_builtins.float] workspace_id: Workspace numeric identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineSecretState.__new__(_PipelineSecretState)

        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["last_used"] = last_used
        __props__.__dict__["name"] = name
        __props__.__dict__["pipeline_secret_id"] = pipeline_secret_id
        __props__.__dict__["secret_id"] = secret_id
        __props__.__dict__["value"] = value
        __props__.__dict__["workspace_id"] = workspace_id
        return PipelineSecret(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[_builtins.str]:
        """
        Read-only timestamp when the secret was created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> pulumi.Output[_builtins.str]:
        """
        Read-only timestamp when the secret was last accessed
        """
        return pulumi.get(self, "last_used")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineSecretId")
    def pipeline_secret_id(self) -> pulumi.Output[_builtins.float]:
        """
        Unique numeric identifier for the secret (nullable)
        """
        return pulumi.get(self, "pipeline_secret_id")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> pulumi.Output[_builtins.float]:
        """
        Secret numeric identifier
        """
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Workspace numeric identifier
        """
        return pulumi.get(self, "workspace_id")

